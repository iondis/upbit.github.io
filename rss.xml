<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>夢沉抹大拉</title>
    <link>http://blog.imaou.com</link>
    <description>一个追寻抹大拉之地的geeker</description>
    <pubDate>Sat, 07 Mar 2015 00:00:00 +0800</pubDate>
    <item>
      <title>使用最新FLEX代码编译 FLEX injected 并打包</title>
      <link>http://blog.imaou.com/erlang/2015/03/07/make_dtrukr_injected_with_latest_flex.html</link>
      <description><![CDATA[昨天听朋友提到Flipboard/FLEX这个项目，还有个用theos写的Tweak：FLEX_injected。不过用作者自带的deb安装无效，于是自己重新了个。
]]></description>
      <pubDate>Sat, 07 Mar 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/erlang/2015/03/07/make_dtrukr_injected_with_latest_flex.html</guid>
      <content:encoded><![CDATA[<p>昨天听朋友提到<a href="https://github.com/Flipboard/FLEX">Flipboard/FLEX</a>这个项目，还有个用theos写的Tweak：<a href="https://github.com/dtrukr/FLEX_injected">FLEX_injected</a>。不过用作者自带的deb安装无效，于是自己重新了个。</p>

<p><span style="color:#F00"><strong>下载地址</strong></span>：<a href="http://blog.imaou.com/assets/download/com.daapps.FLEXInjected_0.0.1-FLEX_e3612e3.deb"><code>com.daapps.FLEXInjected_0.0.1-FLEX_e3612e3.deb</code></a></p>

<p>注入微信的效果(iPhone4S/iOS8.1下测试通过):</p>

<p><img src="http://blog.imaou.com/images/201502/FLEX_injected_wechat.png" alt="index hello"></p>

<h2>编译方法</h2>

<p>首先尝试按作者的方法编译，make package时因为FLEX版本不对无法继续。</p>

<p>于是自己看了下这个tweak，思路是将FLEX代码中的.m/.h复制到temp目录里，然后Makefile里编译并和Tweak.xm打包在一起。Tweak里核心就一句，在AppList里选中的App里调用<code>[[FLEXManager sharedManager] showExplorer]</code>启动FLEX。</p>

<p>修改Makefile如下，就可以对最新的FLEX<a href="https://github.com/Flipboard/FLEX/commit/e3612e31d7b42744805586c8804cb34e89c8a2d5">e3612e31d7b42744805586c8804cb34e89c8a2d5</a>进行编译了：</p>
<div class="highlight"><pre><code class="language-makefile" data-lang="makefile"><span class="nv">TARGET</span> <span class="o">=</span> iphone::8.1
<span class="nv">ARCHS</span> <span class="o">=</span> armv7 arm64
<span class="cp">include theos/makefiles/common.mk</span>

<span class="nv">ADDITIONAL_CFLAGS</span> <span class="o">=</span> -fobjc-arc -Os -Qunused-arguments -Wno-deprecated-declarations -Itemp -Wno-c++11-extensions -Xclang -fobjc-runtime-has-weak

<span class="nv">SDKVERSION</span> <span class="o">=</span> 8.1
<span class="nv">INCLUDE_SDKVERSION</span> <span class="o">=</span> 8.1
<span class="nv">TARGET_IPHONEOS_DEPLOYMENT_VERSION</span> <span class="o">=</span> 8.1
<span class="nv">TARGET_CC</span> <span class="o">=</span> xcrun -sdk iphoneos clang
<span class="nv">TARGET_CXX</span> <span class="o">=</span> xcrun -sdk iphoneos clang++
<span class="nv">TARGET_LD</span> <span class="o">=</span> xcrun -sdk iphoneos clang++
<span class="nv">SHARED_CFLAGS</span> <span class="o">=</span> -fobjc-arc

<span class="nv">TWEAK_NAME</span> <span class="o">=</span> FLEXInjected

<span class="nv">FLEXInjected_FILES</span> <span class="o">=</span> Tweak.xm temp/FLEXArgumentInputColorView.m temp/FLEXArgumentInputFontsPickerView.m temp/FLEXArgumentInputFontView.m temp/FLEXArgumentInputJSONObjectView.m temp/FLEXArgumentInputNotSupportedView.m temp/FLEXArgumentInputNumberView.m temp/FLEXArgumentInputStringView.m temp/FLEXArgumentInputStructView.m temp/FLEXArgumentInputSwitchView.m temp/FLEXArgumentInputTextView.m temp/FLEXArgumentInputView.m temp/FLEXArgumentInputViewFactory.m temp/FLEXDefaultEditorViewController.m temp/FLEXFieldEditorView.m temp/FLEXFieldEditorViewController.m temp/FLEXIvarEditorViewController.m temp/FLEXMethodCallingViewController.m temp/FLEXPropertyEditorViewController.m temp/FLEXExplorerToolbar.m temp/FLEXExplorerViewController.m temp/FLEXManager.m temp/FLEXToolbarItem.m temp/FLEXWindow.m temp/FLEXClassesTableViewController.m temp/FLEXFileBrowserSearchOperation.m temp/FLEXFileBrowserTableViewController.m temp/FLEXGlobalsTableViewController.m temp/FLEXInstancesTableViewController.m temp/FLEXLibrariesTableViewController.m temp/FLEXLiveObjectsTableViewController.m temp/FLEXWebViewController.m temp/FLEXSystemLogMessage.m temp/FLEXSystemLogTableViewCell.m temp/FLEXSystemLogTableViewController.m temp/FLEXArrayExplorerViewController.m temp/FLEXClassExplorerViewController.m temp/FLEXDefaultsExplorerViewController.m temp/FLEXDictionaryExplorerViewController.m temp/FLEXGlobalsTableViewControllerEntry.m temp/FLEXImageExplorerViewController.m temp/FLEXLayerExplorerViewController.m temp/FLEXObjectExplorerFactory.m temp/FLEXObjectExplorerViewController.m temp/FLEXSetExplorerViewController.m temp/FLEXViewControllerExplorerViewController.m temp/FLEXViewExplorerViewController.m temp/FLEXHeapEnumerator.m temp/FLEXResources.m temp/FLEXRuntimeUtility.m temp/FLEXUtility.m temp/FLEXHierarchyTableViewCell.m temp/FLEXHierarchyTableViewController.m temp/FLEXImagePreviewViewController.m temp/FLEXNetworkTransactionDetailTableViewController.m temp/FLEXNetworkTransactionTableViewCell.m temp/FLEXNetworkTransaction.m temp/FLEXNetworkSettingsTableViewController.m temp/FLEXNetworkRecorder.m temp/FLEXArgumentInputDateView.m temp/FLEXFileBrowserFileOperationController.m temp/FLEXMultilineTableViewCell.m temp/FLEXNetworkHistoryTableViewController.m temp/FLEXNetworkObserver.m
<span class="nv">FLEXInjected_LDFLAGS</span> <span class="o">=</span> -lz
<span class="nv">FLEXInjected_FRAMEWORKS</span> <span class="o">=</span> UIKit CoreGraphics QuartzCore ImageIO

<span class="nv">BUNDLE_NAME</span> <span class="o">=</span> FLEXInjectedBundle
<span class="nv">FLEXInjectedBundle_INSTALL_PATH</span> <span class="o">=</span> /Library/MobileSubstrate/DynamicLibraries
<span class="cp">include $(THEOS)/makefiles/bundle.mk</span>

<span class="cp">include $(THEOS_MAKE_PATH)/tweak.mk</span>

<span class="nf">after-install</span><span class="o">::</span>
    install.exec <span class="s2">&quot;killall -9 SpringBoard&quot;</span>
</code></pre></div>
<p>除了增加了几个 FLEXNetwork 相关的文件，还有个ImageIO需要引用。将上面内容替换原来的Makefile，再./make.sh就可以生成deb了。</p>
]]></content:encoded>
      <dc:date>2015-03-07T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>使用cowboy和relx搭建Web服务01 - 框架搭建</title>
      <link>http://blog.imaou.com/erlang/2015/02/24/build_web_service_with_cowboy_and_relx_1.html</link>
      <description><![CDATA[好久没更新blog了，最主要的还是因为懒... 不过每次看到Chrome收藏夹里坚强2002的Erlang分类，都为自己还没写上1/10的章节而汗颜。于是又把之前学习cowboy的内容给整理了下。
]]></description>
      <pubDate>Tue, 24 Feb 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/erlang/2015/02/24/build_web_service_with_cowboy_and_relx_1.html</guid>
      <content:encoded><![CDATA[<p>好久没更新blog了，最主要的还是因为懒... 不过每次看到Chrome收藏夹里<a href="http://www.cnblogs.com/me-sa/category/304370.html">坚强2002的Erlang分类</a>，都为自己还没写上1/10的章节而汗颜。于是又把之前学习cowboy的内容给整理了下。</p>

<h2>cowboy</h2>

<p>cowboy是个很流行的webserver，并且性能比老牌的mochiweb<a href="http://www.ostinelli.net/a-comparison-between-misultin-mochiweb-cowboy-nodejs-and-tornadoweb/">要强不少</a>。不过照着官方User Guide写了个静态文件的例子，居然无法正确访问。。。估计是部分文档没有更新，建议参考<a href="https://github.com/ninenines/cowboy/tree/master/examples">examples</a>直接获取例子。</p>

<h2>erlang.mk</h2>

<p>cowboy官方推荐用<a href="https://github.com/ninenines/erlang.mk">erlang.mk</a>和<a href="https://github.com/erlware/relx">relx</a>来管理工程。下面我们一步步来创建新的Web服务器框架：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># 首先创建目录 (注意: 目录名就是后面app的名字)</span>
mkdir zserver
<span class="nb">cd </span>zserver/

<span class="c"># 下载最新的erlang.mk</span>
wget https://raw.githubusercontent.com/ninenines/erlang.mk/master/erlang.mk

<span class="c"># 生成OTP应用的模板与Makefile</span>
make -f erlang.mk bootstrap bootstrap-rel
</code></pre></div>
<p>如果是用的以前的erlang.mk，可以使用如下命令更新：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>make erlang-mk
git clone https://github.com/ninenines/erlang.mk .erlang.mk.build
Cloning into <span class="s1">&#39;.erlang.mk.build&#39;</span>...
</code></pre></div>
<h2>Makefile</h2>

<p>接着修改Makefile，修改成下面这样（注意最下面4行要用TAB而不是空格）：</p>
<div class="highlight"><pre><code class="language-makefile" data-lang="makefile"><span class="nv">PROJECT</span> <span class="o">=</span> zserver
<span class="nv">DEPS</span> <span class="o">=</span> cowboy lager jsx
<span class="cp">include erlang.mk</span>

<span class="nv">ERLC_OPTS</span> <span class="o">=</span> +debug_info +<span class="s1">&#39;{parse_transform,lager_transform}&#39;</span>

<span class="nv">RELX_EXPORTS</span> <span class="o">=</span> start foreground stop restart reboot ping console console_clean attach escript
<span class="nf">$(RELX_EXPORTS)</span><span class="o">::</span>
    ./_rel/<span class="k">$(</span>PROJECT<span class="k">)</span>_release/bin/<span class="k">$(</span>PROJECT<span class="k">)</span>_release <span class="nv">$@</span>
<span class="nf">tail</span><span class="o">::</span>
    tail -n <span class="m">120</span> <span class="k">$(</span>shell ls -1 ./_rel/<span class="k">$(</span>PROJECT<span class="k">)</span>_release/log/erlang.log* <span class="p">|</span> tail -n 1<span class="k">)</span>
</code></pre></div>
<ol>
<li><code>DEPS = cowboy lager jsx</code>增加对cowboy,lager,jsx的依赖，lager是日志库，jsx则用于处理json内容</li>
<li><code>ERLC_OPTS = +debug_info +&#39;{parse_transform,lager_transform}&#39;</code>是增加debug<em>info和lager</em>transform的支持</li>
<li><code>RELX_EXPORTS = start foreground stop restart reboot ping console console_clean attach escript</code>是导出rel脚本中的控制命令，这样就可以用<code>make {start|stop}</code>来控制app的启停。实际的控制脚本在<code>./_rel/zserver_release/bin/zserver_release</code></li>
<li><code>tail</code>用于查看app最新的日志，当然也可以将<code>tail -n 120</code>改成<code>tail -f</code>来持续输出log内容</li>
</ol>

<p>配置好DEPS，运行<code>make deps</code>就会从github上clone对应的依赖库。实际这个命令是通过<code>.erlang.mk.packages.v2</code><a href="https://github.com/ninenines/erlang.mk/blob/master/packages.v1.tsv">文件中的配置</a>来运行的。不知道可不可以像Homebrew那样tap到自己的repo，这样方便配置一些第三方依赖库。</p>

<h2>zserver.app.src</h2>

<p>获取完依赖库，接着在app.src中applications部分，加上对cowboy等库的依赖：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="n">zserver</span><span class="p">,</span> <span class="p">[</span>
    <span class="p">{</span><span class="n">description</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="n">vsn</span><span class="p">,</span> <span class="s">&quot;0.1.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="n">id</span><span class="p">,</span> <span class="s">&quot;git&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="n">modules</span><span class="p">,</span> <span class="p">[]},</span>
    <span class="p">{</span><span class="n">registered</span><span class="p">,</span> <span class="p">[]},</span>
    <span class="p">{</span><span class="n">applications</span><span class="p">,</span> <span class="p">[</span>
        <span class="n">kernel</span><span class="p">,</span>
        <span class="n">stdlib</span><span class="p">,</span>
        <span class="n">cowboy</span><span class="p">,</span>
        <span class="n">jsx</span><span class="p">,</span>
        <span class="n">lager</span>
    <span class="p">]},</span>
    <span class="p">{</span><span class="n">mod</span><span class="p">,</span> <span class="p">{</span><span class="n">zserver_app</span><span class="p">,</span> <span class="p">[]}},</span>
    <span class="p">{</span><span class="n">env</span><span class="p">,</span> <span class="p">[]}</span>
<span class="p">]}.</span>
</code></pre></div>
<h2>zserver_app.erl</h2>

<p>接着初始化cowboy。首先配置cowboy的路由表。在start/2中加入<code>cowboy_router:compile</code>：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">start</span><span class="p">(_</span><span class="nv">Type</span><span class="p">,</span> <span class="p">_</span><span class="nv">Args</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">Dispatch</span> <span class="o">=</span> <span class="nn">cowboy_router</span><span class="p">:</span><span class="nf">compile</span><span class="p">([</span>
        <span class="p">{</span><span class="n">&#39;_&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">cowboy_static</span><span class="p">,</span> <span class="p">{</span><span class="n">priv_file</span><span class="p">,</span> <span class="n">zserver</span><span class="p">,</span> <span class="s">&quot;index.html&quot;</span><span class="p">}}</span>
        <span class="p">]}</span>
    <span class="p">]),</span>
</code></pre></div>
<p>cowboy_static是提供一个静态内容，这里将&quot;/&quot;映射到zserver的priv目录下的index.html。</p>

<h3>priv/</h3>

<p>这里严重缺乏文档，摸索了好久才明白，<code>priv</code>是指<code>_rel/zserver_release/lib/zserver-0.1.0/</code>下的priv目录，其中的内容会在make时自动与根目录的priv同步。所以回到zserver/的根目录，<code>mkdir priv</code>后在其中创建一个index.html：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Sample &quot;Hello, World&quot; Application<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body</span> <span class="na">bgcolor=</span><span class="s">white</span><span class="nt">&gt;</span>
    <span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;0&quot;</span> <span class="na">cellpadding=</span><span class="s">&quot;10&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>
          <span class="nt">&lt;h1&gt;</span>Sample &quot;Hello, World&quot; Application<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>
          <span class="nt">&lt;center&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/m&quot;</span><span class="nt">&gt;</span>
              <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/static/image/github.png&quot;</span> <span class="na">style=</span><span class="s">&quot;width: 33%; height: 33%&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/a&gt;</span>
          <span class="nt">&lt;/center&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/table&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p>make后就可以在_rel的对应priv下看到这个index.html了。当然不可能只提供这一个静态文件，下面加上对<code>/static/image/github.png</code>的处理：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">start</span><span class="p">(_</span><span class="nv">Type</span><span class="p">,</span> <span class="p">_</span><span class="nv">Args</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">Dispatch</span> <span class="o">=</span> <span class="nn">cowboy_router</span><span class="p">:</span><span class="nf">compile</span><span class="p">([</span>
        <span class="p">{</span><span class="n">&#39;_&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">cowboy_static</span><span class="p">,</span> <span class="p">{</span><span class="n">priv_file</span><span class="p">,</span> <span class="n">zserver</span><span class="p">,</span> <span class="s">&quot;index.html&quot;</span><span class="p">}},</span>
            <span class="p">{</span><span class="s">&quot;/static/[...]&quot;</span><span class="p">,</span> <span class="n">cowboy_static</span><span class="p">,</span> <span class="p">{</span><span class="n">priv_dir</span><span class="p">,</span> <span class="n">zserver</span><span class="p">,</span> <span class="s">&quot;static&quot;</span><span class="p">}}</span>
        <span class="p">]}</span>
    <span class="p">]),</span>
</code></pre></div>
<p><code>&quot;/static/[...]&quot;</code>表示static后面的所有请求都进入这个处理，而之后priv_dir指定提供一个目录而不仅仅是一个文件，最后的参数&quot;static&quot;指向priv/static目录。</p>

<p>因此最终priv下的目录结构如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">priv/
├── index.html
└── static
    ├── css
    ├── image
    │   └── github.png
    └── js
</code></pre></div>
<p>这样对/static/image/github.png的访问就被顺利映射到/priv/static/image/github.png了。</p>

<h2>custom handler</h2>

<p>除了提供静态文件的访问，当然最重要的是动态处理请求。在Dispatch中加入<code>{&quot;/main&quot;, main_handler, []}</code>，将&quot;/main&quot;映射到<code>main_handler.erl</code>中继续处理。接着像例子中一样启动cowboy server，最终<code>zserver_app.erl</code>看起来像这样：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">zserver_app</span><span class="p">).</span>
<span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">application</span><span class="p">).</span>

<span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
<span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">stop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>

<span class="nf">start</span><span class="p">(_</span><span class="nv">Type</span><span class="p">,</span> <span class="p">_</span><span class="nv">Args</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">Dispatch</span> <span class="o">=</span> <span class="nn">cowboy_router</span><span class="p">:</span><span class="nf">compile</span><span class="p">([</span>
        <span class="p">{</span><span class="n">&#39;_&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="p">{</span><span class="s">&quot;/main&quot;</span><span class="p">,</span> <span class="n">main_handler</span><span class="p">,</span> <span class="p">[]},</span>

            <span class="c">%% static handlers</span>
            <span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">cowboy_static</span><span class="p">,</span> <span class="p">{</span><span class="n">priv_file</span><span class="p">,</span> <span class="n">zserver</span><span class="p">,</span> <span class="s">&quot;index.html&quot;</span><span class="p">}},</span>
            <span class="p">{</span><span class="s">&quot;/static/[...]&quot;</span><span class="p">,</span> <span class="n">cowboy_static</span><span class="p">,</span> <span class="p">{</span><span class="n">priv_dir</span><span class="p">,</span> <span class="n">zserver</span><span class="p">,</span> <span class="s">&quot;static&quot;</span><span class="p">}}</span>
        <span class="p">]}</span>
    <span class="p">]),</span>
    <span class="nv">CowboyOptions</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="n">env</span><span class="p">,</span> <span class="p">[{</span><span class="n">dispatch</span><span class="p">,</span> <span class="nv">Dispatch</span><span class="p">}]},</span>
        <span class="p">{</span><span class="n">compress</span><span class="p">,</span> <span class="n">true</span><span class="p">}</span>
    <span class="p">],</span>
    <span class="nn">cowboy</span><span class="p">:</span><span class="nf">start_http</span><span class="p">(</span><span class="n">http_listener</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="p">[{</span><span class="n">port</span><span class="p">,</span> <span class="mi">8080</span><span class="p">}],</span> <span class="nv">CowboyOptions</span><span class="p">),</span>
    <span class="nn">zserver_sup</span><span class="p">:</span><span class="nf">start_link</span><span class="p">().</span>

<span class="nf">stop</span><span class="p">(_</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">ok</span><span class="p">.</span>
</code></pre></div>
<h2>main_handler.erl</h2>

<p>使用<code>cowboy_http</code>模板创建<code>main_handler.erl</code>：<code>make new t=cowboy_http n=main_handler</code></p>

<p>接着修改生成的<code>src/main_handler.erl</code>为如下内容：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">main_handler</span><span class="p">).</span>
<span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">cowboy_http_handler</span><span class="p">).</span>

<span class="c">%% cowboy_http_handler callbacks</span>
<span class="p">-</span><span class="ni">export</span><span class="p">([</span>
    <span class="n">init</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
    <span class="n">handle</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">terminate</span><span class="o">/</span><span class="mi">3</span>
<span class="p">]).</span>

<span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">state</span><span class="p">,</span> <span class="p">{</span>
<span class="p">}).</span>

<span class="c">%% ===================================================================</span>
<span class="c">%% cowboy_http_handler callbacks</span>
<span class="c">%% ===================================================================</span>

<span class="nf">init</span><span class="p">(_</span><span class="nv">Type</span><span class="p">,</span> <span class="nv">Req</span><span class="p">,</span> <span class="p">_</span><span class="nv">Opts</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}.</span>

<span class="nf">handle</span><span class="p">(</span><span class="nv">Req0</span><span class="p">,</span> <span class="nv">State</span> <span class="o">=</span> <span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
    <span class="nv">Body</span> <span class="o">=</span> <span class="nn">jsx</span><span class="p">:</span><span class="nf">encode</span><span class="p">(</span><span class="err">#</span><span class="p">{</span>
        <span class="o">&lt;&lt;</span><span class="s">&quot;messages&quot;</span><span class="o">&gt;&gt;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="n">hello</span><span class="p">,</span> <span class="n">world</span>
        <span class="p">],</span>
        <span class="o">&lt;&lt;</span><span class="s">&quot;timestamp&quot;</span><span class="o">&gt;&gt;</span> <span class="o">=&gt;</span> <span class="n">timestamp</span><span class="p">()</span>
    <span class="p">}),</span>
    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_req</span><span class="p">:</span><span class="nf">reply</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">[</span>
        <span class="p">{</span><span class="o">&lt;&lt;</span><span class="s">&quot;content-type&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;application/json&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
        <span class="p">{</span><span class="o">&lt;&lt;</span><span class="s">&quot;connection&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;close&quot;</span><span class="o">&gt;&gt;</span><span class="p">}</span>
    <span class="p">],</span> <span class="o">&lt;&lt;</span> <span class="nv">Body</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="o">&gt;&gt;/</span><span class="n">binary</span> <span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Req0</span><span class="p">),</span>
    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>

<span class="nf">terminate</span><span class="p">(_</span><span class="nv">Reason</span><span class="p">,</span> <span class="p">_</span><span class="nv">Req</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
    <span class="n">ok</span><span class="p">.</span>

<span class="c">%% ===================================================================</span>
<span class="c">%% Internal</span>
<span class="c">%% ===================================================================</span>

<span class="nf">timestamp</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="p">{</span><span class="nv">M</span><span class="p">,</span> <span class="nv">S</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nn">os</span><span class="p">:</span><span class="nf">timestamp</span><span class="p">(),</span>  
    <span class="nv">M</span> <span class="o">*</span> <span class="mi">1000000</span> <span class="o">+</span> <span class="nv">S</span><span class="p">.</span>
</code></pre></div>
<p>最常见的是返回json数据，所以这里演示下如何用jsx封装json返回一个atom数组(会转成字符串)和时间戳。注意jsx:encode是不带换行符的，建议返回Body前用<code>&lt;&lt; Body/binary, &lt;&lt;&quot;\n\n&quot;&gt;&gt;/binary &gt;&gt;</code>加2个回车在末尾。</p>

<p>附上完整的源码包：<a href="http://blog.imaou.com/assets/download/cowboy_zserver_src1.tar.gz"><code>cowboy_zserver_src1.tar.gz</code></a></p>

<h2>运行</h2>

<p>make后就可以用<code>make start</code>启动app了。如果没有错误，就可以在<a href="http://localhost:8080/">http://localhost:8080</a>看到index.html的内容：</p>

<p><img src="http://blog.imaou.com/images/201502/zserver_index.png" alt="index hello"></p>

<p>点击url或直接访问/main会返回main_handler中的json数据：</p>

<p><img src="http://blog.imaou.com/images/201502/zserver_json_response.png" alt="json response"></p>

<h2>关于gzip</h2>

<p>测试发现，就算初始化时指定了<code>{compress, true}</code>，如果返回数据太少也会不启用gzip。随着往返回Body里增加内容，<code>curl -i --compressed http://localhost:8080/main</code>就能正确看到gzip的结果了。</p>

<p>ps:越接触OTP越是一头雾水，回头看看以前觉得是天书的《Erlang/OTP并发编程实战》发现对现阶段是大有益处。目前还是潜下心来啃完这本再说...</p>
]]></content:encoded>
      <dc:date>2015-02-24T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Erlang程序设计(第二版)作业笔记3 - lists</title>
      <link>http://blog.imaou.com/erlang/2015/01/28/erlang_stdlib_lists.html</link>
      <description><![CDATA[第九章后面有个阅读公共库lists.erl源码的习题，看了才发现erlang居然能写得如此精妙！比如prefix，判断某个list是否为另一个list的前缀：
]]></description>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/erlang/2015/01/28/erlang_stdlib_lists.html</guid>
      <content:encoded><![CDATA[<p>第九章后面有个阅读公共库<a href="https://github.com/erlang/otp/blob/maint/lib/stdlib/src/lists.erl">lists.erl</a>源码的习题，看了才发现erlang居然能写得如此精妙！比如prefix，判断某个list是否为另一个list的前缀：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="c">%% prefix(Prefix, List) -&gt; (true | false)</span>

<span class="p">-</span><span class="ni">spec</span> <span class="n">prefix</span><span class="p">(</span><span class="nv">List1</span><span class="p">,</span> <span class="nv">List2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">boolean</span><span class="p">()</span> <span class="k">when</span>
      <span class="nv">List1</span> <span class="p">::</span> <span class="p">[</span><span class="nv">T</span><span class="p">],</span>
      <span class="nv">List2</span> <span class="p">::</span> <span class="p">[</span><span class="nv">T</span><span class="p">],</span>
      <span class="nv">T</span> <span class="p">::</span> <span class="n">term</span><span class="p">().</span>

<span class="nf">prefix</span><span class="p">([</span><span class="nv">X</span><span class="p">|</span><span class="nv">PreTail</span><span class="p">],</span> <span class="p">[</span><span class="nv">X</span><span class="p">|</span><span class="nv">Tail</span><span class="p">])</span> <span class="o">-&gt;</span>
    <span class="n">prefix</span><span class="p">(</span><span class="nv">PreTail</span><span class="p">,</span> <span class="nv">Tail</span><span class="p">);</span>
<span class="nf">prefix</span><span class="p">([],</span> <span class="nv">List</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
<span class="nf">prefix</span><span class="p">([_|_],</span> <span class="nv">List</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">false</span><span class="p">.</span>
</code></pre></div>
<p>第一个模式<code>prefix([X|PreTail], [X|Tail])</code>，注意其中的<code>[X|...], [X|...]</code>，这个模式就是检查X是否相同，相同则将Tail继续递归；第二个模式检查PreTail为空时，说明已经全部匹配，返回true；最后的模式当PreList任意元素不匹配时，返回false。</p>

<p>suffix则是另一个思路。之前有定义nthtail用于跳过前N个元素取末尾，因此可以直接算出两个list的长度差，然后从插值开始的偏移取末尾，判断是否与Suffix相等：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="c">%% suffix(Suffix, List) -&gt; (true | false)</span>

<span class="p">-</span><span class="ni">spec</span> <span class="n">suffix</span><span class="p">(</span><span class="nv">List1</span><span class="p">,</span> <span class="nv">List2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">boolean</span><span class="p">()</span> <span class="k">when</span>
      <span class="nv">List1</span> <span class="p">::</span> <span class="p">[</span><span class="nv">T</span><span class="p">],</span>
      <span class="nv">List2</span> <span class="p">::</span> <span class="p">[</span><span class="nv">T</span><span class="p">],</span>
      <span class="nv">T</span> <span class="p">::</span> <span class="n">term</span><span class="p">().</span>

<span class="nf">suffix</span><span class="p">(</span><span class="nv">Suffix</span><span class="p">,</span> <span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">Delta</span> <span class="o">=</span> <span class="nb">length</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Suffix</span><span class="p">),</span>
    <span class="nv">Delta</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">andalso</span> <span class="n">nthtail</span><span class="p">(</span><span class="nv">Delta</span><span class="p">,</span> <span class="nv">List</span><span class="p">)</span> <span class="o">=:=</span> <span class="nv">Suffix</span><span class="p">.</span>
</code></pre></div>
<h3>seq</h3>

<p>seq/2是个很实用的函数，自己实现也不复杂，不过很少能想到项lists里这样加速的：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">seq</span><span class="p">(</span><span class="nv">First</span><span class="p">,</span> <span class="nv">Last</span><span class="p">)</span>
    <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">First</span><span class="p">),</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">Last</span><span class="p">),</span> <span class="nv">First</span><span class="o">-</span><span class="mi">1</span> <span class="o">=&lt;</span> <span class="nv">Last</span> <span class="o">-&gt;</span>
    <span class="n">seq_loop</span><span class="p">(</span><span class="nv">Last</span><span class="o">-</span><span class="nv">First</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Last</span><span class="p">,</span> <span class="p">[]).</span>

<span class="nf">seq_loop</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="o">-&gt;</span>
     <span class="n">seq_loop</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="nv">X</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nv">X</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nv">X</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">X</span><span class="p">|</span><span class="nv">L</span><span class="p">]);</span>
<span class="nf">seq_loop</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">-&gt;</span>
     <span class="n">seq_loop</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="nv">X</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">X</span><span class="p">|</span><span class="nv">L</span><span class="p">]);</span>
<span class="nf">seq_loop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
     <span class="p">[</span><span class="nv">X</span><span class="p">|</span><span class="nv">L</span><span class="p">];</span>
<span class="nf">seq_loop</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">_,</span> <span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
     <span class="nv">L</span><span class="p">.</span>
</code></pre></div>
<p>seq_loop中会一次减4去生成，最后处理输入L长度&gt;=2，1，0的情况。seq/3带步长并且可以是负数，有兴趣可以自己写个看看。</p>

<h3>delete</h3>

<p>delete是个匹配规则，第一个Item匹配后返回Rest，否则进入第二个规则继续：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="c">%% delete(Item, List) -&gt; List&#39;</span>
<span class="c">%%  Delete the first occurrence of Item from the list L.</span>

<span class="p">-</span><span class="ni">spec</span> <span class="n">delete</span><span class="p">(</span><span class="nv">Elem</span><span class="p">,</span> <span class="nv">List1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">List2</span> <span class="k">when</span>
      <span class="nv">Elem</span> <span class="p">::</span> <span class="nv">T</span><span class="p">,</span>
      <span class="nv">List1</span> <span class="p">::</span> <span class="p">[</span><span class="nv">T</span><span class="p">],</span>
      <span class="nv">List2</span> <span class="p">::</span> <span class="p">[</span><span class="nv">T</span><span class="p">],</span>
      <span class="nv">T</span> <span class="p">::</span> <span class="n">term</span><span class="p">().</span>

<span class="nf">delete</span><span class="p">(</span><span class="nv">Item</span><span class="p">,</span> <span class="p">[</span><span class="nv">Item</span><span class="p">|</span><span class="nv">Rest</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nv">Rest</span><span class="p">;</span>
<span class="nf">delete</span><span class="p">(</span><span class="nv">Item</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Rest</span><span class="p">])</span> <span class="o">-&gt;</span>
    <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="n">delete</span><span class="p">(</span><span class="nv">Item</span><span class="p">,</span> <span class="nv">Rest</span><span class="p">)];</span>
<span class="nf">delete</span><span class="p">(_,</span> <span class="p">[])</span> <span class="o">-&gt;</span> <span class="p">[].</span>
</code></pre></div>
<h3>unzip</h3>

<p>unzip没有什么特殊的，只不过注意list因为是指向头部的单向链表，所以为了性能是先把结果附加在头部，然后用reverse逆序：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="c">%% Return {[X0, X1, ..., Xn], [Y0, Y1, ..., Yn]}, for a list [{X0, Y0},</span>
<span class="c">%% {X1, Y1}, ..., {Xn, Yn}].</span>

<span class="p">-</span><span class="ni">spec</span> <span class="n">unzip</span><span class="p">(</span><span class="nv">List1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="nv">List2</span><span class="p">,</span> <span class="nv">List3</span><span class="p">}</span> <span class="k">when</span>
      <span class="nv">List1</span> <span class="p">::</span> <span class="p">[{</span><span class="nv">A</span><span class="p">,</span> <span class="nv">B</span><span class="p">}],</span>
      <span class="nv">List2</span> <span class="p">::</span> <span class="p">[</span><span class="nv">A</span><span class="p">],</span>
      <span class="nv">List3</span> <span class="p">::</span> <span class="p">[</span><span class="nv">B</span><span class="p">],</span>
      <span class="nv">A</span> <span class="p">::</span> <span class="n">term</span><span class="p">(),</span>
      <span class="nv">B</span> <span class="p">::</span> <span class="n">term</span><span class="p">().</span>

<span class="nf">unzip</span><span class="p">(</span><span class="nv">Ts</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">unzip</span><span class="p">(</span><span class="nv">Ts</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>

<span class="nf">unzip</span><span class="p">([{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">}</span> <span class="p">|</span> <span class="nv">Ts</span><span class="p">],</span> <span class="nv">Xs</span><span class="p">,</span> <span class="nv">Ys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">unzip</span><span class="p">(</span><span class="nv">Ts</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span> <span class="p">|</span> <span class="nv">Xs</span><span class="p">],</span> <span class="p">[</span><span class="nv">Y</span> <span class="p">|</span> <span class="nv">Ys</span><span class="p">]);</span>
<span class="nf">unzip</span><span class="p">([],</span> <span class="nv">Xs</span><span class="p">,</span> <span class="nv">Ys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">reverse</span><span class="p">(</span><span class="nv">Xs</span><span class="p">),</span> <span class="n">reverse</span><span class="p">(</span><span class="nv">Ys</span><span class="p">)}.</span>
</code></pre></div>
<p>前面的代码还好，不过看到sort就直接昏了，暂时休战...</p>
]]></content:encoded>
      <dc:date>2015-01-28T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Erlang程序设计(第二版)作业笔记2</title>
      <link>http://blog.imaou.com/erlang/2015/01/25/programming_erlang_2nd_eg2.html</link>
      <description><![CDATA[更新下本周的习题答案，涉及dict的使用和ETS。因为代码中涉及到ETS，提前看了19章的内容。另外ets:fun2ms使用时最大的教训，是-include_lib(&quot;stdlib/include/ms_transform.hrl&quot;).，为了parse_transform问题卡了2天...
]]></description>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/erlang/2015/01/25/programming_erlang_2nd_eg2.html</guid>
      <content:encoded><![CDATA[<p>更新下本周的习题答案，涉及dict的使用和ETS。因为代码中涉及到ETS，提前看了19章的内容。另外ets:fun2ms使用时最大的教训，是<code>-include_lib(&quot;stdlib/include/ms_transform.hrl&quot;).</code>，为了<code>parse_transform</code>问题卡了2天...</p>

<h2>CH8</h2>

<p>第八章这个习题比较有意思，找出已加载模块的导出函数中，名字出现最多的函数(直接想必然是module_info了，不过第二多的是什么确实需要写代码来查看)。另一个问题是输出没有歧义的函数，
即只在一个模块中出现过的函数名。最开始理解错了，进而衍生出一个更复杂的问题：<strong>返回模块中只有1种定义的函数</strong></p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">dt</span><span class="p">).</span>
<span class="p">-</span><span class="ni">compile</span><span class="p">([</span><span class="n">export_all</span><span class="p">]).</span>

<span class="nf">get_loaded_module_exports</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="nv">Mods</span> <span class="o">=</span> <span class="p">[</span> <span class="nv">M</span> <span class="p">||</span> <span class="p">{</span><span class="nv">M</span><span class="p">,_}</span> <span class="o">&lt;-</span> <span class="nn">code</span><span class="p">:</span><span class="nf">all_loaded</span><span class="p">()</span> <span class="p">],</span>
    <span class="nv">List</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">Mod</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span> <span class="p">{</span><span class="nv">Mod</span><span class="p">,</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nv">Mod</span><span class="p">:</span><span class="nf">module_info</span><span class="p">(</span><span class="n">&#39;exports&#39;</span><span class="p">)</span> <span class="p">]</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Mods</span><span class="p">),</span>
    <span class="nn">lists</span><span class="p">:</span><span class="nf">concat</span><span class="p">(</span><span class="nv">List</span><span class="p">).</span>

<span class="c">% 返回所有模块中出现次数最多的函数(单模块内按函数名去重)</span>
<span class="nf">most_exported_function</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="c">% 先按 {模块,函数名} 去重，返回 函数名 组成的list</span>
    <span class="nv">UFuncList</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">usort</span><span class="p">([</span> <span class="p">{</span><span class="nv">M</span><span class="p">,</span><span class="nv">F</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">M</span><span class="p">,</span><span class="nv">F</span><span class="p">,_</span><span class="nv">A</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="n">get_loaded_module_exports</span><span class="p">()</span> <span class="p">]),</span>
    <span class="c">% 统计函数名F在各模块中的出现次数</span>
    <span class="nv">CountFuncs</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">to_list</span><span class="p">(</span><span class="n">most_exported_acc</span><span class="p">(</span><span class="nv">UFuncList</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">new</span><span class="p">())),</span>
    <span class="c">% 按Count排序并返回Head</span>
    <span class="p">[</span><span class="nv">H</span><span class="p">|_</span><span class="nv">T</span><span class="p">]</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">(</span><span class="k">fun</span><span class="p">({_</span><span class="nv">F1</span><span class="p">,</span><span class="nv">C1</span><span class="p">},</span> <span class="p">{_</span><span class="nv">F2</span><span class="p">,</span><span class="nv">C2</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="nv">C1</span> <span class="o">&gt;</span> <span class="nv">C2</span> <span class="k">end</span><span class="p">,</span> <span class="nv">CountFuncs</span><span class="p">),</span>
    <span class="nv">H</span><span class="p">.</span>

<span class="c">% 也可以用no_ambiguity_functions中的 lists:foldl 写法代替</span>
<span class="nf">most_exported_acc</span><span class="p">([],</span> <span class="nv">DictAcc</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">DictAcc</span><span class="p">;</span>
<span class="nf">most_exported_acc</span><span class="p">([{_</span><span class="nv">M</span><span class="p">,</span><span class="nv">F</span><span class="p">}|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">DictAcc</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">most_exported_acc</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">update</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="k">fun</span><span class="p">(</span><span class="nv">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">C</span><span class="o">+</span><span class="mi">1</span> <span class="k">end</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">DictAcc</span><span class="p">)).</span>

<span class="c">% 返回没有歧义(只在一个函数里出现)的函数列表</span>
<span class="nf">no_ambiguity_functions</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="nv">UFuncList</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">usort</span><span class="p">([</span> <span class="p">{</span><span class="nv">M</span><span class="p">,</span><span class="nv">F</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">M</span><span class="p">,</span><span class="nv">F</span><span class="p">,_</span><span class="nv">A</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="n">get_loaded_module_exports</span><span class="p">()</span> <span class="p">]),</span>
    <span class="nv">CountFuncs</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">to_list</span><span class="p">(</span><span class="nn">lists</span><span class="p">:</span><span class="nf">foldl</span><span class="p">(</span><span class="k">fun</span><span class="p">({_</span><span class="nv">M</span><span class="p">,</span><span class="nv">F</span><span class="p">},</span> <span class="nv">Dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">update</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="k">fun</span><span class="p">(</span><span class="nv">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">C</span><span class="o">+</span><span class="mi">1</span> <span class="k">end</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Dict</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">new</span><span class="p">(),</span> <span class="nv">UFuncList</span><span class="p">)),</span>
    <span class="p">[</span> <span class="nv">F</span> <span class="p">||</span> <span class="p">{</span><span class="nv">F</span><span class="p">,</span><span class="nv">C</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nv">CountFuncs</span><span class="p">,</span> <span class="nv">C</span><span class="o">=:=</span><span class="mi">1</span> <span class="p">].</span>
</code></pre></div>
<h2>CH19</h2>

<p>ETS的使用作业，将系统目录下lib的导出函数，写入ETS中：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ch19</span><span class="p">).</span>
<span class="p">-</span><span class="ni">compile</span><span class="p">([</span><span class="n">export_all</span><span class="p">]).</span>

<span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">ETS_TABLE_NAME</span><span class="p">,</span> <span class="n">ch19_table</span><span class="p">).</span>
<span class="c">% needed by ets:fun2ms: http://www.erlang.org/doc/man/ets.html#fun2ms-1</span>
<span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;stdlib/include/ms_transform.hrl&quot;</span><span class="p">).</span>

<span class="nf">get_module_lists</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Mod_dirs</span><span class="p">}</span> <span class="o">=</span> <span class="nn">file</span><span class="p">:</span><span class="nf">list_dir</span><span class="p">(</span><span class="nn">code</span><span class="p">:</span><span class="nf">lib_dir</span><span class="p">()),</span>
    <span class="c">% 注意这里将字符串转成atom，用tokens去掉后面 -x.y.z 的版本号</span>
    <span class="p">[</span> <span class="nb">list_to_atom</span><span class="p">(</span><span class="nb">hd</span><span class="p">(</span><span class="nn">string</span><span class="p">:</span><span class="nf">tokens</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="s">&quot;-&quot;</span><span class="p">)))</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nv">Mod_dirs</span> <span class="p">].</span>

<span class="nf">get_module_exports</span><span class="p">(</span><span class="nv">Mod</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="c">% 如果函数参数个数不确定，可以换成：erlang:apply(Mod, module_info, [&#39;exports&#39;])</span>
    <span class="k">case</span> <span class="k">catch</span> <span class="p">[</span> <span class="p">{</span> <span class="p">{</span><span class="nv">Mod</span><span class="p">,</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">},</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nv">Mod</span><span class="p">:</span><span class="nf">module_info</span><span class="p">(</span><span class="n">&#39;exports&#39;</span><span class="p">),</span> <span class="nv">F</span><span class="o">=/=</span><span class="n">module_info</span> <span class="p">]</span> <span class="k">of</span>
        <span class="p">{</span><span class="n">&#39;EXIT&#39;</span><span class="p">,</span> <span class="p">_}</span> <span class="o">-&gt;</span> <span class="p">[];</span>
        <span class="nv">X</span> <span class="o">-&gt;</span> <span class="nv">X</span>
    <span class="k">end</span><span class="p">.</span>

<span class="nf">init_ets</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="nv">Exports</span> <span class="o">=</span> <span class="p">[</span> <span class="n">get_module_exports</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="n">get_module_lists</span><span class="p">()</span> <span class="p">],</span>
    <span class="c">% 创建共享的有名set</span>
    <span class="nn">ets</span><span class="p">:</span><span class="nf">new</span><span class="p">(</span><span class="o">?</span><span class="nv">ETS_TABLE_NAME</span><span class="p">,</span> <span class="p">[</span><span class="n">public</span><span class="p">,</span> <span class="n">named_table</span><span class="p">,</span> <span class="n">set</span><span class="p">]),</span>
    <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">insert</span><span class="p">(</span><span class="o">?</span><span class="nv">ETS_TABLE_NAME</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Exports</span><span class="p">),</span>
    <span class="n">ok</span><span class="p">.</span>

<span class="c">% 以match方式输出ETS内容</span>
<span class="nf">match_module_exports</span><span class="p">(</span><span class="nv">Mod</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="c">% lists:flatten(io_lib:format(&quot;~p~p&quot;, [atom1, atom2])) 用于将两个atom拼接为字符串</span>
    <span class="p">[</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">flatten</span><span class="p">(</span><span class="nn">io_lib</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s">/</span><span class="si">~p</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">]))</span> <span class="p">||</span> <span class="p">[</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span> <span class="o">&lt;-</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">match</span><span class="p">(</span><span class="o">?</span><span class="nv">ETS_TABLE_NAME</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="nv">Mod</span><span class="p">,</span><span class="n">&#39;$1&#39;</span><span class="p">,</span><span class="n">&#39;$2&#39;</span><span class="p">},</span> <span class="n">&#39;_&#39;</span> <span class="p">})].</span>

<span class="c">% 更快的select方式。遇到 parse_transform 错误时，注意引用ms_transform.hrl</span>
<span class="nf">select_module_exports</span><span class="p">(</span><span class="nv">Mod</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">Filter</span> <span class="o">=</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">fun2ms</span><span class="p">(</span><span class="k">fun</span><span class="p">({</span> <span class="p">{</span><span class="nv">M</span><span class="p">,</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">},</span> <span class="p">_</span> <span class="p">})</span> <span class="k">when</span> <span class="nv">M</span><span class="o">=:=</span><span class="nv">Mod</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span> <span class="k">end</span><span class="p">),</span>
    <span class="nv">Result</span> <span class="o">=</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">select</span><span class="p">(</span><span class="o">?</span><span class="nv">ETS_TABLE_NAME</span><span class="p">,</span> <span class="nv">Filter</span><span class="p">),</span>
    <span class="p">[</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">flatten</span><span class="p">(</span><span class="nn">io_lib</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s">/</span><span class="si">~p</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">]))</span> <span class="p">||</span> <span class="p">[</span><span class="nv">F</span><span class="p">,</span><span class="nv">A</span><span class="p">]</span> <span class="o">&lt;-</span> <span class="nv">Result</span> <span class="p">].</span>
</code></pre></div>
<p>主要学到了以下几点：</p>

<ol>
<li>ets:fun2me的函数，需要引用ms<em>transform.hrl（不然会报parse</em>transform错误）；</li>
<li>ETS的key可以是tuple，最初我还在找拼接/拆分字符串的方法...；</li>
<li>多个atom拼接成字符串，可以用<code>lists:flatten(io_lib:format(&quot;~p&quot;, [...]))</code>；</li>
</ol>

<p>另外还有两个<strong>遗留问题</strong>：</p>

<p><strong>一是当<code>Mod:module_info/1</code>函数不存在时，不用catch怎么处理？</strong>听Adam说server代码里除了HTTPServer最外层会框一层try/catch，基本不会使用异常处理（因为和erlang的&quot;任其崩溃&quot;原则相违背？感觉像以前听人讲goto）</p>

<p>[2015-01-26补充] 今天看代码发现种写法，可以分辨模块中某个函数是否有导出(不能是<code>module_info</code>)：<code>[ Module:foobar() || {Module, _} &lt;- ModuleLists, lists:member({foobar, 0}, Module:module_info(exports))]</code>。使用lists:member/2过滤没有foobar函数的模块，最后用生成的列表调用foobar()初始化。这个写法果然很精妙！</p>

<p><strong>二是如何确保ETS表不丢失？</strong>Adam提供的方案是由sup进程持有ETS，worker只通过名字来访问它。可能还没看erlang的进程模型/OTP，还是觉得对Erlang的编程思路不太理解。为什么不能是无中心的(抢占式模型)？worker进程发现没有ETS就创建新的，然后再worker死亡时交给下一个worker持有，这样就不会出现因sup这样单点进程挂掉而引起的灾难了。</p>
]]></content:encoded>
      <dc:date>2015-01-25T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Aldnoah Zero 第二季开坑</title>
      <link>http://blog.imaou.com/misc/2015/01/20/aldnoah_zero_2nd_start.html</link>
      <description><![CDATA[
]]></description>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2015/01/20/aldnoah_zero_2nd_start.html</guid>
      <content:encoded><![CDATA[<p><img src="http://blog.imaou.com/images/201501/aldnoah_zero_2_01.png" alt="Aldnoah Zero 2"></p>

<p>第二季开场，十九月不见斯雷因果然长进了。。。可惜面瘫男第二集一出来，就占尽了风头，一路外挂式的计算能力范围加计算弹道：</p>

<p><img src="http://blog.imaou.com/images/201501/aldnoah_zero_2_02.png" alt="Aldnoah Zero 2"></p>

<p>不过有了Aldnoah能力还用着训练机，面瘫是有多喜欢招摇...</p>
]]></content:encoded>
      <dc:date>2015-01-20T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Erlang程序设计(第二版)作业笔记1</title>
      <link>http://blog.imaou.com/erlang/2015/01/15/programming_erlang_2nd_eg1.html</link>
      <description><![CDATA[最近看Erlang程序设计(第二版)，做完书上几个作业感觉果然对内容熟悉很多，特此记录下写法，以免忘记。
]]></description>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/erlang/2015/01/15/programming_erlang_2nd_eg1.html</guid>
      <content:encoded><![CDATA[<p>最近看Erlang程序设计(第二版)，做完书上几个作业感觉果然对内容熟悉很多，特此记录下写法，以免忘记。</p>

<h2>CH4</h2>

<p>(2) 实现自己的 <code>my_tuple_to_list()</code>: 要点是用 element() 访问tuple，用lists:seq()生成列表推导的索引源；
(5/6) 实现even/1, odd/1, filter/2；
(7) 用2种方法实现split()，将Evens/Odds分堆；</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ch4</span><span class="p">).</span>
<span class="p">-</span><span class="ni">compile</span><span class="p">([</span><span class="n">export_all</span><span class="p">]).</span>

<span class="nf">odd_and_evens_acc</span><span class="p">([],</span> <span class="nv">Odds</span><span class="p">,</span> <span class="nv">Evens</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">{</span><span class="nv">Odds</span><span class="p">,</span> <span class="nv">Evens</span><span class="p">};</span>
<span class="nf">odd_and_evens_acc</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Odds</span><span class="p">,</span> <span class="nv">Evens</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="k">case</span> <span class="p">(</span><span class="nv">H</span> <span class="ow">rem</span> <span class="mi">2</span><span class="p">)</span> <span class="k">of</span>
        <span class="mi">1</span> <span class="o">-&gt;</span> <span class="n">odd_and_evens_acc</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Odds</span><span class="p">],</span> <span class="nv">Evens</span><span class="p">);</span>
        <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">odd_and_evens_acc</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Odds</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Evens</span><span class="p">])</span>
    <span class="k">end</span><span class="p">.</span>

<span class="nf">my_tuple_to_list</span><span class="p">({})</span> <span class="o">-&gt;</span>
    <span class="p">[];</span>
<span class="nf">my_tuple_to_list</span><span class="p">(</span><span class="nv">T</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">[</span> <span class="nb">element</span><span class="p">(</span><span class="nv">I</span><span class="p">,</span> <span class="nv">T</span><span class="p">)</span> <span class="p">||</span> <span class="nv">I</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">tuple_size</span><span class="p">(</span><span class="nv">T</span><span class="p">))</span> <span class="p">].</span>

<span class="nf">even</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">N</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">.</span>
<span class="nf">odd</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">N</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">.</span>

<span class="nf">filter</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">[</span> <span class="nv">X</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nv">L</span><span class="p">,</span> <span class="nv">F</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">==</span> <span class="n">true</span> <span class="p">].</span>

<span class="nf">split1</span><span class="p">([])</span> <span class="o">-&gt;</span>
    <span class="p">[];</span>
<span class="nf">split1</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">Evens</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="k">fun</span> <span class="n">even</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span>
    <span class="nv">Odds</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="k">fun</span> <span class="n">odd</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="nv">L</span><span class="p">),</span>
    <span class="p">{</span><span class="nv">Evens</span><span class="p">,</span> <span class="nv">Odds</span><span class="p">}.</span>

<span class="nf">split2</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">{</span><span class="nv">Evens</span><span class="p">,</span> <span class="nv">Odds</span><span class="p">}</span> <span class="o">=</span> <span class="n">split_acc</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]),</span>
    <span class="p">{</span><span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Evens</span><span class="p">),</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Odds</span><span class="p">)}.</span>
<span class="nf">split_acc</span><span class="p">([],</span> <span class="nv">Evens</span><span class="p">,</span> <span class="nv">Odds</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">{</span><span class="nv">Evens</span><span class="p">,</span> <span class="nv">Odds</span><span class="p">};</span>
<span class="nf">split_acc</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Evens</span><span class="p">,</span> <span class="nv">Odds</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="k">case</span> <span class="nv">H</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="k">of</span>
        <span class="mi">1</span> <span class="o">-&gt;</span> <span class="n">split_acc</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Evens</span><span class="p">],</span> <span class="nv">Odds</span><span class="p">);</span>
        <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">split_acc</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Evens</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Odds</span><span class="p">])</span>
    <span class="k">end</span><span class="p">.</span>
</code></pre></div>
<h2>CH5</h2>

<p>(2) 实现 <code>map_search_pred()</code>，返回第一个使Pred()==true的 {Key, Value}</p>

<p>最开始以为很容易，不过看过作者Joe的帖子 <a href="http://joearms.github.io/2015/01/08/Some_Performance-Measurements-On-Maps.html">Some Performance Measurements On Maps</a> 后发现，这样实现在list很大时性能很差(需要全部遍历一遍)。看完学到种新的办法，throw结果然后在外面catch，这样就可以避免遍历全部list了，对比见 test()：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ch5</span><span class="p">).</span>
<span class="p">-</span><span class="ni">compile</span><span class="p">([</span><span class="n">export_all</span><span class="p">]).</span>

<span class="nf">make</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">M</span><span class="p">,</span> <span class="p">_)</span> <span class="o">-&gt;</span> <span class="nv">M</span><span class="p">;</span>
<span class="nf">make</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">M</span><span class="p">,</span> <span class="nv">I</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">make</span><span class="p">(</span><span class="nv">K</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nn">maps</span><span class="p">:</span><span class="nb">put</span><span class="p">(</span><span class="nv">I</span><span class="p">,</span><span class="nv">I</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nv">M</span><span class="p">),</span><span class="nv">I</span><span class="o">+</span><span class="mi">2</span><span class="p">).</span>

<span class="c">% find first key for Pred(Key, Value) = ture</span>
<span class="nf">map_search_pred</span><span class="p">(</span><span class="nv">Map</span><span class="p">,</span> <span class="nv">Pred</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">[</span><span class="nv">H</span><span class="p">|_]</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nn">maps</span><span class="p">:</span><span class="nf">to_list</span><span class="p">(</span><span class="nv">Map</span><span class="p">),</span> <span class="nv">Pred</span><span class="p">(</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="o">=:=</span> <span class="n">true</span> <span class="p">],</span>
    <span class="nv">H</span><span class="p">.</span>

<span class="nf">catch_map_search_pred</span><span class="p">(</span><span class="nv">Map</span><span class="p">,</span> <span class="nv">Pred</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="p">(</span><span class="k">catch</span> <span class="n">map_search_pred</span><span class="p">(</span><span class="nv">Map</span><span class="p">,</span> <span class="nv">Pred</span><span class="p">)).</span>

<span class="nf">test</span><span class="p">()</span> <span class="o">-&gt;</span>
    <span class="nv">M</span> <span class="o">=</span> <span class="n">make</span><span class="p">(</span><span class="mi">20000</span><span class="p">,</span> <span class="err">#</span><span class="p">{},</span> <span class="mi">1</span><span class="p">),</span>
    <span class="nv">Fs</span> <span class="o">=</span> <span class="k">fun</span><span class="p">(</span><span class="nv">K</span><span class="p">,_)</span> <span class="o">-&gt;</span> <span class="nv">K</span><span class="o">=:=</span><span class="mi">1999</span> <span class="k">end</span><span class="p">,</span>
    <span class="nv">Ft</span> <span class="o">=</span> <span class="k">fun</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span><span class="nv">V</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span><span class="o">=:=</span><span class="mi">1999</span> <span class="o">-&gt;</span> <span class="n">throw</span><span class="p">({</span><span class="nv">K</span><span class="p">,</span><span class="nv">V</span><span class="p">});</span> <span class="p">(_,_)</span> <span class="o">-&gt;</span> <span class="n">false</span> <span class="k">end</span><span class="p">,</span>
    <span class="p">{</span>
     <span class="nn">timer</span><span class="p">:</span><span class="nf">tc</span><span class="p">(</span><span class="n">ch5</span><span class="p">,</span> <span class="n">map_search_pred</span><span class="p">,</span> <span class="p">[</span><span class="nv">M</span><span class="p">,</span> <span class="nv">Fs</span><span class="p">]),</span>
     <span class="nn">timer</span><span class="p">:</span><span class="nf">tc</span><span class="p">(</span><span class="n">ch5</span><span class="p">,</span> <span class="n">catch_map_search_pred</span><span class="p">,</span> <span class="p">[</span><span class="nv">M</span><span class="p">,</span> <span class="nv">Ft</span><span class="p">]),</span>
     <span class="n">null</span>
    <span class="p">}.</span>
</code></pre></div>
<p>另外map的语法还有个坑，62页的模式匹配在 Erlang 17 里，<code>2&gt; #{ bron =&gt; B } = Henry8.</code>要改成<code>2&gt; #{ bron := B } = Henry8.</code>才能通过(感谢Adam指点)。另外那个统计字符的例子实际无法运行，作者说：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#52256: what&#39;s up with count_characters/3?
    I&#39;m guessing
        count_characters(T, #{ H =&gt; 1 }, X));
    should be
        count_characters(T, X#{ H =&gt; 1 });

Joe Armstrong says: This is problematic. Keys in maps used outside the map are currently illegal
  but I hope this situation will change in a future not too distant release of Erlang.
  At this stage I don&#39;t want to change the text - even though it is incorrect.
</code></pre></div>
<p>好吧，那等以后版本再来玩玩。</p>

<h2>CH7</h2>

<p>(1) 逆转二进制型里的字节序</p>

<p>这个问题其实没那么容易，首先书上没说明怎么拼接两个二进制型。首先是拆分：<code>&lt;&lt; H,T/binary &gt;&gt;</code>，接着将H拼接到Acc的头部 <code>&lt;&lt; &lt;&lt;H&gt;&gt;/binary, Ret/binary &gt;&gt;</code>，注意/binary：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ch7</span><span class="p">).</span>
<span class="p">-</span><span class="ni">compile</span><span class="p">([</span><span class="n">export_all</span><span class="p">]).</span>

<span class="nf">binary_reverse1</span><span class="p">(</span><span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">binary_reverse_acc1</span><span class="p">(</span><span class="nv">B</span><span class="p">,</span> <span class="o">&lt;&lt;&gt;&gt;</span><span class="p">).</span>
<span class="nf">binary_reverse_acc1</span><span class="p">(</span><span class="o">&lt;&lt;&gt;&gt;</span><span class="p">,</span> <span class="nv">Ret</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nv">Ret</span><span class="p">;</span>
<span class="nf">binary_reverse_acc1</span><span class="p">(</span><span class="o">&lt;&lt;</span> <span class="nv">H</span><span class="p">,</span><span class="nv">T</span><span class="o">/</span><span class="n">binary</span> <span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Ret</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">binary_reverse_acc1</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="o">&lt;&lt;</span> <span class="o">&lt;&lt;</span><span class="nv">H</span><span class="o">&gt;&gt;/</span><span class="n">binary</span><span class="p">,</span> <span class="nv">Ret</span><span class="o">/</span><span class="n">binary</span> <span class="o">&gt;&gt;</span><span class="p">).</span>

<span class="nf">foldl</span><span class="p">(_,</span> <span class="p">_,</span> <span class="o">&lt;&lt;&gt;&gt;</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="o">&lt;&lt;&gt;&gt;</span><span class="p">;</span>
<span class="nf">foldl</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="o">&lt;&lt;</span> <span class="nv">H</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="nv">T</span><span class="o">/</span><span class="n">binary</span> <span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="nv">B</span><span class="p">,</span>
    <span class="nv">Ret</span> <span class="o">=</span> <span class="n">foldl</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">F</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">),</span> <span class="nv">T</span><span class="p">),</span>
    <span class="o">&lt;&lt;</span> <span class="o">&lt;&lt;</span> <span class="nv">H</span> <span class="o">&gt;&gt;/</span><span class="n">binary</span><span class="p">,</span> <span class="nv">Ret</span><span class="o">/</span><span class="n">binary</span> <span class="o">&gt;&gt;</span><span class="p">.</span>

<span class="nf">foldr</span><span class="p">(_,</span> <span class="p">_,</span> <span class="o">&lt;&lt;&gt;&gt;</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="o">&lt;&lt;&gt;&gt;</span><span class="p">;</span>
<span class="nf">foldr</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="o">&lt;&lt;</span> <span class="nv">H</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="nv">T</span><span class="o">/</span><span class="n">binary</span> <span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="nv">B</span><span class="p">,</span>
    <span class="nv">Ret</span> <span class="o">=</span> <span class="n">foldr</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">F</span><span class="p">(</span><span class="nv">H</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">),</span> <span class="nv">T</span><span class="p">),</span>
    <span class="o">&lt;&lt;</span> <span class="nv">Ret</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span> <span class="o">&lt;&lt;</span> <span class="nv">H</span> <span class="o">&gt;&gt;/</span><span class="n">binary</span> <span class="o">&gt;&gt;</span><span class="p">.</span>

<span class="c">% match &lt;&lt; Len/2, Data/Len &gt;&gt;</span>
<span class="c">% &lt;&lt;Len:16, Bin1/binary&gt;&gt;</span>
<span class="c">% &lt;&lt;Str:Len/binary-unit:8, Rest/binary&gt;&gt;</span>
</code></pre></div>
<p>另外按Adam所说，尝试实现了二进制版的foldl/foldr，有fold就可以直接用单行 Acc 累加了。</p>

<p>最后在<a href="http://www.cnblogs.com/me-sa/archive/2011/12/25/erlang0024.html">Erlang二进制数据处理</a>中常用的match Len/Data的方法，写法上注意<code>Str:Len/binary-unit:8</code>就行，剩余部分放到Rest里。</p>
]]></content:encoded>
      <dc:date>2015-01-15T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Erlang代码的性能测试与调优</title>
      <link>http://blog.imaou.com/erlang/2015/01/08/erlang_benchmark_and_performance_optimization.html</link>
      <description><![CDATA[今天逛GitHub发现一段Erlang的性能测试代码，于是把之前的矩阵转置程序测试了下。经过一系列调整得到如下结论：
]]></description>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/erlang/2015/01/08/erlang_benchmark_and_performance_optimization.html</guid>
      <content:encoded><![CDATA[<p>今天逛GitHub发现一段<a href="https://github.com/wasted/scala-vs-erlang/blob/master/erlang/client.erl">Erlang的性能测试代码</a>，于是把之前的矩阵转置程序测试了下。经过一系列调整得到如下结论：</p>

<ol>
<li>尽可能去掉 <code>length(L)&gt;0</code> 这种函数调用，用 <code>L=/=[]</code> 代替；</li>
<li><strong>在可以用 <code>[H|T]</code> 代替 <code>++</code> 时，优先使用前一种写法</strong> (虽然看起来很糟糕，不过性能上提升很大！)；</li>
<li><code>lists:append()</code>替换成<code>++</code>，<code>lists:map()</code>改用自己实现，性能上几乎没有太多提升，可以直接使用；</li>
<li>同样的判断条件下，<code>case</code>比<code>if</code>的性能略差，能用if时还是用if吧。</li>
</ol>

<h2>测试过程</h2>

<h3>0: 原始程序</h3>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">mt</span><span class="p">).</span>
<span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">transpose0</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">benchmark</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>

<span class="nf">transpose0</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">transpose0</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]).</span>

<span class="nf">transpose0</span><span class="p">([],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">case</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">)</span> <span class="k">of</span>
    <span class="mi">0</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lret</span><span class="p">,</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">]);</span>
    <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">transpose0</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lret</span><span class="p">,</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">]))</span>
  <span class="k">end</span><span class="p">;</span>
<span class="nf">transpose0</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">case</span> <span class="nb">length</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">of</span>
    <span class="n">true</span> <span class="o">-&gt;</span>
      <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">TT</span><span class="p">]</span> <span class="o">=</span> <span class="nv">H</span><span class="p">,</span>
      <span class="k">case</span> <span class="nb">length</span><span class="p">(</span><span class="nv">TT</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">of</span>
        <span class="n">true</span> <span class="o">-&gt;</span> <span class="n">transpose0</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">]),</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[</span><span class="nv">TT</span><span class="p">]),</span> <span class="nv">Lret</span><span class="p">);</span>
        <span class="n">false</span> <span class="o">-&gt;</span> <span class="n">transpose0</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">]),</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
      <span class="k">end</span><span class="p">;</span>
    <span class="n">false</span> <span class="o">-&gt;</span> <span class="n">transpose0</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">]),</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
  <span class="k">end</span><span class="p">.</span>

<span class="c">%% ====================================================================</span>
<span class="c">%% Benchmark functions</span>
<span class="c">%% ====================================================================</span>

<span class="nf">benchmark</span><span class="p">(</span><span class="nv">Loop</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="nv">M</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">12</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">16</span><span class="p">]],</span>
  <span class="nv">Start</span><span class="o">=</span><span class="n">now</span><span class="p">(),</span>
  <span class="nn">lists</span><span class="p">:</span><span class="nf">foreach</span><span class="p">(</span><span class="k">fun</span> <span class="p">(_</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">transpose0</span><span class="p">(</span><span class="nv">M</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nv">Loop</span><span class="p">)),</span>
  <span class="nv">Finish</span><span class="o">=</span><span class="n">now</span><span class="p">(),</span>
  <span class="n">print_results</span><span class="p">(</span><span class="nv">Loop</span><span class="p">,</span><span class="nv">Start</span><span class="p">,</span><span class="nv">Finish</span><span class="p">).</span>

<span class="nf">print_results</span><span class="p">(</span><span class="nv">Loop</span><span class="p">,</span><span class="nv">Start</span><span class="p">,</span><span class="nv">Finish</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Test </span><span class="si">~p</span><span class="s"> took </span><span class="si">~p</span><span class="s"> seconds</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Loop</span><span class="p">,</span> <span class="n">elapsedTime</span><span class="p">(</span><span class="nv">Start</span><span class="p">,</span><span class="nv">Finish</span><span class="p">)]),</span>
  <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Throughput=</span><span class="si">~p</span><span class="s"> per sec</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="n">throughput</span><span class="p">(</span><span class="nv">Loop</span><span class="p">,</span><span class="nv">Start</span><span class="p">,</span><span class="nv">Finish</span><span class="p">)]).</span>

<span class="nf">elapsedTime</span><span class="p">(</span><span class="nv">Start</span><span class="p">,</span><span class="nv">Finish</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">timer</span><span class="p">:</span><span class="nf">now_diff</span><span class="p">(</span><span class="nv">Finish</span><span class="p">,</span> <span class="nv">Start</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000</span><span class="p">.</span>

<span class="nf">throughput</span><span class="p">(</span><span class="nv">Size</span><span class="p">,</span><span class="nv">Start</span><span class="p">,</span><span class="nv">Finish</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Size</span> <span class="o">/</span> <span class="n">elapsedTime</span><span class="p">(</span><span class="nv">Start</span><span class="p">,</span><span class="nv">Finish</span><span class="p">).</span>
</code></pre></div>
<p>都按默认的矩阵M，计算100w次调用所消耗的时间：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">4</span><span class="p">.</span><span class="mi">330299</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">230930</span><span class="p">.</span><span class="mi">93571598636</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
<span class="mi">2</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">4</span><span class="p">.</span><span class="mi">140271</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">241530</span><span class="p">.</span><span class="mi">0834172449</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
</code></pre></div>
<h3>1: 去掉length()，换成if判断</h3>

<p>看了下代码，估计是<code>case</code>的原因。稍微优化了下，改成<code>if</code>来判断：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">transpose1</span><span class="p">([],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">if</span>
    <span class="nv">Ltail</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose1</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lret</span><span class="p">,</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">]));</span>
    <span class="nv">Ltail</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lret</span><span class="p">,</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">])</span>
  <span class="k">end</span><span class="p">;</span>
<span class="nf">transpose1</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">if</span>
    <span class="nv">H</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">TT</span><span class="p">]</span> <span class="o">=</span> <span class="nv">H</span><span class="p">,</span>
    <span class="k">if</span>
      <span class="nv">TT</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose1</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">]),</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[</span><span class="nv">TT</span><span class="p">]),</span> <span class="nv">Lret</span><span class="p">);</span>
      <span class="nv">TT</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose1</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">]),</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
    <span class="k">end</span><span class="p">;</span>
    <span class="nv">H</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose1</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
  <span class="k">end</span><span class="p">.</span>
</code></pre></div><div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">2</span><span class="p">.</span><span class="mi">600908</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">384481</span><span class="p">.</span><span class="mi">11198089283</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
<span class="mi">4</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">2</span><span class="p">.</span><span class="mi">654778</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">376679</span><span class="p">.</span><span class="mi">33062576235</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
</code></pre></div>
<p>将<code>case</code>语句换成<code>if</code>后，100w次调用的耗时大幅减少了，估计是<code>length()</code>开销太大。</p>

<h3>2: 用++替换lists:append()</h3>

<p>既然是库函数消耗性能，继续尝试将<code>lists:append()</code>换成<code>++</code>的方式：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">transpose2</span><span class="p">([],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">if</span>
    <span class="nv">Ltail</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose2</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="nv">Lret</span> <span class="o">++</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">]);</span>
    <span class="nv">Ltail</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="nv">Lret</span> <span class="o">++</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">]</span>
  <span class="k">end</span><span class="p">;</span>
<span class="nf">transpose2</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">if</span>
    <span class="nv">H</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">TT</span><span class="p">]</span> <span class="o">=</span> <span class="nv">H</span><span class="p">,</span>
    <span class="k">if</span>
      <span class="nv">TT</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose2</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Lhead</span> <span class="o">++</span> <span class="p">[</span><span class="nv">TH</span><span class="p">],</span> <span class="nv">Ltail</span> <span class="o">++</span> <span class="p">[</span><span class="nv">TT</span><span class="p">],</span> <span class="nv">Lret</span><span class="p">);</span>
      <span class="nv">TT</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose2</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Lhead</span> <span class="o">++</span> <span class="p">[</span><span class="nv">TH</span><span class="p">],</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
    <span class="k">end</span><span class="p">;</span>
    <span class="nv">H</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose2</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
  <span class="k">end</span><span class="p">.</span>
</code></pre></div><div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">2</span><span class="p">.</span><span class="mi">162367</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">462456</span><span class="p">.</span><span class="mi">1880568839</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
<span class="mi">6</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">2</span><span class="p">.</span><span class="mi">158168</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">463355</span><span class="p">.</span><span class="mi">9574602163</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
</code></pre></div>
<p>运行结果证实了这个猜想，使用<code>++</code>的语法比调用<code>lists:append()</code>要快。网上也看到有<a href="http://blog.csdn.net/zhongruixian/article/details/9417201">文章</a>说lists:append()的底层就是调用的<code>++</code>。</p>

<h3>3: 极限优化，用[H|T]替换++</h3>

<p>不过既然想到<code>++</code>的语法，那么自然会想到用<code>[H|T]</code>的方式来附加数据。只不过测试中发现点小问题：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">transpose3</span><span class="p">([],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">if</span>
    <span class="nv">Ltail</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">|</span><span class="nv">Lret</span><span class="p">]);</span>
    <span class="nv">Ltail</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">|</span><span class="nv">Lret</span><span class="p">]</span>
  <span class="k">end</span><span class="p">;</span>
<span class="nf">transpose3</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">if</span>
    <span class="nv">H</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">TT</span><span class="p">]</span> <span class="o">=</span> <span class="nv">H</span><span class="p">,</span>
      <span class="k">if</span>
        <span class="nv">TT</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">Lhead</span><span class="p">],</span> <span class="p">[</span><span class="nv">TT</span><span class="p">|</span><span class="nv">Ltail</span><span class="p">],</span> <span class="nv">Lret</span><span class="p">);</span>
        <span class="nv">TT</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">Lhead</span><span class="p">],</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
      <span class="k">end</span><span class="p">;</span>
    <span class="nv">H</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
  <span class="k">end</span><span class="p">.</span>
</code></pre></div>
<p>测试发现，虽然性能是极大幅度提升了，但输出不对。<code>[H|T]</code>是insert(0)而不是想要的append()，输出的内容都逆序了...</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">7</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">0</span><span class="p">.</span><span class="mi">650597</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">1537049</span><span class="p">.</span><span class="mi">8173216293</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
<span class="mi">8</span><span class="o">&gt;</span> <span class="nv">M1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">6</span><span class="p">],</span><span class="s">&quot;</span><span class="se">\b</span><span class="s">&quot;</span><span class="p">].</span>
<span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">6</span><span class="p">],</span><span class="s">&quot;</span><span class="se">\b</span><span class="s">&quot;</span><span class="p">]</span>
<span class="mi">9</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">transpose3</span><span class="p">(</span><span class="nv">M1</span><span class="p">).</span>
<span class="p">[[</span><span class="mi">7</span><span class="p">],[</span><span class="mi">5</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
</code></pre></div>
<p>这里自然想到用<code>lists:reverse()</code>在外面逆序一次，不过因为里面元素也需要逆序，还需要map下：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="c">%transpose3(L) -&gt; transpose3(L, [], [], []).</span>
<span class="nf">transpose3</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">E</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">E</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]))).</span>
</code></pre></div><div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">10</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">1</span><span class="p">.</span><span class="mi">245538</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">802865</span><span class="p">.</span><span class="mi">9101528818</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
<span class="mi">11</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">1</span><span class="p">.</span><span class="mi">211493</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">825427</span><span class="p">.</span><span class="mi">7985923155</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
</code></pre></div>
<p>测试发现性能损失一倍，不过结果算是正确了。</p>

<h3>4: 去掉[H|T]中的lists:map()</h3>

<p>不过想想，lists:map()也是库调用，何不干脆在内部附加逆序操作呢：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">transpose3</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]).</span>

<span class="nf">transpose3</span><span class="p">([],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="c">%io:format(&quot;Head:~p, Tail:~p~n&quot;, [Lhead, Ltail]),</span>
  <span class="k">if</span>
    <span class="nv">Ltail</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">),</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[</span><span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">)|</span><span class="nv">Lret</span><span class="p">]);</span>
    <span class="nv">Ltail</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">)|</span><span class="nv">Lret</span><span class="p">])</span>
  <span class="k">end</span><span class="p">;</span>
<span class="nf">transpose3</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="c">%io:format(&quot;[~p | ~p]: ~p~n&quot;, [H, T, Lret]),</span>
  <span class="k">if</span>
    <span class="nv">H</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">TT</span><span class="p">]</span> <span class="o">=</span> <span class="nv">H</span><span class="p">,</span>
      <span class="k">if</span>
        <span class="nv">TT</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">Lhead</span><span class="p">],</span> <span class="p">[</span><span class="nv">TT</span><span class="p">|</span><span class="nv">Ltail</span><span class="p">],</span> <span class="nv">Lret</span><span class="p">);</span>
        <span class="nv">TT</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">Lhead</span><span class="p">],</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
      <span class="k">end</span><span class="p">;</span>
    <span class="nv">H</span> <span class="o">==</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="n">transpose3</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
  <span class="k">end</span><span class="p">.</span>
</code></pre></div>
<p>在 transpose3([], Lhead, Ltail, Lret) 中，对每次取完的结果逆序一遍，包括Lhead和Ltail；最后返回时也将外层Lret逆序输出，结果和上面map版的相同。测试下性能：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">12</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">1</span><span class="p">.</span><span class="mi">138952</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">878000</span><span class="p">.</span><span class="mi">1264320182</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
<span class="mi">13</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">1</span><span class="p">.</span><span class="mi">104822</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">905123</span><span class="p">.</span><span class="mi">1782133231</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
</code></pre></div>
<p>虽然提升不明显，不过确实优于lists:map()的实现，而且更易懂一些。至于去掉<code>lists:reverse()</code>，暂时还没找到更好的办法，如果<code>[Lhead|TH]</code>可以在List的尾部追加TH该多好。</p>

<h2>结论</h2>

<ol>
<li>尽可能去掉 <code>length(L)&gt;0</code> 这种函数调用，用 <code>L=/=[]</code> 代替；</li>
<li><strong>在可以用 <code>[H|T]</code> 代替 <code>++</code> 时，优先使用前一种写法</strong> (虽然看起来很糟糕，不过性能上提升很大！)；</li>
<li><code>lists:append()</code>替换成<code>++</code>，<code>lists:map()</code>改用自己实现，性能上几乎没有太多提升，可以直接使用；</li>
<li>同样的判断条件下，<code>case</code>比<code>if</code>的性能略差，能用if时还是用if吧。</li>
</ol>

<p>最后补个Python的一行代码实现：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">transpose</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">M</span><span class="p">:</span> <span class="nb">map</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">M</span><span class="p">))</span>

<span class="c"># 测试输出</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">transpose</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]])</span>
<span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</code></pre></div>
<p>看了下erlang:unzip()其实也是类似<code>[H|T]</code>的方法，只不过unzip/1和unzip/3都不符合这里的要求。如果还有更高效的思路，欢迎讨论:)</p>

<h3>2015-01-12更新</h3>

<p>看了list推导的语法，写了个一行的版本：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="nf">transpose4</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="p">[];</span>
<span class="nf">transpose4</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="p">[</span> <span class="p">[</span> <span class="nv">Head</span> <span class="p">||</span> <span class="p">[</span><span class="nv">Head</span><span class="p">|_]</span> <span class="o">&lt;-</span> <span class="nv">L</span> <span class="p">]</span>  <span class="p">|</span> <span class="n">transpose4</span><span class="p">([</span> <span class="nv">Tail</span> <span class="p">||</span> <span class="p">[_|</span><span class="nv">Tail</span><span class="p">]</span> <span class="o">&lt;-</span> <span class="nv">L</span><span class="p">,</span> <span class="nv">Tail</span> <span class="o">=/=</span> <span class="p">[]</span> <span class="p">])].</span>
</code></pre></div>
<p><code>[ Head || [Head|_] &lt;- L ]</code> 取头生成list，然后Tail部分生成list继续递归。只不过Tail这里还要除掉[]，不然 非对阵矩阵会有多余[]的附加在结果中。</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">14</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">1</span><span class="p">.</span><span class="mi">184566</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">844191</span><span class="p">.</span><span class="mi">0370549214</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
<span class="mi">15</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">benchmark</span><span class="p">(</span><span class="mi">1000000</span><span class="p">).</span>
<span class="nv">Test</span> <span class="mi">1000000</span> <span class="n">took</span> <span class="mi">1</span><span class="p">.</span><span class="mi">239197</span> <span class="n">seconds</span>
<span class="nv">Throughput</span><span class="o">=</span><span class="mi">806974</span><span class="p">.</span><span class="mi">1937722573</span> <span class="n">per</span> <span class="n">sec</span>
<span class="n">ok</span>
</code></pre></div>
<p>比 transpose3() 的方法性能略差，不过更易懂一些。</p>
]]></content:encoded>
      <dc:date>2015-01-08T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>终于等到了！-《浪客剑心：传说的完结篇》</title>
      <link>http://blog.imaou.com/erlang/2015/01/08/Rurouni_Kenshin_Densetsu_no_saigohen.html</link>
      <description><![CDATA[苦等Offer的消息没等来，却意外的盼来了 浪客剑心 伝説の最期編 的下载！感谢幻之字幕组送上的大礼，果断丢离线里晚上等看剑心的新必杀技！
]]></description>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/erlang/2015/01/08/Rurouni_Kenshin_Densetsu_no_saigohen.html</guid>
      <content:encoded><![CDATA[<p>苦等Offer的消息没等来，却意外的盼来了 浪客剑心 伝説の最期編 的下载！感谢<a href="http://bt.ktxp.com/html/2015/0108/391871.html">幻之字幕组</a>送上的大礼，果断丢离线里晚上等看剑心的新必杀技！</p>

<p><img src="http://blog.imaou.com/images/201501/rurouni_kenshin.jpg" alt="Rurouni Kenshin"></p>

<hr>

<p>另外插一个今天发现的小东西 <a href="https://github.com/Pr0x13/iDict">GitHub/iDict</a>，号称能够绕过iCloud的重试限制去 BruteForce 探测 AppleID 的密码。漏洞是出在 iosbuddy/createDelegateAccounts 这个接口上，不过按脚本里的方法试了下，返回下面这堆东西：</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;dict&gt;</span>
    <span class="nt">&lt;key&gt;</span>status<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>

    <span class="nt">&lt;key&gt;</span>status-message<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;string&gt;</span>A server problem is blocking Apple ID sign in. Try signing in later.<span class="nt">&lt;/string&gt;</span>

  <span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</code></pre></div>
<p>看来Apple把该服务给停掉了。想想这哥们也够坏的，在新年第一天发布这个poc，估计忙坏Apple的开发了 :P</p>
]]></content:encoded>
      <dc:date>2015-01-08T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>开始学习Erlang，顺带记录下之前几个问题的erl实现</title>
      <link>http://blog.imaou.com/study/2015/01/06/start_learning_erlang.html</link>
      <description><![CDATA[一直觉得Erlang的语法确实比较诡异，这个在看过Elixir后尤甚。折腾了一天环境和rebar后，发现在MacOS搭建Erlang开发环境也不是那么复杂，之后弄明白怎么引入模块就可以开始练手了。
]]></description>
      <pubDate>Tue, 06 Jan 2015 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2015/01/06/start_learning_erlang.html</guid>
      <content:encoded><![CDATA[<p>一直觉得Erlang的语法确实比较诡异，这个在看过Elixir后尤甚。折腾了一天环境和rebar后，发现在MacOS搭建Erlang开发环境也不是那么复杂，之后弄明白怎么引入模块就可以开始练手了。</p>

<h2>Erlang的开发环境搭建</h2>

<p>MacOS上Homebrew里都有，直接安装即可：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>brew update
<span class="nv">$ </span>brew install erlang rebar

<span class="c"># 当然顺带可以安装下Elixir，有个ier可以玩</span>
<span class="nv">$ </span>brew install elixir
</code></pre></div>
<p>接着是IDE。习惯了Sublime Text，于是到<a href="https://github.com/ostinelli/SublimErl">SublimErl</a>，不过作者好像没怎么更新了，而且不知道为什么无法build。后来换用<a href="https://github.com/fjl/Sublime-Erlang">Sublime-Erlang</a>，虽然这个自动补全方面不如SublimErl，不过支持ST3。直接clone到Packages目录下，删掉自带的Erlang即可完成安装。</p>

<p>试了下build，貌似是调用的 <code>rebar compile</code>，暂时不明白rebar的玩法，没有任何输出... 还以为可以像python一样直接看到运行结果，看来还是少不了要开个终端。</p>

<h2>Erlang</h2>

<h3>快速排序实现</h3>

<p>在看<a href="http://svn.liancheng.info/cpie-cn/trunk/.build/html/part-i/chapter-3.html#sort">Erlang并发编成 程序3.1</a>时见到个qsort的实现：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">sort</span><span class="p">).</span>
<span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">sort</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>

<span class="nf">sort</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="p">[];</span>
<span class="nf">sort</span><span class="p">([</span><span class="nv">Pivot</span><span class="p">|</span><span class="nv">Rest</span><span class="p">])</span> <span class="o">-&gt;</span>
  <span class="p">{</span><span class="nv">Smaller</span><span class="p">,</span> <span class="nv">Bigger</span><span class="p">}</span> <span class="o">=</span> <span class="n">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="nv">Rest</span><span class="p">),</span>
  <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="n">sort</span><span class="p">(</span><span class="nv">Smaller</span><span class="p">),</span> <span class="p">[</span><span class="nv">Pivot</span><span class="p">|</span><span class="n">sort</span><span class="p">(</span><span class="nv">Bigger</span><span class="p">)]).</span>

<span class="nf">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>

<span class="nf">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Smaller</span><span class="p">,</span> <span class="nv">Bigger</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="p">{</span><span class="nv">Smaller</span><span class="p">,</span><span class="nv">Bigger</span><span class="p">};</span>
<span class="nf">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Smaller</span><span class="p">,</span> <span class="nv">Bigger</span><span class="p">)</span> <span class="k">when</span> <span class="nv">H</span> <span class="o">&lt;</span> <span class="nv">Pivot</span> <span class="o">-&gt;</span>
  <span class="n">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Smaller</span><span class="p">],</span> <span class="nv">Bigger</span><span class="p">);</span>
<span class="nf">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Smaller</span><span class="p">,</span> <span class="nv">Bigger</span><span class="p">)</span> <span class="k">when</span> <span class="nv">H</span> <span class="o">&gt;=</span> <span class="nv">Pivot</span> <span class="o">-&gt;</span>
  <span class="n">split</span><span class="p">(</span><span class="nv">Pivot</span><span class="p">,</span> <span class="nv">T</span><span class="p">,</span> <span class="nv">Smaller</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Bigger</span><span class="p">]).</span>
</code></pre></div>
<p>想起面试时提到的思路，于是自己实现了一遍。首先在当前目录下创建一个 sort1.erl，文件名需要和module里的名字一致，接着实现qsort：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">sort1</span><span class="p">).</span>
<span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">qsort</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>

<span class="nf">qsort</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="p">[];</span>
<span class="nf">qsort</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="nv">Pivot</span> <span class="o">=</span> <span class="nb">hd</span><span class="p">(</span><span class="nv">L</span><span class="p">),</span>
  <span class="p">{</span><span class="nv">Smaller</span><span class="p">,</span> <span class="nv">Bigger</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nn">lists</span><span class="p">:</span><span class="nf">filter</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">E</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">E</span><span class="o">&lt;</span><span class="nv">Pivot</span> <span class="k">end</span><span class="p">,</span> <span class="nb">tl</span><span class="p">(</span><span class="nv">L</span><span class="p">)),</span>
    <span class="nn">lists</span><span class="p">:</span><span class="nf">filter</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">E</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">E</span><span class="o">&gt;=</span><span class="nv">Pivot</span> <span class="k">end</span><span class="p">,</span> <span class="nb">tl</span><span class="p">(</span><span class="nv">L</span><span class="p">))</span>
  <span class="p">},</span>
  <span class="n">qsort</span><span class="p">(</span><span class="nv">Smaller</span><span class="p">)</span> <span class="o">++</span> <span class="p">[</span><span class="nv">Pivot</span><span class="p">]</span> <span class="o">++</span> <span class="n">qsort</span><span class="p">(</span><span class="nv">Bigger</span><span class="p">).</span>
</code></pre></div>
<p>第一行是在输入为 [] 时匹配，输出 []。第二行则是关键，先仿照Python版的qsort取得L的第一个元素作为 Pivot，接着用filter过滤出 Smaller, Bigger 两个数组，递归的调用 qsort() 继续排序，最后将结果 ++ 到返回中。</p>

<p>lists:filter() 的解释是在<a href="http://blog.csdn.net/zhangjingyangguang/article/details/7377787">这里</a>看到的，当然官方文档里也有。用了filter方便很多，看来熟练使用lists里的函数也是很有必要的。</p>

<p>在erl中引入模块，测试结果如下：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="c">% 引入sort1.erl，当然也可以写成 c(&quot;sort1.erl&quot;).</span>
<span class="mi">2</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">sort1</span><span class="p">).</span>
<span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">sort1</span><span class="p">}</span>
<span class="c">% 调用sort1中导出的qsort/1</span>
<span class="mi">3</span><span class="o">&gt;</span> <span class="nn">sort1</span><span class="p">:</span><span class="nf">qsort</span><span class="p">(</span><span class="nv">L</span><span class="p">).</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</code></pre></div>
<h3>矩阵转置</h3>

<p>之前面试的一道题，用这两天学的erlang语法实现了一遍。不过也许是if语句用的不熟，判断list是否为[]都改成 <code>case length(L)&gt;0 of</code> 了...</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">mt</span><span class="p">).</span>

<span class="c">%% ====================================================================</span>
<span class="c">%% API functions</span>
<span class="c">%% ====================================================================</span>
<span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">transpose</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>

<span class="c">%% 矩阵转置</span>
<span class="nf">transpose</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">transpose</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]).</span>

<span class="c">%% ====================================================================</span>
<span class="c">%% Internal functions</span>
<span class="c">%% ====================================================================</span>

<span class="nf">transpose</span><span class="p">([],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">case</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">)</span> <span class="k">of</span>
    <span class="c">% Ltail == [] 时，说明处理完毕，附加上最后的Lhead并返回Lret中的结果</span>
    <span class="mi">0</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lret</span><span class="p">,</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">]);</span>
    <span class="c">% Ltail还有数据，继续递归。这里将之前Lhead组成一个元素，加入Lret返回中</span>
    <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">transpose</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[],</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lret</span><span class="p">,</span> <span class="p">[</span><span class="nv">Lhead</span><span class="p">]))</span>
  <span class="k">end</span><span class="p">;</span>

<span class="nf">transpose</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Lhead</span><span class="p">,</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">case</span> <span class="nb">length</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">of</span>
    <span class="n">true</span> <span class="o">-&gt;</span>
      <span class="c">% 当H是list时，TT有可能是[]，此时append会导致多余的[]加入Ltail</span>
      <span class="p">[</span><span class="nv">TH</span><span class="p">|</span><span class="nv">TT</span><span class="p">]</span> <span class="o">=</span> <span class="nv">H</span><span class="p">,</span>
      <span class="k">case</span> <span class="nb">length</span><span class="p">(</span><span class="nv">TT</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">of</span>
        <span class="c">% TT非[]，将TT加入Ltail等待后面递归</span>
        <span class="n">true</span> <span class="o">-&gt;</span> <span class="n">transpose</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">]),</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Ltail</span><span class="p">,</span> <span class="p">[</span><span class="nv">TT</span><span class="p">]),</span> <span class="nv">Lret</span><span class="p">);</span>
        <span class="c">% TT==[]，此时直接丢弃TT的内容</span>
        <span class="n">false</span> <span class="o">-&gt;</span> <span class="n">transpose</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">TH</span><span class="p">]),</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
      <span class="k">end</span><span class="p">;</span>
    <span class="c">% H不是list，直接附加到Lhead后面</span>
    <span class="n">false</span> <span class="o">-&gt;</span> <span class="n">transpose</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">append</span><span class="p">(</span><span class="nv">Lhead</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">]),</span> <span class="nv">Ltail</span><span class="p">,</span> <span class="nv">Lret</span><span class="p">)</span>
  <span class="k">end</span><span class="p">.</span>
</code></pre></div>
<p>运行结果：</p>
<div class="highlight"><pre><code class="language-erlang" data-lang="erlang"><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">M</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">4</span><span class="p">]].</span>
<span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">4</span><span class="p">]]</span>
<span class="mi">2</span><span class="o">&gt;</span> <span class="nn">mt</span><span class="p">:</span><span class="nf">transpose</span><span class="p">(</span><span class="nv">M</span><span class="p">).</span>
<span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">7</span><span class="p">],</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">]</span>      <span class="c">% &quot;\t&quot;是9，不知道怎么才能输出数值...</span>
</code></pre></div>
<p>感觉对 TT 为[]的处理不太好，而且肯定不是最简单的写法。总之是实现了，后面等看懂了map等函数，再来想想二面里提到的方法。</p>
]]></content:encoded>
      <dc:date>2015-01-06T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>关于iOS第三方SDK的反跟踪 - MobClick/MTA</title>
      <link>http://blog.imaou.com/theos/2014/12/30/disable_mobclick_and_mta_sdk.html</link>
      <description><![CDATA[用Fiddler4追踪某App请求时，发现有个发给 pingma.qq.com 的内容无法解析，看了下居然是rc4加密的。这种不知道别人上报了你什么内容的请求让人很反感，索性把App上带的SDK上报都看了下。无奈的发现不光腾讯这个MTA，MobClick甚至事无巨细到连App是否是破解的都有上报。于是写了个禁止上报的Cydia插件，源码放在GitHub。
]]></description>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/theos/2014/12/30/disable_mobclick_and_mta_sdk.html</guid>
      <content:encoded><![CDATA[<p>用Fiddler4追踪某App请求时，发现有个发给 pingma.qq.com 的内容无法解析，看了下居然是rc4加密的。这种不知道别人上报了你什么内容的请求让人很反感，索性把App上带的SDK上报都看了下。无奈的发现不光腾讯这个MTA，MobClick甚至事无巨细到连App是否是破解的都有上报。于是写了个禁止上报的Cydia插件，<a href="https://github.com/upbit/iOS_3rdTrackingBlocker">源码放在GitHub</a>。</p>

<h2>MTA</h2>

<p>因为好奇 pingma.qq.com 的上报内容，先分析了这个SDK。要想知道SDK的上报内容，直接启用SDK自己的Log就好了，MTAConfig中有个debugEnable就是控制这个的：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">MTAConfig</span> : <span class="bp">NSObject</span> <span class="p">{}</span>
<span class="k">@property</span><span class="p">(</span><span class="k">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">debugEnable</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<p>让这个 debugEnable 永远返回YES就能输出NSLog：</p>
<div class="highlight"><pre><code class="language-logos" data-lang="logos"><span class="k">%hook</span> <span class="nc">MTAConfig</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">debugEnable</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nb">YES</span><span class="p">;</span> <span class="p">}</span>
<span class="k">%end</span>
</code></pre></div>
<p>另外，用cycript调用 [MTAHelper getEnv] 和 [MTAHelper getUser] 可以很轻松的获取MTAEnv和MTAUser的实例，他们的初始化则在 [MTAHelper init] 中。还原初始化的伪代码如下：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
  <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">env</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MTAEnv</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="n">env</span><span class="p">.</span><span class="n">platform</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">systemName</span><span class="p">];</span>
    <span class="n">sys_version</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">systemVersion</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">sys_version</span> <span class="nl">compare</span><span class="p">:</span><span class="s">@&quot;6.0&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mh">0x40</span><span class="p">]</span> <span class="o">!=</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">env</span><span class="p">.</span><span class="n">ifv</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">identifierForVendor</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">uname</span><span class="p">(</span><span class="n">device_name</span><span class="p">);</span>
    <span class="n">env</span><span class="p">.</span><span class="n">devicename</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithCString</span><span class="p">:</span><span class="n">device_name</span> <span class="nl">encoding</span><span class="p">:</span><span class="mh">0x4</span><span class="p">];</span>
    <span class="n">env</span><span class="p">.</span><span class="n">modulename</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">model</span><span class="p">];</span>
    <span class="n">env</span><span class="p">.</span><span class="n">os_version</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">systemVersion</span><span class="p">];</span>
    <span class="cp"># env.jailbroken checks</span>
    <span class="cp"># [[NSFileManager defaultManager] fileExistsAtPath:@&quot;/bin/bash&quot;]</span>
    <span class="cp"># [[NSFileManager defaultManager] fileExistsAtPath:@&quot;/Applications/Cydia.app&quot;]</span>
    <span class="cp"># [[NSFileManager defaultManager] fileExistsAtPath:@&quot;/private/var/lib/apt&quot;]</span>
    <span class="n">env</span><span class="p">.</span><span class="n">timezone</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSTimeZone</span> <span class="n">systemTimeZone</span><span class="p">]</span> <span class="n">name</span><span class="p">];</span>
    <span class="cp"># env.resolution = [[UIScreen mainScreen] bounds] or [[UIScreen mainScreen] scale]</span>
    <span class="n">env</span><span class="p">.</span><span class="n">deviceid</span> <span class="o">=</span> <span class="p">[</span><span class="n">MTAOpenUDID</span> <span class="n">value</span><span class="p">];</span>
    <span class="n">env</span><span class="p">.</span><span class="n">language</span> <span class="o">=</span> <span class="p">[[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@&quot;AppleLanguages&quot;</span><span class="p">]</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
    <span class="n">tni</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CTTelephonyNetworkInfo</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="n">mcc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">tni</span> <span class="n">subscriberCellularProvider</span><span class="p">]</span> <span class="n">mobileCountryCode</span><span class="p">];</span>
    <span class="n">mnc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">tni</span> <span class="n">subscriberCellularProvider</span><span class="p">]</span> <span class="n">mobileNetworkCode</span><span class="p">];</span>
    <span class="n">env</span><span class="p">.</span><span class="n">mccmnc</span> <span class="o">=</span> <span class="p">[</span><span class="n">mcc</span> <span class="nl">stringByAppendingString</span><span class="p">:</span><span class="n">mnc</span><span class="p">];</span>
    <span class="n">env</span><span class="p">.</span><span class="n">app_version</span> <span class="o">=</span> <span class="p">[[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">]</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@&quot;CFBundleShortVersionString&quot;</span><span class="p">];</span>
    <span class="n">env</span><span class="p">.</span><span class="n">sdk_version</span> <span class="o">=</span> <span class="s">@&quot;1.4.1&quot;</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>然后在MTAHelper中还会收集当前Wifi的名字和MAC地址，估计是用于判断用户上网的场景。</p>

<h2>MobClick</h2>

<p>友盟的这个SDK算是最常见的，国内绝大多数App都有这个。上报的也比MTA&quot;完善&quot;多了，甚至还提供 [MobClick isPirated] 来判断app的签名是否正常...</p>

<p>里面封装的可真深，不过也很容易查到MobClickApp的logEnabled就是控制NSLog输出的。同样hook掉：</p>
<div class="highlight"><pre><code class="language-logos" data-lang="logos"><span class="k">%hook</span> <span class="nc">MobClickApp</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">logEnabled</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span> <span class="p">}</span>
<span class="k">%end</span>
</code></pre></div>
<p>相对禁用API，这个就没有MTA那样方便了。最后只好干掉传入的appkey，让SDK初始化失败来禁用：</p>
<div class="highlight"><pre><code class="language-logos" data-lang="logos"><span class="k">%hook</span> <span class="nc">MobClickSession</span>
<span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startWithAppkey:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">appkey</span> <span class="nf">reportPolicy:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">policy</span> <span class="nf">channelId:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">anId</span> <span class="p">{</span> <span class="k">%orig</span><span class="p">((</span><span class="kt">id</span><span class="p">)</span><span class="s">@&quot;&quot;</span><span class="p">,</span> <span class="n">policy</span><span class="p">,</span> <span class="n">anId</span><span class="p">);</span> <span class="p">}</span>
<span class="k">%end</span>
</code></pre></div>
<p><code>[MobClickSession startWithAppkey:reportPolicy:channelId:]</code> 是最内层的调用，所以替换掉这里的 appkey 就可以达到目的了。</p>

<p>代码已经上传到GitHub: <a href="https://github.com/upbit/iOS_3rdTrackingBlocker/blob/master/TrackingBlocker.xm">TrackingBlocker.xm</a>，或者直接下载deb包进行安装：<a href="http://blog.imaou.com/uploads/com.zzz.3rdtrackingblocker_1.0_iphoneos-arm.deb"><code>com.zzz.3rdtrackingblocker_1.0_iphoneos-arm.deb</code></a></p>
]]></content:encoded>
      <dc:date>2014-12-30T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>keychain_cat - 查看/修改keychain2数据的工具</title>
      <link>http://blog.imaou.com/theos/2014/12/26/keychain_cat_tool.html</link>
      <description><![CDATA[最近需要修改iOS keychain中kSecClassGenericPassword的数据，不过没有找到方便的工具，于是抽时间自己写了一个。工具可以批量查询/删除，或者更新kSecClassGenericPassword中的单条v_Data记录，方便进行调试。keychain_cat的源码 放在GitHub上。
]]></description>
      <pubDate>Fri, 26 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/theos/2014/12/26/keychain_cat_tool.html</guid>
      <content:encoded><![CDATA[<p>最近需要修改iOS keychain中kSecClassGenericPassword的数据，不过没有找到方便的工具，于是抽时间自己写了一个。工具可以批量查询/删除，或者更新kSecClassGenericPassword中的单条<code>v_Data</code>记录，方便进行调试。<a href="https://github.com/upbit/My-iDevice-Tools/blob/master/keychain_cat.mm">keychain_cat的源码</a> 放在GitHub上。</p>

<hr>

<h2>使用方法</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ ./keychain_cat -h
Usage: ./keychain_cat [options]
-d --dump                       Dump Keychain AccessGroups
-U --update                     UPDATE v_Data with specified value &lt;-g&gt; &lt;-s&gt; &lt;-a&gt; &lt;-v&gt;
-D --delete                     DELETE keychain with &lt;-g&gt; (-s) (-a)
-g --group &lt;AccessGroup&gt;        kSecAttrAccessGroup
-s --service &lt;Service&gt;          kSecAttrService
-a --account &lt;Account&gt;          kSecAttrAccount
-v --value &lt;v_Data&gt;             (UPDATE only) kSecValueData

&lt;SecClass selector&gt;
  -G --generic-password         kSecClassGenericPassword
  -N --internet-password        kSecClassInternetPassword
  -I --identity                 kSecClassIdentity
  -C --certificate              kSecClassCertificate
  -K --classKey                 kSecClassKey

-h --help                       Show this help
</code></pre></div>
<h3>[1] 查看 AccessGroup</h3>

<p>因为修改需要知道 keychain-access-groups。这里参考 <a href="https://github.com/upbit/Keychain-Dumper/blob/master/main.m#L56">Keychain-Dumper</a> 里的 dumpKeychainEntitlements()，实现列举机器上所有 AccessGroup功能：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ ./keychain_cat -d
&gt;&gt; keychain-access-groups:
  6WX5RKLG95.com.supercell.reef
  88L2Q4487U.com.tencent.mttlite
  apple
  com.apple.ProtectedCloudStorage
  com.apple.PublicCloudStorage
  com.apple.apsd
  com.apple.assistant
  com.apple.cloudd
  com.apple.ind
  com.apple.security.sos
</code></pre></div>
<h3>[2] 查看某个 AccessGroup 下的所有数据</h3>

<p>知道 AccessGroup 的名称，就可以使用 --group 来指定查询目标：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">./keychain_cat -g 6WX5RKLG95.com.supercell.reef
&lt;AccessGroup:6WX5RKLG95.com.supercell.reef, Service:com.supercell, Account:appRated&gt;
{
  accc = &quot;&lt;SecAccessControlRef: 0x15563b70&gt;&quot;;
  acct = appRated;
  agrp = &quot;6WX5RKLG95.com.supercell.reef&quot;;
  cdat = &quot;2014-11-08 23:33:28 +0000&quot;;
  class = genp;
  invi = 1;
  labl = Supercell;
  mdat = &quot;2014-11-08 23:33:28 +0000&quot;;
  pdmn = ak;
  svce = &quot;com.supercell&quot;;
  sync = 0;
  tomb = 0;
  &quot;v_Data&quot; = TRUE;
}
...
&lt;AccessGroup:6WX5RKLG95.com.supercell.reef, Service:com.supercell, Account:THLevel&gt;
{
  accc = &quot;&lt;SecAccessControlRef: 0x15563b80&gt;&quot;;
  acct = THLevel;
  agrp = &quot;6WX5RKLG95.com.supercell.reef&quot;;
  cdat = &quot;2014-12-07 12:03:07 +0000&quot;;
  class = genp;
  invi = 1;
  labl = Supercell;
  mdat = &quot;2014-12-07 12:03:07 +0000&quot;;
  pdmn = ak;
  svce = &quot;com.supercell&quot;;
  sync = 0;
  tomb = 0;
  &quot;v_Data&quot; = 13;
}
</code></pre></div>
<h3>[3] 查看某个 AccessGroup,Service,Account 的数据</h3>

<p>当然还可以用 --service 和 --account 来进一步筛选结果。特别的，如果可能v_Data会自动解析成NSString:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ ./keychain_cat -g 6WX5RKLG95.com.supercell.reef -s com.supercell -a THLevel
&lt;AccessGroup:6WX5RKLG95.com.supercell.reef, Service:com.supercell, Account:THLevel&gt;
{
  accc = &quot;&lt;SecAccessControlRef: 0x16665dc0&gt;&quot;;
  acct = THLevel;
  agrp = &quot;6WX5RKLG95.com.supercell.reef&quot;;
  cdat = &quot;2014-12-07 12:03:07 +0000&quot;;
  class = genp;
  invi = 1;
  labl = Supercell;
  mdat = &quot;2014-12-07 12:03:07 +0000&quot;;
  pdmn = ak;
  svce = &quot;com.supercell&quot;;
  sync = 0;
  tomb = 0;
  &quot;v_Data&quot; = 13;
}
</code></pre></div>
<h3>[4] 修改某个 com.supercell,THLevel 的数据</h3>

<p>当指定 --group,--service,--account 后，会定位到单独的一条记录，此时可以使用 --update 来更新数据。使用 --value 指定要修改的v_Data内容（字符串）。</p>

<p>比如修改 com.supercell,THLevel 的v_Data为 99：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">./keychain_cat -g 6WX5RKLG95.com.supercell.reef -s com.supercell -a THLevel -v 99 -U
Origin: {
  accc = &quot;&lt;SecAccessControlRef: 0x146798d0&gt;&quot;;
  acct = THLevel;
  agrp = &quot;6WX5RKLG95.com.supercell.reef&quot;;
  cdat = &quot;2014-12-07 12:03:07 +0000&quot;;
  invi = 1;
  labl = Supercell;
  mdat = &quot;2014-12-07 12:03:07 +0000&quot;;
  pdmn = ak;
  svce = &quot;com.supercell&quot;;
  sync = 0;
  tomb = 0;
  &quot;v_Data&quot; = &lt;3133&gt;;
}
&gt;&gt; Update v_Data to: &lt;3939&gt;
</code></pre></div>
<p>可以看到，写入的NSData实际是 <3939>，此时去掉 --update,--value 查看，会看到THLevel已经被改成字符串99了。</p>

<h2>局限性</h2>

<p>目前只支持修改 kSecClassGenericPassword 的v_Data，并且只支持字符串输入。</p>

<p>如果有其它需求，可以在GitHub上给我提issue：<a href="https://github.com/upbit/My-iDevice-Tools/issues">https://github.com/upbit/My-iDevice-Tools/issues</a></p>
]]></content:encoded>
      <dc:date>2014-12-26T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>用dynamic_pager为 iOS7.1.2~iOS8.1 手动增加虚拟内存</title>
      <link>http://blog.imaou.com/misc/2014/12/22/dynamic_pager_for_ios712.html</link>
      <description><![CDATA[最近的游戏越来越消耗内存了，在我那服役多年的iPad2上，别说3d游戏常常连2d游戏都会闪退。LaunchDaemons已经精简再精简，可惜iOS7.1.2光系统后台就吃了一半(近128MB)的内存。于是想到给老机器增加虚拟内存。不过搜了个vm装上后，iPad陷入无限重启循环。。。
不过好在afc2有那么几秒能连上，在写了个死循环等待设备启动后删除LaunchDaemons下dynamic_pager的启动项后，又再次回到了系统。
]]></description>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2014/12/22/dynamic_pager_for_ios712.html</guid>
      <content:encoded><![CDATA[<p>最近的游戏越来越消耗内存了，在我那服役多年的iPad2上，别说3d游戏常常连2d游戏都会闪退。LaunchDaemons已经精简再精简，可惜iOS7.1.2光系统后台就吃了一半(近128MB)的内存。于是想到给老机器增加虚拟内存。不过搜了个vm装上后，iPad陷入无限重启循环。。。
不过好在afc2有那么几秒能连上，在写了个死循环等待设备启动后删除LaunchDaemons下dynamic_pager的启动项后，又再次回到了系统。</p>

<p><a href="http://www.opensource.apple.com/source/system_cmds/system_cmds-597.90.1/dynamic_pager.tproj/dynamic_pager.c">dynamic_pager</a>是Apple自己的虚拟内存管理工具，Cydia里绝大多数虚拟内存都是依赖这个工具来建立虚拟内存的。手动运行发现，iOS7.1之后一旦以root权限运行就会导致kernel panic然后重启，这个就是之前装vm导致无限重启的原因了。</p>

<p>寻觅很久，终于发现dynamic_pager的正确用法：</p>

<p><a href="http://infinitedarkblue.blog.jp/archives/41271874.html">iOS7.1.2の脱獄環境で仮想メモリーを作る。〜手動編〜まとめ</a></p>

<p>在iOS7.1.2和iOS8.1上测试，<span style="color:#F00"><strong>必须使用mobile用户启动dynamic_pager才能正确创建swapfile文件</strong></span>。</p>

<p><strong>方法如下：</strong></p>

<ol>
<li>用mobile用户登如iOS设备: <code>ssh mobile@&lt;IP&gt;</code>；</li>
<li>su到root，将/private/var/vm目录chown为mobile: <code>cd /var; chown mobile vm/</code></li>
<li>退回到mobile，以后台方式运行dynamic<em>pager: `dynamic</em>pager -S 536870912 -H 1024 -L 536872000 -P 1`；</li>
</ol>

<p>dynamic_pager参数说明：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">dynamic_pager [-F filename] [-L low water alert trigger] [-H high water alert trigger] [-S file size] [-P priority]

-F filename: 指定swapfile的路径，默认为 /private/var/vm/swapfile
-L low water alert trigger: 设置swapfile总剩余空间多于多少字节时删除空闲的交换文件
-H high water alert trigger: 设置当swapfile的总剩余空间低于多少字节时候创建新的交换文件
-S file size: 指定swapfile的文件大小
-P priority: 优先级
</code></pre></div>
<p>所以 <code>dynamic_pager -S 536870912 -H 1024 -L 536872000 -P 1</code> 就是几乎无条件的(-H 1KB)创建一个512MB的swapfile。当然如果512MB都用完了，可能需要再创建个swapfile1来保证dynamic_pager的正常运行。</p>
]]></content:encoded>
      <dc:date>2014-12-22T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>从 foldl/foldr 实现到递归的矩阵行列转换</title>
      <link>http://blog.imaou.com/misc/2014/12/17/from_fold_to_matrix_row_to_column.html</link>
      <description><![CDATA[晚上面试遇到个很nice的面试官，聊的很尽兴。其中要求用类似 erlang 的语法，实现无循环的fold操作。当时可是想了好久才写出来的，看看还是Wiki的解释清晰明了。
]]></description>
      <pubDate>Wed, 17 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2014/12/17/from_fold_to_matrix_row_to_column.html</guid>
      <content:encoded><![CDATA[<p>晚上面试遇到个很nice的面试官，聊的很尽兴。其中要求用类似 erlang 的语法，实现无循环的fold操作。当时可是想了好久才写出来的，看看还是Wiki的解释清晰明了。</p>

<h3><a href="http://zvon.org/other/haskell/Outputprelude/foldl_f.html">left fold</a></h3>

<p><img src="http://blog.imaou.com/images/201412/left_fold_transformation.png" alt="left fold"></p>

<h3><a href="http://zvon.org/other/haskell/Outputprelude/foldr_f.html">right fold</a></h3>

<p><img src="http://blog.imaou.com/images/201412/right_fold_transformation.png" alt="right fold"></p>

<p>fold对应Python的写法为：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">foldl</span><span class="p">:</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="nb">list</span><span class="p">,</span> <span class="n">initval</span><span class="p">)</span>
<span class="n">foldr</span><span class="p">:</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span> <span class="n">func</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">),</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">list</span><span class="p">),</span> <span class="n">initval</span><span class="p">)</span>
</code></pre></div>
<p>另外临走还留了个问题：矩阵的行列转换</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="err">输入：</span>
<span class="p">[</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="p">]</span>
<span class="err">输出：</span>
<span class="p">[</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">7</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">9</span><span class="p">]</span>
<span class="p">]</span>
</code></pre></div>
<p>要求同样是不能用循环，不能有随机内存访问。回来想了好久，算是有个基本思路了，将整个过程分为两个步骤：</p>

<ol>
<li>内函数将输入的数据拆分为 head,tail，例如 (1,[5,7,9])；</li>
<li>外函数将拆好的head,tail依次加入返回数组中，迭代直到tail的返回数组为空；</li>
</ol>

<p>上面矩阵的转置过程如下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># 第一次迭代，得到两个部分的输出</span>
<span class="p">([</span><span class="mi">1</span><span class="p">],</span> <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]])</span>
<span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">]])</span>
<span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">8</span><span class="p">]])</span>
<span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">8</span><span class="p">]])</span>
<span class="c"># 输出中的 [[5, 7, 9], [6], [8]] 作为第二次的输入递归</span>
<span class="p">([</span><span class="mi">5</span><span class="p">],</span> <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]])</span>
<span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]])</span>
<span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]])</span>
<span class="c"># 后面2轮</span>
<span class="p">([</span><span class="mi">7</span><span class="p">],</span> <span class="p">[[</span><span class="mi">9</span><span class="p">]])</span>
<span class="p">([</span><span class="mi">9</span><span class="p">])</span>
</code></pre></div>
<p>大致流程就是这样，等有空了写出来验证下。</p>

<p>补充Python版本的代码：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">head</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">tail</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">_split</span><span class="p">(</span><span class="n">init</span><span class="p">,</span> <span class="n">ele</span><span class="p">):</span>
  <span class="k">global</span> <span class="n">head</span>
  <span class="k">global</span> <span class="n">tail</span>

  <span class="c"># 将ele内容分割到 head,tail 内</span>
  <span class="n">head</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ele</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ele</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">tail</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ele</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>

<span class="k">def</span> <span class="nf">wrap_trans</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">return</span>

  <span class="k">global</span> <span class="n">head</span>
  <span class="k">global</span> <span class="n">tail</span>

  <span class="c"># 分割data的每个元素</span>
  <span class="n">head</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="n">tail</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="nb">reduce</span><span class="p">(</span><span class="n">_split</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

  <span class="c"># head结果加入返回数组，tail继续递归处理</span>
  <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
  <span class="n">wrap_trans</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">4</span><span class="p">]</span>
  <span class="p">]</span>

  <span class="n">wrap_trans</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">print</span> <span class="n">result</span>        <span class="c"># [[1, 2, 3, 4], [5, 6, 8], [7], [9]]</span>
</code></pre></div>
<p>写得有点绕，而且两层递归嵌套好别扭的感觉... [2015-01-07] <a href="http://blog.imaou.com/study/2015/01/06/start_learning_erlang.html">更新erlang版本的转置程序</a></p>
]]></content:encoded>
      <dc:date>2014-12-17T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>利用 com.apple.pcapd 服务在iOS设备上抓包</title>
      <link>http://blog.imaou.com/opensource/2014/12/14/pcapd_diagnostic_packet_capture.html</link>
      <description><![CDATA[辛辛苦苦为libimobiledevice写了一天 com.apple.pcapd 服务接口 libimobiledevice:pcapd，最后却发现原来Apple已经有相关的工具了，合法的从未越狱设备上抓包...
]]></description>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/12/14/pcapd_diagnostic_packet_capture.html</guid>
      <content:encoded><![CDATA[<p>辛辛苦苦为libimobiledevice写了一天 com.apple.pcapd 服务接口 <a href="https://github.com/upbit/libimobiledevice/tree/pcapd">libimobiledevice:pcapd</a>，最后却发现原来Apple已经有相关的工具了，合法的从未越狱设备上抓包...</p>

<h2>iOS Packet Tracing</h2>

<p>Technical Q&amp;A QA1176 - <a href="https://developer.apple.com/library/ios/qa/qa1176/_index.html#//apple_ref/doc/uid/DTS10001707-CH1-SECRVI">Getting a Packet Trace</a>：</p>

<p>iOS 5 added a remote virtual interface (RVI) facility that lets you use OS X packet trace programs to capture traces from an iOS device. The basic strategy is:</p>

<ol>
<li>Connect your iOS device to your Mac via USB.</li>
<li>Set up an RVI for that device. This creates a virtual network interface on your Mac that represents the iOS device&#39;s networking stack.</li>
<li>Run your OS X packet trace program, and point it at the RVI created in the previous step.</li>
</ol>

<p>利用rvictl能够很方便的在MacOS上建立虚拟端口，然后用tcpdump抓取上面的内容。方法如下：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># 查看设备的UDID</span>
<span class="nv">$ </span>idevice_id -l
622b53c647548234ddcef0ee3abee616005051ed

<span class="c"># 开启映射</span>
<span class="nv">$ </span>rvictl -s 622b53c647548234ddcef0ee3abee616005051ed
Starting device 622b53c647548234ddcef0ee3abee616005051ed <span class="o">[</span>SUCCEEDED<span class="o">]</span> with interface rvi0

<span class="c"># 查看rvi是否建立成功</span>
<span class="nv">$ </span>ifconfig -l
lo0 en0 en1 en2 ... rvi0

<span class="c"># 使用tcpdump抓包</span>
<span class="nv">$ </span>tcpdump -i rvi0 -ntXs0

<span class="c"># 删除映射</span>
<span class="nv">$ </span>rvictl -x 622b53c647548234ddcef0ee3abee616005051ed
Stopping device 622b53c647548234ddcef0ee3abee616005051ed <span class="o">[</span>SUCCEEDED<span class="o">]</span>
</code></pre></div>]]></content:encoded>
      <dc:date>2014-12-14T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>再看《楽園追放-Expelled from Paradise》</title>
      <link>http://blog.imaou.com/misc/2014/12/13/rakuen_tsuihou_expelled_from_paradise.html</link>
      <description><![CDATA[发现自己越来越向虚渊玄的脑残粉发展了，几乎每部都是追着看完的。从上季面瘫男打倒最终boss却被路过打酱油的情敌给击毙，到本季“WC?”遍地的黑幕揭开，这种不在意料之内的剧情展开实在是让人欲罢不能，简直就是专门找打脸嘛→_→
]]></description>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2014/12/13/rakuen_tsuihou_expelled_from_paradise.html</guid>
      <content:encoded><![CDATA[<p>发现自己越来越向虚渊玄的脑残粉发展了，几乎每部都是追着看完的。从上季面瘫男打倒最终boss却被路过打酱油的情敌给击毙，到本季“WC?”遍地的黑幕揭开，这种不在意料之内的剧情展开实在是让人欲罢不能，简直就是专门找打脸嘛→_→</p>

<p>乐园追放则完全属于意料之外的佳作，除了最萌的钉宫音外，整体3DCG和效果都让人眼前一亮。当然结局依然没有全部猜中，说好的一起去探索宇宙呢？</p>

<p><img src="http://blog.imaou.com/images/201412/illust_id_47434961.jpg" alt="illust_id_47434961"></p>

<p>放张swd3e2大大的新作<a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=47434961">illust<em>id</em>47434961.jpg</a>，看着这远去的火箭，不禁思绪万千:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">It&#39;s so far away
描きたいよ
終わりのない物語の続きを
</code></pre></div>]]></content:encoded>
      <dc:date>2014-12-13T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>盘古8越狱中所用 /usr/libexec/neagent 漏洞原理分析</title>
      <link>http://blog.imaou.com/theos/2014/12/12/Pangu8_neagent_skip_library_validation_exploit.html</link>
      <description><![CDATA[这段时间对Pangu8越狱时所用的漏洞比较感兴趣，不过搜到的基本只有所使用漏洞的列表：
]]></description>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/theos/2014/12/12/Pangu8_neagent_skip_library_validation_exploit.html</guid>
      <content:encoded><![CDATA[<p>这段时间对Pangu8越狱时所用的漏洞比较感兴趣，不过搜到的基本只有<a href="https://theiphonewiki.com/wiki/Jailbreak_Exploits#Exploits_which_are_used_in_order_to_jailbreak_8.x">所使用漏洞的列表</a>：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">8.0/8.0.1/8.0.2/8.1
Pangu8
- an exploit for a bug in /usr/libexec/neagent (source @iH8sn0w)
- enterprise certificate (inside the IPA)
- a kind of dylib injection into a system process (see IPA)
- a dmg mount command (looks like the Developer DMG) (syslog while jailbreaking)
- a sandboxing problem in debugserver (CVE-2014-4457)
- the same/a similar kernel exploit as used in Pangu (CVE-2014-4461) (source @iH8sn0w)
- enable-dylibs-to-override-cache
- CVE-2014-4455
</code></pre></div>
<p>经过几天的折腾，算是弄明白其中neagent漏洞的利用方法，并用Python验证了注入过程。不过个人水平有限，越看Pangu8的细节疑问越多，希望能够借此抛砖引玉讨论下其他漏洞细节。如果其中有什么疏漏之处，希望各位大侠轻拍板砖。</p>

<p>另外感谢<a href="http://bbs.pediy.com/showpost.php?p=1335173&amp;postcount=14">jerryxjtu兄的指点</a>，研究了几天libimobiledevice确实大有收获。为了方便调试com.apple.debugserver服务，也试着写了下Python版的<a href="https://github.com/libimobiledevice/libimobiledevice/blob/master/cython/debugserver.pxi">debugserver.pxi</a>并pull到了libimobiledevice:master。有兴趣使用Python版DebugServerClient的同学，可以参考<a href="https://github.com/upbit/python-imobiledevice_demo/blob/master/debugserver_app_runner.py">这个例子</a>:从远程启动目标App。</p>

<hr>

<p>能查到的关于neagent这个漏洞，最早是@iH8sn0w在Twitter上提到的：<a href="https://twitter.com/ih8sn0w/status/524968711636418560">https://twitter.com/ih8sn0w/status/524968711636418560</a></p>

<p><img src="http://blog.imaou.com/images/201412/neagent_exploits_in_pangu8.png" alt="neganet Exploits"></p>

<p>不过搜不到其他有用的信息。本着自己动手丰衣足食的想法，打算跟踪下Pangu8来看看neagent到底是怎么回事。不过看到Pangu8_v1.2.1.exe是VMP壳瞬间一头包，还好后面发现有个MacOS版的没有加壳，方便提取Payload。</p>

<p>参考<a href="https://theiphonewiki.com/wiki/Evasi0n7#Research">分析Evasi0n7</a>的方法用jtool对Pangu8主程序进行解包，原始Payload在 <code>__TEXT.__objc_cons1 ~ __TEXT.__objc_cons7</code> 中；用md5和机器中文件对比了下，定位了大致每个Payload的内容。(ps:有人知道<code>__TEXT.__objc_cons1</code>里是什么内容吗？用binwalk只知道里面有三个bzip的头部)</p>

<p>接着就是拿出IDA看Pangu8的主程序了，按照里面的字符串可以将越狱分为开始，6个准备阶段，2个注入阶段以及清理阶段：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">__cstring:0000000100046A21 aStartJailbreak db <span class="s1">&#39;Start jailbreak ..&#39;</span>,0
__cstring:0000000100046AF3 aPreparingTheEn db <span class="s1">&#39;Preparing the environment (1/6)&#39;</span>,0
__cstring:000000010004708C aPreparingThe_2 db <span class="s1">&#39;Preparing the environment (2/6)&#39;</span>,0
__cstring:00000001000470AC aPreparingThe_3 db <span class="s1">&#39;Preparing the environment (3/6)&#39;</span>,0
__cstring:000000010004724D aPreparingThe_4 db <span class="s1">&#39;Preparing the environment (4/6)&#39;</span>,0
__cstring:0000000100046B68 aPreparingThe_0 db <span class="s1">&#39;Preparing the environment (5/6)&#39;</span>,0
__cstring:0000000100046B88 aPreparingThe_1 db <span class="s1">&#39;Preparing the environment (6/6)&#39;</span>,0
__cstring:0000000100046BA8 aInjecting12    db <span class="s1">&#39;Injecting (1/2)&#39;</span>,0
__cstring:0000000100046BEA aInjecting22    db <span class="s1">&#39;Injecting (2/2)&#39;</span>,0
__cstring:0000000100046BFA aFinalCleaning_ db <span class="s1">&#39;Final cleaning...&#39;</span>,0
</code></pre></div>
<h3>&#39;Start jailbreak ..&#39;</h3>

<p>开始越狱阶段，先通过afc服务在建立 /Pangu-Install/ 目录：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># afc_make_directory(client, “/Pangu-Install/”)</span>
__text:000000010002C5AC                 mov     rsi, cs:off_102502328 <span class="p">;</span> <span class="s2">&quot;/Pangu-Install/&quot;</span>
__text:000000010002C5B3                 call    _afc_make_directory
</code></pre></div>
<p>接着写入Payload里4个tar文件：(不勾选pphelper.tar的话)</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>ls /private/var/mobile/Media/Pangu-Install/
Cydia.tar  packagelist.tar  pangu.tar  pangu_ex.tar
</code></pre></div>
<h3>&#39;Preparing the environment (1/6)&#39;</h3>

<p>准备阶段1，通过afc服务上传IPA，并通过installation_proxy的标准方式安装目标APP。这里IPA的企业版证书就不多说了，<a href="http://www.reddit.com/r/jailbreak/comments/29cokz/as_of_now_incomplete_writeup_of_pangu/">(As of now incomplete) Writeup of Pangu</a> 里面详细介绍过为什么要调时间。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># 如果不存在，则创建PublicStaging/目录</span>
__text:000000010002A982                 lea     rsi, aPublicstaging <span class="p">;</span> <span class="s2">&quot;PublicStaging&quot;</span>
__text:000000010002A989                 call    _afc_make_directory

<span class="c"># 写入PublicStaging/&lt;timestamp&gt;.ipa</span>
__text:000000010002A9D6                 mov     rdi, <span class="o">[</span>rbp+var_40<span class="o">]</span>
__text:000000010002A9DA                 mov     rsi, <span class="o">[</span>rbp+var_30<span class="o">]</span> <span class="p">;</span> <span class="s2">&quot;PublicStaging/&lt;timestamp&gt;.ipa&quot;</span>
__text:000000010002A9DE                 lea     rcx, <span class="o">[</span>rbp+var_38<span class="o">]</span>
__text:000000010002A9E2                 mov     edx, 3
__text:000000010002A9E7                 call    _afc_file_open

<span class="c"># 调用com.apple.mobile.installation_proxy服务进行安装</span>
__text:000000010002AA7B                 lea     rsi, aCom_apple_mo_3 <span class="p">;</span> <span class="s2">&quot;com.apple.mobile.installation_proxy&quot;</span>
__text:000000010002AA82                 lea     rdx, _instproxy_client_new
</code></pre></div>
<p>用Python重现该安装过程可以看这个脚本：<a href="https://github.com/upbit/python-imobiledevice_demo/blob/master/afc_and_instproxy_upgrade_ipa.py"><code>afc_and_instproxy_upgrade_ipa.py</code></a></p>

<p>这里安装的 pangunew.ipa 里带有关键的 <strong>xuanyuansword.dylib</strong>，将在准备阶段2里用到。</p>

<h3>’Preparing the environment (2/6)&#39;</h3>

<p>准备阶段2，通过debugserver注入刚才IPA里带的xuanyuansword.dylib到/usr/libexec/neagent。当然之前还有mount开发者镜像的工作，常规的<code>mobile_image_mounter_upload_image/mobile_image_mounter_mount_image</code>不是此次越狱的重点，就pass了。</p>

<p>其中的关键步骤如下：</p>

<ol>
<li>使用 <code>instproxy_client_get_path_for_bundle_identifier</code> 获取app的路径(之前安装的IPA)；</li>
<li>找到其中的 xuanyuansword.dylib 并拼接成参数字符串：<code>DYLD_INSERT_LIBRARIES=%s/xuanyuansword.dylib</code></li>
<li>使用 <code>debugserver_client_set_argv</code> 启动 /usr/libexec/neagent，当然环境变量加上上面的<code>DYLD_INSERT_LIBRARIES</code>；</li>
</ol>

<p>这里就有个疑问了，为什么是用debugserver启动/usr/libexec/neagent注入dylib，它有什么特殊吗？ldid -e查看entitlements.xml：</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"># ldid -e /usr/libexec/neagent
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>com.apple.private.MobileGestalt.AllowedProtectedKeys<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;</span>
    <span class="nt">&lt;string&gt;</span>UniqueDeviceID<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;/array&gt;</span>
  <span class="nt">&lt;key&gt;</span>com.apple.private.neagent<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;true/&gt;</span>
  <span class="nt">&lt;key&gt;</span>com.apple.private.necp.match<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;true/&gt;</span>
  <span class="nt">&lt;key&gt;</span>com.apple.private.skip-library-validation<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;true/&gt;</span>
  <span class="nt">&lt;key&gt;</span>keychain-access-groups<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;</span>
    <span class="nt">&lt;string&gt;</span>com.apple.identities<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;string&gt;</span>apple<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;string&gt;</span>com.apple.certificates<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;/array&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</code></pre></div>
<p>com.apple.private.skip-library-validation 估计这是加载dylib的关键了。不过这个skip-library-validation资料不多，只能从名字上推测是不检查<code>DYLD_INSERT_LIBRARIES</code>注入的dylib，难道是apple的开发为了方便调试加的？</p>

<h2>/usr/libexec/neagent注入dylib漏洞重现</h2>

<p>看完反汇编的代码后还是对neagent加载dylib原理不明所以，于是自己用Python写了一遍用来验证漏洞的利用过程。</p>

<p>首先引入imobiledevice并封装 <code>LockdownClient.get_service_client(service_class)</code>:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">imobiledevice</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">lockdown_get_service_client</span><span class="p">(</span><span class="n">service_class</span><span class="p">):</span>
  <span class="n">ld</span> <span class="o">=</span> <span class="n">LockdownClient</span><span class="p">(</span><span class="n">iDevice</span><span class="p">())</span>
  <span class="k">return</span> <span class="n">ld</span><span class="o">.</span><span class="n">get_service_client</span><span class="p">(</span><span class="n">service_class</span><span class="p">)</span>
</code></pre></div>
<p>接着通过 InstallationProxyClient 获取com.pangu.ipa1的Container目录，作为neagent的WorkingDir。这里参考Pangu8里筛选ReturnAttributes，不过因为pangunew.app是用户程序，所以只用browse(ApplicationType=User)的应用就可以了：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">get_pangunew_Container</span><span class="p">(</span><span class="n">bundle_id</span><span class="o">=</span><span class="s">&quot;com.pangu.ipa1&quot;</span><span class="p">):</span>
  <span class="n">instproxy</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">InstallationProxyClient</span><span class="p">)</span>
  <span class="n">client_options</span> <span class="o">=</span> <span class="n">plist</span><span class="o">.</span><span class="n">Dict</span><span class="p">({</span>
    <span class="s">&quot;ApplicationType&quot;</span><span class="p">:</span> <span class="s">&quot;User&quot;</span><span class="p">,</span>
    <span class="s">&quot;ReturnAttributes&quot;</span><span class="p">:</span> <span class="n">plist</span><span class="o">.</span><span class="n">Array</span><span class="p">([</span>
      <span class="s">&quot;CFBundleIdentifier&quot;</span><span class="p">,</span>
      <span class="s">&quot;CFBundleExecutable&quot;</span><span class="p">,</span>
      <span class="s">&quot;Container&quot;</span><span class="p">,</span>
    <span class="p">]),</span>
  <span class="p">})</span>
  <span class="n">result_list</span> <span class="o">=</span> <span class="n">instproxy</span><span class="o">.</span><span class="n">browse</span><span class="p">(</span><span class="n">client_options</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">app</span> <span class="ow">in</span> <span class="n">result_list</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">app</span><span class="p">[</span><span class="s">&quot;CFBundleIdentifier&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="n">bundle_id</span><span class="p">:</span>
      <span class="k">return</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">app</span><span class="p">[</span><span class="s">&quot;Container&quot;</span><span class="p">]</span>
  <span class="k">return</span> <span class="s">&quot;&quot;</span>

<span class="n">app_container</span> <span class="o">=</span> <span class="n">get_pangunew_Container</span><span class="p">()</span>
</code></pre></div>
<p>之后获取com.pangu.ipa1的Path，用来拼接dylib的绝对路径。其实这里在之前取Container时就可以直接获取到Path，不过还是按照Pangu8的换用InstallationProxyClient实现了下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">get_pangunew_Path</span><span class="p">(</span><span class="n">bundle_id</span><span class="o">=</span><span class="s">&quot;com.pangu.ipa1&quot;</span><span class="p">):</span>
  <span class="n">instproxy</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">InstallationProxyClient</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">instproxy</span><span class="o">.</span><span class="n">get_path_for_bundle_identifier</span><span class="p">(</span><span class="n">bundle_id</span><span class="p">)</span>

<span class="n">app_path</span> <span class="o">=</span> <span class="n">get_pangunew_Path</span><span class="p">()</span>
<span class="n">app_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">app_path</span><span class="p">)</span>
</code></pre></div>
<p>再来就是用 DebugServerClient 设置环境变量然后启动neagent了：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">debugserver_inject_neagent</span><span class="p">(</span><span class="n">app_container</span><span class="p">,</span> <span class="n">app_path</span><span class="p">,</span> <span class="n">dylib</span><span class="p">):</span>
  <span class="n">debugserver</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">DebugServerClient</span><span class="p">)</span>

  <span class="c"># SetWorkingDir: 为 app_container</span>
  <span class="k">with</span> <span class="n">DebugServerCommand</span><span class="p">(</span><span class="s">&quot;QSetWorkingDir:&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">app_container</span><span class="p">])</span> <span class="k">as</span> <span class="n">cmd</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>

  <span class="c"># 在环境变量里加上 DYLD_INSERT_LIBRARIES=app_path/dylib</span>
  <span class="k">print</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">set_environment_hex_encoded</span><span class="p">(</span><span class="s">&quot;DYLD_INSERT_LIBRARIES=</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">app_path</span><span class="p">,</span> <span class="n">dylib</span><span class="p">))</span>

  <span class="c"># 启动 /usr/libexec/neagent</span>
  <span class="k">print</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">set_argv</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;/usr/libexec/neagent&quot;</span><span class="p">])</span>
</code></pre></div>
<p>完整源码：<a href="https://github.com/upbit/python-imobiledevice_demo/blob/master/pangu8_neagent_exploit.py"><code>pangu8_neagent_exploit.py</code></a></p>

<p>这里neagent实际是没有<code>get-task-allow=true</code>的，不过既然dylib被加载，那么应该是从<code>__DATA,__mod_init_func</code>开始执行的。
看了下xuanyuansword.dylib确实如此。</p>

<p>写了个验证用的demo_dylib.dylib，代码如下：</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// __DATA,__mod_init_func</span>
<span class="n">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span>
<span class="kt">void</span> <span class="n">demo_main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;demo dylib loaded&quot;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>编译后查看 <code>__DATA,__mod_init_func</code> 指向demo_main。复制到com.pangu.ipa1的Path路径下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">bundle_id</span> <span class="o">=</span> <span class="s">&quot;com.pangu.ipa1&quot;</span>
  <span class="c">#dylib = &quot;xuanyuansword.dylib&quot;</span>
  <span class="n">dylib</span> <span class="o">=</span> <span class="s">&quot;demo_dylib.dylib&quot;</span>

  <span class="n">app_container</span> <span class="o">=</span> <span class="n">get_pangunew_Container</span><span class="p">(</span><span class="n">bundle_id</span><span class="p">)</span>
  <span class="k">print</span> <span class="s">&quot;Container: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">app_container</span>
  <span class="n">app_path</span> <span class="o">=</span> <span class="n">get_pangunew_Path</span><span class="p">(</span><span class="n">bundle_id</span><span class="p">)</span>
  <span class="n">app_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">app_path</span><span class="p">)</span>
  <span class="k">print</span> <span class="s">&quot;Path: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">app_path</span>

  <span class="n">debugserver_inject_neagent</span><span class="p">(</span><span class="n">app_container</span><span class="p">,</span> <span class="n">app_path</span><span class="p">,</span> <span class="n">dylib</span><span class="p">)</span>
</code></pre></div>
<p>运行后就可以用 idevicesyslog 看到dylib的输出了：</p>

<p><img src="http://blog.imaou.com/images/201412/neagent_inject_dylib_demo.png" alt="neganet inject"></p>

<p><span style="color:#888">注：正常情况下neagent注入执行完<code>__mod_init_func</code>后会被debugserver给kill掉。如果启动后neagent crash了，请检查dylib的路径是否有效，以及是否有chmod +x</span></p>

<p>文章中涉及的代码，可以在看雪帖子的底部下载：<a href="http://bbs.pediy.com/showthread.php?t=195495">http://bbs.pediy.com/showthread.php?t=195495</a></p>
]]></content:encoded>
      <dc:date>2014-12-12T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>今天去Two Woods面试，一番疲劳轰炸下连说的啥都忘了...</title>
      <link>http://blog.imaou.com/opensource/2014/12/11/interview_in_two_woods.html</link>
      <description><![CDATA[约的3:00pm面试结果提前到了，果断坐楼下刷秘密。不过附近的秘密居然都是爆CB离职的，索然无味... 然后顺手Google了下对方的电话，bingo! 邮箱和电话等信息都有了 wumii.org
]]></description>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/12/11/interview_in_two_woods.html</guid>
      <content:encoded><![CDATA[<p>约的3:00pm面试结果提前到了，果断坐楼下刷秘密。不过附近的秘密居然都是爆CB离职的，索然无味... 然后顺手Google了下对方的电话，bingo! 邮箱和电话等信息都有了 <a href="http://whois.domaintools.com/wumii.org">wumii.org</a></p>

<p>刷到3点多开始面试，三轮下来别说说了些啥，连前两个面试官的长相都快记不清了 @_@ 出来时已经19:30，那个月明星稀啊... 呃，好吧，楼太高看不到月亮；今晚也没有星星 :(</p>

<p>唯一还记得的就是和CEO聊的时候提到的 “<strong>分支预测器（Branch Predictor）</strong>”，回来查了下果然是我记错了。估计是把stackoverflow上那个关于likely/unlikely的帖子搞混了，虽然同样是为了增加效率，但这个并不是分支预测：<a href="http://blog.man7.org/2012/10/how-much-do-builtinexpect-likely-and.html">How much do _<em>builtin</em>expect(), likely(), and unlikely() improve performance?</a></p>

<p>恶补了下相关的知识，就当是今天的收获把。</p>

<h2><a href="http://zh.wikipedia.org/zh/%E5%88%86%E6%94%AF%E9%A0%90%E6%B8%AC%E5%99%A8">分支预测器</a></h2>

<p>在现代流水线技术的处理器中，遇到分支指令会因为可能发生的跳转，而导致智能等待分支执行结束，才能进入下一条流水线指令。</p>

<p>为了应付这种情况，继而衍生出以下几种分支预测技术：</p>

<h3>静态分支预测</h3>

<p>类似MISP的单方向静态分支预测，总是认为条件跳转不执行；当然还有优化循环的总是认为向前跳转会执行的，总之准确率只有50%；</p>

<h3>动态分支预测</h3>

<p>一般的有两种逻辑：</p>

<ol>
<li><strong>BTB(Branch Target Buffer)</strong>: 记录分支指令的目的跳转地址；</li>
<li><strong>BHT(Branch Histroy Table)</strong>: 记录分支是否跳转，一般用2bit饱和计数器表示(如11和10代表跳转，01和00表示不跳转)；</li>
</ol>

<p>BTB用法比较简单，在取指阶段用PC查BTB，以获取转移历史。BHT则比较有意思，还有个状态机来决定是否跳转：</p>

<p><img src="http://blog.imaou.com/images/201412/branch_prediction_2bit_saturating_counter-dia.png" alt="branch_prediction_2bit_saturating_counter"></p>

<p>简单来说就是需要连续2次跳转或不跳转，才会使预测改变。比如连续2次跳转后饱和计数器为11，之后第一次不跳转导致其降低为10，此时还是预测发生跳转的。经测试这种预测器能达到93.5%的准确率。</p>

<p>参考文献：<a href="http://blog.csdn.net/edonlii/article/details/8754724">http://blog.csdn.net/edonlii/article/details/8754724</a></p>

<h2>关于ARM</h2>

<p>当然往后还有其他分支预测技术，不过ARM却是独树一帜的去掉了这个东西。</p>

<p>ARM采用固定的32位opcode，减轻分支执行的压力。而为了补强这种简单的设计，又为每条指令头部预留了4bit用于条件执行，这也就是为什么每条ARM都可以加上NE/GE之类前缀，而不用B跳转执行的原因。之前看了段ARM和x86汇编的对比，才明白ARM的这种条件执行前缀有多么省事。</p>
]]></content:encoded>
      <dc:date>2014-12-11T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>python-imobiledevice教程03 - 通过InstallationProxyClient获取iOS中安装的应用</title>
      <link>http://blog.imaou.com/opensource/2014/12/10/how_to_browse_applist_by_instproxy.html</link>
      <description><![CDATA[之前看InstallationProxyClient时一直不知道 instproxy_browse 怎么使用，今天看Pangu8里面得到个详细的方法：
]]></description>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/12/10/how_to_browse_applist_by_instproxy.html</guid>
      <content:encoded><![CDATA[<p>之前看InstallationProxyClient时一直不知道 instproxy_browse 怎么使用，今天看Pangu8里面得到个详细的方法：</p>

<p><img src="http://blog.imaou.com/images/201412/pangu8_instproxy_browse_applist.png" alt="Pangu8 _instproxy_browse"></p>

<p>写成Python验证如下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">plist</span>
<span class="kn">from</span> <span class="nn">imobiledevice</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">lockdown_get_service_client</span><span class="p">(</span><span class="n">service_class</span><span class="p">):</span>
  <span class="n">ld</span> <span class="o">=</span> <span class="n">LockdownClient</span><span class="p">(</span><span class="n">iDevice</span><span class="p">())</span>
  <span class="k">return</span> <span class="n">ld</span><span class="o">.</span><span class="n">get_service_client</span><span class="p">(</span><span class="n">service_class</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">list_installed_app</span><span class="p">(</span><span class="n">app_type</span><span class="o">=</span><span class="s">&quot;Any&quot;</span><span class="p">):</span>
  <span class="n">instproxy</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">InstallationProxyClient</span><span class="p">)</span>

  <span class="n">client_options</span> <span class="o">=</span> <span class="n">plist</span><span class="o">.</span><span class="n">Dict</span><span class="p">({</span>
    <span class="s">&quot;ApplicationType&quot;</span><span class="p">:</span> <span class="n">app_type</span><span class="p">,</span>
    <span class="s">&quot;ReturnAttributes&quot;</span><span class="p">:</span> <span class="n">plist</span><span class="o">.</span><span class="n">Array</span><span class="p">([</span>
      <span class="s">&quot;CFBundleIdentifier&quot;</span><span class="p">,</span>
      <span class="s">&quot;CFBundleExecutable&quot;</span><span class="p">,</span>
      <span class="s">&quot;Container&quot;</span><span class="p">,</span>
    <span class="p">]),</span>
  <span class="p">})</span>

  <span class="n">result_list</span> <span class="o">=</span> <span class="n">instproxy</span><span class="o">.</span><span class="n">browse</span><span class="p">(</span><span class="n">client_options</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">result_list</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">data</span>
</code></pre></div>
<p>ApplicationType的输入可以是 System(系统应用), User(用户App), Any(全部)，然后 ReturnAttributes 可以指定需要的内容。之前没带ReturnAttributes导致返回数据过多，然后core在plist的输出上了。这里参考 Pangu8 的返回 CFBundleIdentifier/CFBundleExecutable/Container 三个选项。前两个就不用介绍了，Container则是iOS8中的Container目录，也就是存储数据的文件夹，返回的例子如下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">{</span><span class="s">&#39;CFBundleIdentifier&#39;</span><span class="p">:</span> <span class="s">u&#39;com.apple.PhotosViewService&#39;</span><span class="p">,</span> <span class="s">&#39;CFBundleExecutable&#39;</span><span class="p">:</span> <span class="s">u&#39;PhotosViewService&#39;</span><span class="p">}</span>
<span class="p">{</span><span class="s">&#39;CFBundleIdentifier&#39;</span><span class="p">:</span> <span class="s">u&#39;com.saurik.Cydia&#39;</span><span class="p">,</span> <span class="s">&#39;CFBundleExecutable&#39;</span><span class="p">:</span> <span class="s">u&#39;Cydia&#39;</span><span class="p">}</span>
<span class="p">{</span><span class="s">&#39;CFBundleIdentifier&#39;</span><span class="p">:</span> <span class="s">u&#39;com.apple.mobilesafari&#39;</span><span class="p">,</span> <span class="s">&#39;Container&#39;</span><span class="p">:</span> <span class="s">u&#39;/private/var/mobile/Containers/Data/Application/156B33D2-3D28-4830-A78A-87A4957DECB4&#39;</span><span class="p">,</span> <span class="s">&#39;CFBundleExecutable&#39;</span><span class="p">:</span> <span class="s">u&#39;MobileSafari&#39;</span><span class="p">}</span>
<span class="o">...</span>
</code></pre></div>
<p>其他可选字段还有：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ApplicationDSID
ApplicationType
BuildMachineOSBuild
CFBundleDevelopmentRegion
CFBundleDisplayName
CFBundleDocumentTypes
CFBundleExecutable
CFBundleIcons
CFBundleIdentifier
CFBundleInfoDictionaryVersion
CFBundleName
CFBundleNumericVersion
CFBundlePackageType
CFBundleShortVersionString
CFBundleSignature
CFBundleSupportedPlatforms
CFBundleURLTypes
CFBundleVersion
Container
DTCompiler
DTPlatformBuild
DTPlatformName
DTPlatformVersion
DTSDKBuild
DTSDKName
DTXcode
DTXcodeBuild
Entitlements
EnvironmentVariables
Fabric
IsUpgradeable
LSRequiresIPhoneOS
MinimumOSVersion
NSPhotoLibraryUsageDescription
Path
SequenceNumber
SignerIdentity
UIDeviceFamily
UILaunchImages
UIMainStoryboardFile
UIPrerenderedIcon
UIStatusBarHidden
UIStatusBarStyle
UIStatusBarTintParameters
UISupportedInterfaceOrientations
UTExportedTypeDeclarations
UTImportedTypeDeclarations
</code></pre></div>
<p>比如 CFBundleName(应用名) 以及 CFBundleVersion(版本号)，加上这两个可以轻松实现类似 <code>ideviceinstall -l</code> 的列举app功能。</p>

<p><span style="color:#f00;"><strong>完整源码</strong></span>可以在GitHub找到：<a href="https://github.com/upbit/python-imobiledevice_demo/blob/master/instproxy_browse_installed_app.py"><code>instproxy_browse_installed_app.py</code></a></p>
]]></content:encoded>
      <dc:date>2014-12-10T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>python-imobiledevice教程02 - 通过DebugServerClient服务远程运行和调试程序</title>
      <link>http://blog.imaou.com/opensource/2014/12/08/imobiledevice_example2.html</link>
      <description><![CDATA[为了加深对libimobiledevice的理解，这两天用Python重写了几个核心服务的调用例子，放在了GitHub/python-imobiledevice_demo。这是教程的第二篇，通过DebugServerClient从命令行运行和调试程序。
]]></description>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/12/08/imobiledevice_example2.html</guid>
      <content:encoded><![CDATA[<p>为了加深对libimobiledevice的理解，这两天用Python重写了几个核心服务的调用例子，放在了<a href="https://github.com/upbit/python-imobiledevice_demo">GitHub/python-imobiledevice_demo</a>。这是教程的第二篇，通过DebugServerClient从命令行运行和调试程序。</p>

<h2>环境准备:cython</h2>

<p>2014-12-10日更新：<span style="color:#f00">debugserver.pxi已经提交并<a href="https://github.com/libimobiledevice/libimobiledevice/pull/159">merge</a>到libimobiledevice:master了，现在只用clone最新的代码重新编译，就可以使用DebugServerClient</span>。另外赞一下FunkyM，相当认真的review了我每次提交的代码，不过能够给libimobiledevice贡献代码确实很兴奋。</p>

<hr>

<p>libimobiledevice目前的Cython binding没有<a href="https://github.com/upbit/libimobiledevice/blob/cython/cython/debugserver.pxi">debugserver.pxi</a>，可以使用我修改的<a href="https://github.com/upbit/libimobiledevice/tree/cython">libimobiledevice/cython这个分支</a>来重新编译cython binding，增加DebugServerClient：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>git clone https://github.com/upbit/libimobiledevice.git
<span class="nv">$ </span><span class="nb">cd </span>libimobiledevice/
<span class="nv">$ </span>git fetch
<span class="nv">$ </span>git checkout cython
<span class="nv">$ </span>./autogen.sh
<span class="nv">$ </span>make
<span class="nv">$ </span><span class="nb">cd </span>cython/
<span class="nv">$ </span>make install
</code></pre></div>
<p>这样安装的cython-binding就带有 DebugServerClient 了。</p>

<h2>通过DebugServerClient运行APP</h2>

<p>参考<a href="https://github.com/libimobiledevice/libimobiledevice/blob/master/tools/idevicedebug.c#L346">idevicedebug.c的代码</a>，可以很容易实现与com.apple.debugserver的交互。
DebugServerClient的命令都是以DebugServerCommand来封装的，用法如下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">  <span class="n">debugserver</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">DebugServerClient</span><span class="p">)</span>

  <span class="c"># SetLogging: bitmask=Log等级</span>
  <span class="k">with</span> <span class="n">DebugServerCommand</span><span class="p">(</span><span class="s">&quot;QSetLogging:bitmask=LOG_ALL|LOG_RNB_REMOTE|LOG_RNB_PACKETS&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">cmd</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;Setting logging bitmask: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
  <span class="c"># SetMaxPacketSize: 1024</span>
  <span class="k">with</span> <span class="n">DebugServerCommand</span><span class="p">(</span><span class="s">&quot;QSetMaxPacketSize:&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;1024&quot;</span><span class="p">])</span> <span class="k">as</span> <span class="n">cmd</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;Setting maximum packet size: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
  <span class="c"># SetWorkingDir: &lt;app_root&gt;</span>
  <span class="k">with</span> <span class="n">DebugServerCommand</span><span class="p">(</span><span class="s">&quot;QSetWorkingDir:&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">app_root</span><span class="p">])</span> <span class="k">as</span> <span class="n">cmd</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;Setting working directory: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</code></pre></div>
<p>com.apple.debugserver的输入与输出都是以一个大写字母打头的，表示后面数据的类型，QSetWorkingDir就是设置SetWorkingDir的内容，也就是APP的运行目录。</p>

<p>接着传递参数来启动应用：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">  <span class="n">response</span> <span class="o">=</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">set_argv</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">app_bin_path</span><span class="p">])</span>
  <span class="k">print</span> <span class="s">&quot;Setting argv: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">response</span>

  <span class="c"># If return &quot;Efailed to get the task for process XXX&quot;,</span>
  <span class="c">#     add &quot;get-task-allow = True&quot; in entitlements.plist</span>
  <span class="k">with</span> <span class="n">DebugServerCommand</span><span class="p">(</span><span class="s">&quot;qLaunchSuccess&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">cmd</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;Checking if launch succeeded: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</code></pre></div>
<p>debugserver.set<em>argv() 就是传递启动参数了，远程调试端口也可以在这里添加。因为这个不是命令，不需要debugserver.send</em>command()，之后查询是否启动成功。</p>

<p>如果应用闪退并返回 &quot;Efailed to get the task for process XXX&quot; 则说明App没有 get-task-allow，需要用 ldid -Sent.plist <app_bin> 签上允许调试的 get-task-allow = True</p>

<p>如果程序运行，就可以用c(continue)继续运行目标程序了：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">  <span class="c"># Setting on Thread 0</span>
  <span class="k">with</span> <span class="n">DebugServerCommand</span><span class="p">(</span><span class="s">&quot;Hc0&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">cmd</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;Setting thread: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>

  <span class="c"># c: continue</span>
  <span class="n">cmd_continue</span> <span class="o">=</span> <span class="n">DebugServerCommand</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">)</span>
  <span class="n">loop_response</span> <span class="o">=</span> <span class="n">debugserver</span><span class="o">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">cmd_continue</span><span class="p">)</span>

  <span class="c"># waiting Ctrl+C to exit</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">loop_response</span> <span class="o">==</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">break</span>

      <span class="c"># 获取返回并发送reply:OK，继续等待DebugServer的回应</span>
      <span class="n">result</span><span class="p">,</span> <span class="n">loop_response</span> <span class="o">=</span> <span class="n">debugserver_client_handle_response</span><span class="p">(</span><span class="n">loop_response</span><span class="p">,</span> <span class="n">reply</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

      <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">100</span><span class="o">/</span><span class="mf">1000.0</span><span class="p">)</span>

    <span class="k">except</span> <span class="p">(</span><span class="ne">KeyboardInterrupt</span><span class="p">,</span> <span class="ne">SystemExit</span><span class="p">):</span>
      <span class="k">print</span> <span class="s">&quot;Exiting...&quot;</span>
      <span class="k">break</span>
</code></pre></div>
<hr>

<p>补充使用DebugServerClient的两个限制：</p>

<ol>
<li>需要mount开发者工具 <code>ideviceimagemounter DeveloperDiskImage.dmg</code> 到 /Developer 下，不然会提示 <code>imobiledevice.LockdownError: Invalid service (-17)</code></li>
<li>启动或调试的程序，必须在entitlements.plist里带有&quot;get-task-allow = True&quot;，不然应用会闪退并返回 <code>Efailed to get the task for process XXX</code></li>
</ol>

<h2>通过InstallationProxyClient获取应用的PATH</h2>

<p>cython-dev分支里，还加上了 instproxy<em>client</em>get<em>path</em>for<em>bundle</em>identifier() 函数，用于从bundle_id获取应用的path。用法如下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">  <span class="n">APP_BUNDLE_ID</span> <span class="o">=</span> <span class="s">&quot;com.malcolmhall.WiFiPasswords&quot;</span>
  <span class="n">instproxy</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">InstallationProxyClient</span><span class="p">)</span>
  <span class="k">print</span> <span class="n">instproxy</span><span class="o">.</span><span class="n">get_path_for_bundle_identifier</span><span class="p">(</span><span class="n">APP_BUNDLE_ID</span><span class="p">)</span>
</code></pre></div>
<p><span style="color:#f00;"><strong>完整源码</strong></span>可以在GitHub找到：<a href="https://github.com/upbit/python-imobiledevice_demo/blob/master/debugserver_app_runner.py"><code>debugserver_app_runner.py</code></a></p>
]]></content:encoded>
      <dc:date>2014-12-08T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>python-imobiledevice教程01 - 使用AfcClient和InstallationProxyClient后台安装应用</title>
      <link>http://blog.imaou.com/opensource/2014/12/07/imobiledevice_example1.html</link>
      <description><![CDATA[为了加深对libimobiledevice的理解，这两天用Python重写了几个核心服务的调用例子，放在了GitHub/python-imobiledevice_demo。这是教程的第一篇，讲解如何通过AfcClient和InstallationProxyClient实现上传IPA文件和后台安装App。
]]></description>
      <pubDate>Sun, 07 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/12/07/imobiledevice_example1.html</guid>
      <content:encoded><![CDATA[<p>为了加深对libimobiledevice的理解，这两天用Python重写了几个核心服务的调用例子，放在了<a href="https://github.com/upbit/python-imobiledevice_demo">GitHub/python-imobiledevice_demo</a>。这是教程的第一篇，讲解如何通过AfcClient和InstallationProxyClient实现上传IPA文件和后台安装App。</p>

<p>python调用imobiledevice依赖于 python-imobiledevice，可以获取<a href="https://github.com/libimobiledevice/libimobiledevice">libimobiledevice</a>的Cython binding (包名为python-imobiledevice)；MacOS也可以参考之前的<a href="http://blog.imaou.com/opensource/2014/12/04/compile_python-imobiledevice_on_macos.html">搞定MacOS上的python-imobiledevice，两套Python真心害死人</a>一文来从源码安装。</p>

<h2>imobiledevice基础</h2>

<p>使用python-imobiledevice需要先引入imobiledevice：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">imobiledevice</span> <span class="kn">import</span> <span class="o">*</span>
</code></pre></div>
<p>imobiledevice.iDevice() 会自动寻找已连接的iOS设备，或者可以指定UDID来等待某个设备的接入，设备的UDID可以通过libimobiledevice自带的<code>idevice_id</code>命令来查看。</p>

<p>设备上的服务，大多是通过LockdownClient来启动的，定义函数来从lockdown获取service_client：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">lockdown_get_service_client</span><span class="p">(</span><span class="n">service_class</span><span class="p">):</span>
    <span class="n">ld</span> <span class="o">=</span> <span class="n">LockdownClient</span><span class="p">(</span><span class="n">iDevice</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">ld</span><span class="o">.</span><span class="n">get_service_client</span><span class="p">(</span><span class="n">service_class</span><span class="p">)</span>
</code></pre></div>
<p>之后就可以通过服务的Client名来获取对应的客户端了：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">  <span class="n">afc</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">AfcClient</span><span class="p">)</span>
  <span class="n">instproxy</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">InstallationProxyClient</span><span class="p">)</span>
</code></pre></div>
<p>其中LockdownClient().get<em>service</em>client()实际上是<a href="https://github.com/libimobiledevice/libimobiledevice/blob/master/cython/lockdown.pxi#L210">内部封装了start_service</a>，<code>afc = lockdown_get_service_client(AfcClient)</code>等价于：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">    <span class="n">dev</span> <span class="o">=</span> <span class="n">iDevice</span><span class="p">()</span>
    <span class="n">ld</span> <span class="o">=</span> <span class="n">LockdownClient</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span>
    <span class="n">svrport</span> <span class="o">=</span> <span class="n">ld</span><span class="o">.</span><span class="n">start_service</span><span class="p">(</span><span class="n">AfcClient</span><span class="p">)</span>
    <span class="n">afc</span> <span class="o">=</span> <span class="n">AfcClient</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">svrport</span><span class="p">)</span>
</code></pre></div>
<p>其中<code>ld.start_service(AfcClient)</code>虽然传递的是Class，实际获取的是<a href="https://github.com/libimobiledevice/libimobiledevice/blob/master/cython/afc.pxi#L171">cython/afc.pxi</a>中的<code>AfcClient.__service_name__</code>，即 com.apple.afc。此时就可以AfcClient与AFC服务进行交互了。</p>

<h2>使用AfcClient上传IPA文件</h2>

<p>首先写一个上传文件的函数，将IPA的payload写入到iDevice中：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">afc_upload_file</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">local_stream</span><span class="p">):</span>
    <span class="n">afc</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">AfcClient</span><span class="p">)</span>

    <span class="c"># 使用afc服务打开filename文件，并写入local_stream中的所有内容</span>
    <span class="n">testipa</span> <span class="o">=</span> <span class="n">afc</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&quot;w+&quot;</span><span class="p">)</span>
    <span class="n">testipa</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">local_stream</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
    <span class="n">testipa</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>
<p>这样，调用 <code>afc_upload_file(&quot;test.ipa&quot;, open(&quot;payload/pangunew.ipa&quot;))</code> 就会将本地 payload/pangunew.ipa 的文件，写入到AFC根目录(默认为/private/var/mobile/Media)下的 test.ipa 文件中了。</p>

<p>相应的，afc还提供了其他目录文件操作，例如创建目录<code>afc.make_directory(path)</code>或删除文件/目录<code>afc.remove_path(path)</code>。不过这些操作都被限制在AFC的根目录/private/var/mobile/Media中。</p>

<p>另外还有两个很有用的函数：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">    <span class="c"># 显示 / 下的所有文件和目录</span>
    <span class="k">print</span> <span class="n">afc</span><span class="o">.</span><span class="n">read_directory</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
    <span class="c"># 获取test.ipa的信息</span>
    <span class="k">print</span> <span class="n">afc</span><span class="o">.</span><span class="n">get_file_info</span><span class="p">(</span><span class="s">&quot;test.ipa&quot;</span><span class="p">)</span>
</code></pre></div>
<h2>使用InstallationProxyClient安装上传的IPA</h2>

<p>com.apple.mobile.installation_proxy 是一个用来查看/安装/升级/卸载/管理用户App的服务，这里只用到其中的upgrade()函数。更多可以参考libimobiledevice作者的另一个作品<a href="https://github.com/libimobiledevice/ideviceinstaller">ideviceinstaller</a>，其中使用了InstallationProxyClient的几乎全部功能。</p>

<p>这里用到的是upgrade而不是install，是因为upgrade不会理会App是否已经存在。另外参数部分第一次用到libplist，直接传一个空Dict即可：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">plist</span>
<span class="k">def</span> <span class="nf">instproxy_install_file</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">instproxy</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">InstallationProxyClient</span><span class="p">)</span>
    <span class="n">instproxy</span><span class="o">.</span><span class="n">upgrade</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">plist</span><span class="o">.</span><span class="n">Dict</span><span class="p">({}))</span>
</code></pre></div>
<p>另外演示InstallationProxyClient的一个功能，通过browse()查看已安装应用的信息：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">    <span class="c"># dump application info</span>
    <span class="n">client_options</span> <span class="o">=</span> <span class="n">plist</span><span class="o">.</span><span class="n">Dict</span><span class="p">({</span>
        <span class="s">&quot;ApplicationType&quot;</span><span class="p">:</span> <span class="s">&quot;User&quot;</span><span class="p">,</span>      <span class="c"># Any, System, User</span>
    <span class="p">})</span>
    <span class="k">for</span> <span class="n">app</span> <span class="ow">in</span> <span class="n">instproxy</span><span class="o">.</span><span class="n">browse</span><span class="p">(</span><span class="n">client_options</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&quot;[CFBundleIdentifier] </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">app</span><span class="p">[</span><span class="s">&quot;CFBundleIdentifier&quot;</span><span class="p">]</span>
        <span class="k">print</span> <span class="s">&quot;[EnvironmentVariables] </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">app</span><span class="p">[</span><span class="s">&quot;EnvironmentVariables&quot;</span><span class="p">]</span>
</code></pre></div>
<p>不过注意，目前libplist对中文支持好像有问题，导出System列表时居然引起Python core dump。反正不是很常用，不管了...</p>

<p><span style="color:#f00;"><strong>完整源码</strong></span>可以在GitHub找到：<a href="https://github.com/upbit/python-imobiledevice_demo/blob/master/afc_and_instproxy_upgrade_ipa.py"><code>afc_and_instproxy_upgrade_ipa.py</code></a></p>

<h2>关于Afc2Client</h2>

<p><a href="http://theiphonewiki.com/wiki/AFC">AFC (Apple File Conduit)</a>是苹果自带的文件服务，其读写权限被限制在/private/var/mobile/Media下。而<a href="https://cydia.saurik.com/info/com.saurik.afc2d/">AFC2 (Apple File Conduit&quot;2&quot;)</a>则是由Saurik编写的能够让已越狱机器，访问整个root文件系统(所以Afc2Client的根目录才是/)。</p>

<p>启动方法，在Cydia里搜索 Apple File Conduit&quot;2&quot; 并安装，然后将 AfcClient 换成 Afc<span style="color:#f00;"><strong>2</strong></span>Client：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python">    <span class="n">afc2</span> <span class="o">=</span> <span class="n">lockdown_get_service_client</span><span class="p">(</span><span class="n">Afc2Client</span><span class="p">)</span>
</code></pre></div>
<p>ps: afc2确实是利器，之前成功用它删掉LaunchDaemons下的plist，救活因安装虚拟内存白苹果的iPad。附带一个afc的shell<a href="https://github.com/upbit/python-imobiledevice_demo/blob/master/afc_shell.py"><code>afc_shell.py</code></a>，可以像ifuse一样上传下载和浏览机器的内容。</p>
]]></content:encoded>
      <dc:date>2014-12-07T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>搞定MacOS上的python-imobiledevice，两套Python真心害死人</title>
      <link>http://blog.imaou.com/opensource/2014/12/04/compile_python-imobiledevice_on_macos.html</link>
      <description><![CDATA[最近需要研究libimobiledevice，总写c的代码测试不方便吧，于是翻到GitHub有个cython binding。几番周折下终于把这个 python-imobiledevice 搞定了，上图：
]]></description>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/12/04/compile_python-imobiledevice_on_macos.html</guid>
      <content:encoded><![CDATA[<p>最近需要研究libimobiledevice，总写c的代码测试不方便吧，于是翻到GitHub有个<a href="https://github.com/libimobiledevice/libimobiledevice/tree/master/cython">cython binding</a>。几番周折下终于把这个 python-imobiledevice 搞定了，上图：</p>

<p><img src="http://blog.imaou.com/images/201412/python-imobiledevice1.png" alt="python-imobiledevice"></p>

<p>下面是折腾的过程，希望对其他想要在MacOS上安装python-imobiledevice的同学有所帮助。</p>

<h2>libimobiledevice Cython binding</h2>

<p>libimobiledevice有个Cython binding，不过找遍网络也没有说明文档，而且python-imobiledevice也不能通过pip安装。无奈之下尝试用Homebrew安装<code>brew install libimobiledevice --with-python</code>，但进入Python就发现问题了：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">imobiledevice</span>
<span class="ne">ImportError</span><span class="p">:</span> <span class="n">No</span> <span class="n">module</span> <span class="n">named</span> <span class="n">imobiledevice</span>
</code></pre></div>
<p>压根就没有安装python的package嘛。于是<code>git clone https://github.com/libimobiledevice/libimobiledevice.git</code>了一份最新源码，打算从源码安装。<code>./configure</code>后发现Python binding没有启用，检查了下是libplist依赖问题，之前Homebrew安装的版本没有cython支持。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>brew install libplist --with-python
</code></pre></div>
<p>重新安装有python支持的libplist后，进入Python试了下：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">plist</span>
<span class="n">Fatal</span> <span class="n">Python</span> <span class="n">error</span><span class="p">:</span> <span class="n">PyThreadState_Get</span><span class="p">:</span> <span class="n">no</span> <span class="n">current</span> <span class="n">thread</span>
</code></pre></div>
<p>然后噩梦开始了。看GitHub上说是多格Python版本冲突引起的，关于这个错误<a href="http://stackoverflow.com/questions/15678153/homebrew-python-on-mac-os-x-10-8-fatal-python-error-pythreadstate-get-no-cu">stackoverflow上有个更详细的解释</a>，按我的理解是libplist引用了系统版本的Python库，但我是用Homebrew安装的Python2.7.8跑的。<code>otool -L &lt;dyld&gt;</code>查看确实存在问题，Homebrew安装的libplist指向了/System/Library/Frameworks/Python.framework/下的Python2.7，也就是系统的Python。</p>

<p>折腾了一阵后想到办法，既然libplist先找系统的Python.framework，那我让它找不到就好了。于是给/System/Library/Frameworks/Python.framework/改了名，用libplist的源码重新编译：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>git clone https://github.com/libimobiledevice/libplist.git
<span class="nv">$ </span><span class="nb">cd </span>libplist/
<span class="nv">$ </span>./autogen.sh
</code></pre></div>
<p>这里不明白为什么默认Python binding没有启用，于是我直接patch了configure文件强制让build_cython=true。接着再运行提示：</p>
<div class="highlight"><pre><code class="language-makefile" data-lang="makefile"><span class="nf">configure</span><span class="o">:</span> <span class="n">error</span>:
    Could not link <span class="nb">test </span>program to Python. Maybe the main Python library has been
    installed in some non-standard library path. If so, pass it to configure,
    via the LDFLAGS environment variable.
    Example: ./configure <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L/usr/non-standard-path/python/lib&quot;</span>
    <span class="o">============================================================================</span>
    ERROR!
    You probably have to install the development version of the Python package
    <span class="k">for</span> your distribution.  The exact name of this package varies among them.
    <span class="o">============================================================================</span>
</code></pre></div>
<p>也就是已经找不到Python的lib目录了，于是手动给个。先用<code>python-config --prefix</code>找到当前Python的安装位置，加/lib/传给LDFLAGS：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>python-config --prefix
/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7
<span class="nv">$ </span>./configure <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7/lib/&quot;</span>
</code></pre></div>
<p>然后顺利<code>make &amp;&amp; make install</code>到/usr/local/include/plist/和/usr/local/lib/</p>

<p>这里还有个小问题，libplist的cython支持没有正确复制，需要手动copy过去：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">cd </span>cython/
<span class="nv">$ </span>mkdir /usr/local/include/plist/cython
<span class="nv">$ </span>cp plist.p* /usr/local/include/plist/cython/
</code></pre></div>
<p>再用同样方法源码编译libimobiledevice，顺利找到Python binding：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">cd</span> ../../
<span class="nv">$ </span><span class="nb">cd </span>libimobiledevice/
<span class="nv">$ </span>./autogen.sh <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7/lib/&quot;</span>
</code></pre></div>
<p><code>make &amp;&amp; make install</code>后，python-imobiledevice就可用了。</p>
]]></content:encoded>
      <dc:date>2014-12-04T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>使用Capstone增强lldb的 ARM/Thumb 代码反汇编能力</title>
      <link>http://blog.imaou.com/opensource/2014/12/03/import_capstone_in_lldb_for_thumb_disasm.html</link>
      <description><![CDATA[用lldb调试armv7的代码后，总是为 dis -A thumb 部分代码显示不正确而烦恼。而手边又没有arm64的设备，常常是一边对着IDA一边s。最近接触到Capstone，一个开源的反汇编框架，并且目前拥有python、java、go、node.js等众多bindings，于是想借用capstone来增强lldb的反汇编能力。
]]></description>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/12/03/import_capstone_in_lldb_for_thumb_disasm.html</guid>
      <content:encoded><![CDATA[<p>用lldb调试armv7的代码后，总是为 dis -A thumb 部分代码显示不正确而烦恼。而手边又没有arm64的设备，常常是一边对着IDA一边s。最近接触到<a href="https://github.com/aquynh/capstone">Capstone</a>，一个开源的反汇编框架，并且目前拥有python、java、go、node.js等众多bindings，于是想借用capstone来增强lldb的反汇编能力。</p>

<p><strong>实现的功能如下：</strong></p>

<ol>
<li>根据CPSR的Thumb标志判断arm指令的类型，并支持选择处理器类型 arm 或 arm64；</li>
<li><span style="color:#f00;">调用capstone反汇编PC位置代码，或指定的代码段；</span></li>
</ol>

<p>先上效果图，完整的脚本可以到这里下载：<a href="https://github.com/upbit/lldb-capstone-arm">https://github.com/upbit/lldb-capstone-arm</a></p>

<p><img src="https://raw.github.com/upbit/lldb-capstone-arm/master/screenshot.png" alt="Screenshot"></p>

<p>可以看到，dis -A thumb 无法识别的指令，均被正确的显示出来了。</p>

<h2>安装方法</h2>

<p>在MacOS上，先安装capstone和Python binding：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">brew install capstone
sudo pip install capstone
</code></pre></div>
<p>接着复制 dis<em>capstone.py 到 ~/.lldb/ 目录，并将`command script import ~/.lldb/dis</em>capstone.py`加入~/.lldbinit文件中（不存在的话可以直接创建）</p>

<p>这样lldb启动时，就会显示如下提示，dis_capstone 或缩写 discs 就可以使用了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">The &quot;discs (dis_capstone)&quot; command has been installed
</code></pre></div>
<p>当然也可以在lldb里输入<code>command script import ~/.lldb/dis_capstone.py</code>来手动加载脚本</p>

<h2>原理说明</h2>

<p>核心函数如下，主要完成如下几个操作：</p>

<ol>
<li>从debugger中获取当前frame；</li>
<li>调用 process.ReadMemory() 读取指定地址；</li>
<li>使用指定的arch和mode初始化capstone.CS <code>md = Cs(disasm_arch, disasm_mode)</code></li>
<li>调用 md.disasm() 反汇编，并输出结果；</li>
</ol>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">real_disassemble</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">start_addr</span><span class="p">,</span> <span class="n">disasm_length</span><span class="p">,</span> <span class="n">disasm_arch</span><span class="p">,</span> <span class="n">disasm_mode</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Disassemble code with target arch/mode &quot;&quot;&quot;</span>

    <span class="n">target</span> <span class="o">=</span> <span class="n">debugger</span><span class="o">.</span><span class="n">GetSelectedTarget</span><span class="p">()</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="n">GetProcess</span><span class="p">()</span>
    <span class="n">thread</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">GetSelectedThread</span><span class="p">()</span>
    <span class="n">frame</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="n">GetSelectedFrame</span><span class="p">()</span>

    <span class="c"># read bytes</span>
    <span class="n">error</span> <span class="o">=</span> <span class="n">lldb</span><span class="o">.</span><span class="n">SBError</span><span class="p">()</span>
    <span class="nb">bytes</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">ReadMemory</span><span class="p">(</span><span class="n">start_addr</span><span class="p">,</span> <span class="n">disasm_length</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">error</span><span class="o">.</span><span class="n">Success</span><span class="p">():</span>
        <span class="c"># decode with capstone</span>
        <span class="n">md</span> <span class="o">=</span> <span class="n">Cs</span><span class="p">(</span><span class="n">disasm_arch</span><span class="p">,</span> <span class="n">disasm_mode</span><span class="p">)</span>
        <span class="n">isFirstLine</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">insn</span> <span class="ow">in</span> <span class="n">md</span><span class="o">.</span><span class="n">disasm</span><span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="n">start_addr</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">isFirstLine</span><span class="p">):</span>
                <span class="k">print</span><span class="p">(</span><span class="s">&quot;-&gt; 0x</span><span class="si">%x</span><span class="s">:  </span><span class="si">%-16s</span><span class="s"> </span><span class="si">%-8s</span><span class="s"> </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">bytes_to_hex</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">bytes</span><span class="p">),</span> <span class="n">insn</span><span class="o">.</span><span class="n">mnemonic</span><span class="p">,</span> <span class="n">insn</span><span class="o">.</span><span class="n">op_str</span><span class="p">))</span>
                <span class="n">isFirstLine</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">continue</span>

                <span class="k">print</span><span class="p">(</span><span class="s">&quot;   0x</span><span class="si">%x</span><span class="s">:  </span><span class="si">%-16s</span><span class="s"> </span><span class="si">%-8s</span><span class="s"> </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">bytes_to_hex</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">bytes</span><span class="p">),</span> <span class="n">insn</span><span class="o">.</span><span class="n">mnemonic</span><span class="p">,</span> <span class="n">insn</span><span class="o">.</span><span class="n">op_str</span><span class="p">))</span>

            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">&quot;[ERROR] ReadMemory(0x</span><span class="si">%x</span><span class="s">): </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">start_addr</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</code></pre></div>
<h2>小插曲</h2>

<p>Capstone作者相当友善，在反馈了<a href="https://github.com/aquynh/capstone/issues/74#issuecomment-65342454">Homebrew中capstone 3.0的问题</a>后，作者10小时不到就回复了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">confirmed this issue &amp; working on a fix for Brew formula now, thanks.
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">this should be fixed now in Brew formula. can you update Brew (with brew update), then try to reinstall Capstone?

thanks.
</code></pre></div>
<p>另外作者更新的也相当勤快，赞一个！</p>
]]></content:encoded>
      <dc:date>2014-12-03T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>在Tweak中嵌入CocoaHTTPServer, 并访问任意目录文件</title>
      <link>http://blog.imaou.com/theos/2014/11/19/use_httpserver_in_theos.html</link>
      <description><![CDATA[网上没有过多关于Theos中集成CocoaPods库的简单方案，只好学iSpy里自己动手写了。最终顺利将CocoaHTTPServer集成到Tweak中，实现%hook UIApplication并随目标程序监听指定端口，另外记录下CocoaHTTPServer访问沙盒外文件的方法。
]]></description>
      <pubDate>Wed, 19 Nov 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/theos/2014/11/19/use_httpserver_in_theos.html</guid>
      <content:encoded><![CDATA[<p>网上没有过多关于Theos中集成CocoaPods库的简单方案，只好学<a href="https://github.com/BishopFox/iSpy">iSpy</a>里自己动手写了。最终顺利将CocoaHTTPServer集成到Tweak中，实现%hook UIApplication并随目标程序监听指定端口，另外记录下CocoaHTTPServer访问沙盒外文件的方法。</p>

<h2>编译libCocoaHTTPServer.a</h2>

<p>先下载<a href="https://github.com/robbiehanson/CocoaHTTPServer">CocoaHTTPServer的源码</a>，并将需要的.h和.m放到同一个目录，如 CocoaHTTPServer/ 下。注意，子目录下的文件也需要放到一个目录里</p>

<p>接着在目录中新建一个build.sh，输入如下内容：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c">#!/bin/sh</span>

<span class="nv">OBJ</span><span class="o">=</span><span class="s2">&quot;./objs&quot;</span>
<span class="nv">LIBNAME</span><span class="o">=</span><span class="s2">&quot;libCocoaHTTPServer.a&quot;</span>
<span class="nv">ARCHS</span><span class="o">=</span><span class="s2">&quot;-arch armv7 -arch armv7s -arch arm64&quot;</span>

<span class="nv">SDK</span><span class="o">=</span><span class="k">$(</span>ls -1d /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iP* <span class="p">|</span> tail -n1<span class="k">)</span>
<span class="nb">echo</span> <span class="nv">$SDK</span>

<span class="c"># remove object files to build nice n clean</span>
<span class="nb">echo</span> <span class="s1">&#39;[+] Removing old object files ...&#39;</span>
rm -Rf <span class="k">${</span><span class="nv">OBJ</span><span class="k">}</span>
mkdir <span class="k">${</span><span class="nv">OBJ</span><span class="k">}</span>

<span class="c"># compile the Objective-C stuff</span>
<span class="nb">echo</span> <span class="s1">&#39;[+] Compiling Objective-C files ...&#39;</span>
<span class="nv">CLANG_CFLAGS</span><span class="o">=</span><span class="s2">&quot;-fobjc-arc -I /usr/include/libxml2 -Wno-format -Wno-mismatched-parameter-types -Wno-unused-function -Wno-deprecated-declarations -Wno-enum-conversion&quot;</span>
<span class="nb">cd</span> <span class="k">${</span><span class="nv">OBJ</span><span class="k">}</span>
clang -c ../*.m <span class="k">${</span><span class="nv">ARCHS</span><span class="k">}</span> -isysroot <span class="nv">$SDK</span> <span class="k">${</span><span class="nv">CLANG_CFLAGS</span><span class="k">}</span>

<span class="c"># See Makefile.* in the parent directory.</span>
<span class="nb">echo</span> <span class="s2">&quot;[+] Creating ${LIBNAME} archive&quot;</span>
ar -rs <span class="k">${</span><span class="nv">LIBNAME</span><span class="k">}</span> *.o &gt;/dev/null 2&gt;<span class="p">&amp;</span>1

mv -f <span class="k">${</span><span class="nv">LIBNAME</span><span class="k">}</span> ../../
<span class="nb">echo</span> <span class="s1">&#39;[+] done.&#39;</span>
</code></pre></div>
<p>此脚本用于查找同级目录下的所有.m文件，并编译链接为libCocoaHTTPServer.a，移动到上一层目录中。注意，多arch时务必添加 ar -s，为这个问题搞了好久。</p>

<h2>封装HTTPServer</h2>

<p>封装一个单例模式的 CommandServer，方便在tweak中使用</p>

<h3>CommandServer.h</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#ifndef __COMMAND_SERVER_H__</span>
<span class="cp">#define __COMMAND_SERVER_H__</span>

<span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="cp">#import &quot;CocoaHTTPServer/HTTPServer.h&quot;</span>

<span class="k">@interface</span> <span class="nc">CommandServer</span> : <span class="bp">NSObject</span> <span class="p">{</span>
<span class="k">@public</span>
    <span class="n">HTTPServer</span> <span class="o">*</span><span class="n">httpServer</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">+</span> <span class="p">(</span><span class="n">CommandServer</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">startServer</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopServer</span><span class="p">;</span>

<span class="k">@end</span>

<span class="cp">#endif</span>
</code></pre></div>
<h3>CommandServer.m</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &quot;CommandServer/CommandServer.xm&quot;</span>
<span class="cp">#import &quot;CommandServer.h&quot;</span>
<span class="cp">#import &quot;ZLogDefines.h&quot;</span>

<span class="cp">#import &quot;RootHTTPConnection.h&quot;</span>

<span class="k">@implementation</span> <span class="nc">CommandServer</span>

<span class="p">+</span> <span class="p">(</span><span class="n">CommandServer</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">CommandServer</span> <span class="o">*</span><span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">once</span><span class="p">;</span>
    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">once</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span> <span class="p">{</span>
    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">once</span><span class="p">;</span>

    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">once</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">ZLogNotice</span><span class="p">(</span><span class="s">&quot;Initializing CommandServer on: %s&quot;</span><span class="p">,</span> <span class="n">TO_CSTR</span><span class="p">([[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundleIdentifier</span><span class="p">]));</span>

        <span class="n">httpServer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HTTPServer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
        <span class="p">[</span><span class="n">httpServer</span> <span class="nl">setType</span><span class="p">:</span><span class="s">@&quot;_http._tcp.&quot;</span><span class="p">];</span>
        <span class="p">[</span><span class="n">httpServer</span> <span class="nl">setConnectionClass</span><span class="p">:[</span><span class="n">RootHTTPConnection</span> <span class="k">class</span><span class="p">]];</span>


        <span class="p">[</span><span class="n">httpServer</span> <span class="nl">setPort</span><span class="p">:</span><span class="mi">8080</span><span class="p">];</span>
        <span class="p">[</span><span class="n">httpServer</span> <span class="nl">setDocumentRoot</span><span class="p">:</span><span class="s">@&quot;/var/www/sites&quot;</span><span class="p">];</span>

        <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">httpServer</span> <span class="nl">start</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">ZLogError</span><span class="p">(</span><span class="s">&quot;Error starting HTTP Server: %s&quot;</span><span class="p">,</span> <span class="n">TO_CSTR</span><span class="p">(</span><span class="n">error</span><span class="p">));</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">ZLogWarn</span><span class="p">(</span><span class="s">&quot;Initialized CommandServer(%s), port %hu&quot;</span><span class="p">,</span> <span class="n">TO_CSTR</span><span class="p">(</span><span class="n">httpServer</span><span class="p">.</span><span class="n">documentRoot</span><span class="p">),</span> <span class="n">httpServer</span><span class="p">.</span><span class="n">port</span><span class="p">);</span>

    <span class="p">});</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">startServer</span> <span class="p">{</span>
    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
    <span class="kt">BOOL</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="n">httpServer</span> <span class="nl">start</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ret</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ZLogError</span><span class="p">(</span><span class="s">&quot;Error start HTTP server: %s&quot;</span><span class="p">,</span> <span class="n">TO_CSTR</span><span class="p">(</span><span class="n">error</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopServer</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">httpServer</span> <span class="n">stop</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<p>在 initialize: 里初始化HTTPServer并监听8080端口，documentRoot设为沙盒外的路径。<strong>这里如果直接运行会404</strong>，需要先实现 RootHTTPConnection。</p>

<h3>RootHTTPConnection.h</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#ifndef __ROOT_HTTP_CONNECTION_H__</span>
<span class="cp">#define __ROOT_HTTP_CONNECTION_H__</span>

<span class="cp">#import &quot;CocoaHTTPServer/HTTPConnection.h&quot;</span>
<span class="k">@interface</span> <span class="nc">RootHTTPConnection</span> : <span class="nc">HTTPConnection</span> <span class="p">{}</span>
<span class="k">@end</span>

<span class="cp">#endif</span>
</code></pre></div>
<h3>RootHTTPConnection.m</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &quot;RootHTTPConnection.h&quot;</span>
<span class="cp">#import &quot;RootStaticFileResponse.h&quot;</span>
<span class="cp">#import &quot;ZLogDefines.h&quot;</span>

<span class="k">@implementation</span> <span class="nc">RootHTTPConnection</span>

<span class="c1">// Handle static content in system path</span>
<span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span><span class="o">&lt;</span><span class="n">HTTPResponse</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">httpResponseForMethod:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">method</span> <span class="nf">URI:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">path</span> <span class="p">{</span>
    <span class="n">ZLogNotice</span><span class="p">(</span><span class="s">&quot;[HTTP %s] %s&quot;</span><span class="p">,</span> <span class="n">TO_CSTR</span><span class="p">(</span><span class="n">method</span><span class="p">),</span> <span class="n">TO_CSTR</span><span class="p">(</span><span class="n">path</span><span class="p">));</span>

    <span class="bp">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">filePathForURI</span><span class="p">:</span><span class="n">path</span> <span class="nl">allowDirectory</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
    <span class="kt">BOOL</span> <span class="n">isDir</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">filePath</span> <span class="o">&amp;&amp;</span> <span class="p">[[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">fileExistsAtPath</span><span class="p">:</span><span class="n">filePath</span> <span class="nl">isDirectory</span><span class="p">:</span><span class="o">&amp;</span><span class="n">isDir</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isDir</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[[</span><span class="n">RootStaticFileResponse</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFilePath</span><span class="p">:</span><span class="n">filePath</span> <span class="nl">forConnection</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>     <span class="c1">// 404</span>
<span class="p">}</span>
</code></pre></div>
<p>httpResponseForMethod: 里，使用NSFileManager访问外部文件。不过返回的HTTPResponse对象，这里需要封装下Headers</p>

<h3>RootStaticFileResponse.h</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#ifndef __ROOT_STATIC_FILE_RESPONSE_H__</span>
<span class="cp">#define __ROOT_STATIC_FILE_RESPONSE_H__</span>

<span class="cp">#import &quot;CocoaHTTPServer/HTTPFileResponse.h&quot;</span>
<span class="k">@interface</span> <span class="nc">RootStaticFileResponse</span> : <span class="nc">HTTPFileResponse</span> <span class="p">{}</span>
<span class="k">@end</span>

<span class="cp">#endif</span>
</code></pre></div>
<h3>RootStaticFileResponse.m</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &quot;RootStaticFileResponse.h&quot;</span>

<span class="k">@implementation</span> <span class="nc">RootStaticFileResponse</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">httpHeaders</span> <span class="p">{</span>
    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">contentTypes</span> <span class="o">=</span> <span class="l">@{</span>
        <span class="s">@&quot;html&quot;</span><span class="o">:</span> <span class="s">@&quot;text/html; charset=UTF-8&quot;</span><span class="p">,</span>
        <span class="s">@&quot;js&quot;</span><span class="o">:</span> <span class="s">@&quot;text/javascript&quot;</span><span class="p">,</span>
        <span class="s">@&quot;css&quot;</span><span class="o">:</span> <span class="s">@&quot;text/css&quot;</span><span class="p">,</span>
        <span class="s">@&quot;png&quot;</span><span class="o">:</span> <span class="s">@&quot;image/png&quot;</span><span class="p">,</span>
        <span class="s">@&quot;jpg&quot;</span><span class="o">:</span> <span class="s">@&quot;image/jpeg&quot;</span><span class="p">,</span>
        <span class="s">@&quot;jpeg&quot;</span><span class="o">:</span> <span class="s">@&quot;image/jpeg&quot;</span><span class="p">,</span>
        <span class="s">@&quot;ico&quot;</span><span class="o">:</span> <span class="s">@&quot;image/ico&quot;</span><span class="p">,</span>
        <span class="s">@&quot;gif&quot;</span><span class="o">:</span> <span class="s">@&quot;image/gif&quot;</span><span class="p">,</span>
        <span class="s">@&quot;svg&quot;</span><span class="o">:</span> <span class="s">@&quot;image/svg+xml&quot;</span><span class="p">,</span>
        <span class="s">@&quot;tff&quot;</span><span class="o">:</span> <span class="s">@&quot;application/x-font-ttf&quot;</span><span class="p">,</span>
        <span class="s">@&quot;eot&quot;</span><span class="o">:</span> <span class="s">@&quot;application/vnd.ms-fontobject&quot;</span><span class="p">,</span>
        <span class="s">@&quot;woff&quot;</span><span class="o">:</span> <span class="s">@&quot;application/x-font-woff&quot;</span><span class="p">,</span>
        <span class="s">@&quot;otf&quot;</span><span class="o">:</span> <span class="s">@&quot;application/x-font-otf&quot;</span><span class="p">,</span>
    <span class="l">}</span><span class="p">;</span>

    <span class="cm">/* If we don&#39;t know the mime-type we serve the file as binary data */</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">contentType</span> <span class="o">=</span> <span class="p">[</span><span class="n">contentTypes</span> <span class="nl">valueForKey</span><span class="p">:[</span><span class="n">filePath</span> <span class="n">pathExtension</span><span class="p">]];</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">contentType</span> <span class="n">length</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">contentType</span> <span class="o">=</span> <span class="s">@&quot;application/octet-stream&quot;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">headers</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithObjectsAndKeys</span><span class="p">:</span>
        <span class="n">contentType</span><span class="p">,</span> <span class="s">@&quot;Content-type&quot;</span><span class="p">,</span>
    <span class="nb">nil</span><span class="p">];</span>

    <span class="k">return</span> <span class="n">headers</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<p>更多详细代码，可以看<a href="https://github.com/BishopFox/iSpy">iSpy</a>的HttpServer部分。</p>

<h2>Use in Tweak.xm</h2>

<p>封装好 CommandServer，使用就很简单了：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &quot;CommandServer/CommandServer.h&quot;</span>
<span class="cp">#import &quot;ZLogDefines.h&quot;</span>

<span class="o">%</span><span class="n">group</span> <span class="n">InitHTTPServer</span>

<span class="o">%</span><span class="n">hook</span> <span class="bp">UIApplication</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">init</span> <span class="p">{</span>
  <span class="nb">self</span> <span class="o">=</span> <span class="o">%</span><span class="n">orig</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// init server when launched</span>
    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserverForName</span><span class="p">:</span><span class="n">UIApplicationDidFinishLaunchingNotification</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">queue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="n">note</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">ZLogNotice</span><span class="p">(</span><span class="s">&quot;HTTP Server init&quot;</span><span class="p">);</span>
      <span class="p">[[</span><span class="n">CommandServer</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">initialize</span><span class="p">];</span>
    <span class="p">}];</span>

    <span class="c1">// start/stop server for background</span>
    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserverForName</span><span class="p">:</span><span class="n">UIApplicationDidEnterBackgroundNotification</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">queue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="n">note</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">ZLogNotice</span><span class="p">(</span><span class="s">&quot;HTTP Server stop&quot;</span><span class="p">);</span>
      <span class="p">[[</span><span class="n">CommandServer</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">stopServer</span><span class="p">];</span>
    <span class="p">}];</span>
    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserverForName</span><span class="p">:</span><span class="n">UIApplicationWillEnterForegroundNotification</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">queue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="n">note</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">ZLogNotice</span><span class="p">(</span><span class="s">&quot;HTTP Server start&quot;</span><span class="p">);</span>
      <span class="p">[[</span><span class="n">CommandServer</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">startServer</span><span class="p">];</span>
    <span class="p">}];</span>

  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">%</span><span class="n">end</span>

<span class="o">%</span><span class="n">end</span>    <span class="c1">// end of group InitHTTPServer</span>


<span class="o">%</span><span class="n">ctor</span> <span class="p">{</span>
  <span class="bp">NSAutoreleasePool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSAutoreleasePool</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>

  <span class="n">ZLogPrint</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">);</span>
  <span class="o">%</span><span class="n">init</span><span class="p">(</span><span class="n">InitHTTPServer</span><span class="p">);</span>

  <span class="p">[</span><span class="n">pool</span> <span class="n">drain</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>%hook UIApplication的init，在其中添加3个事件：</p>

<ol>
<li>UIApplicationDidFinishLaunchingNotification:  启动完成后，初始化 CommandServer</li>
<li>UIApplicationDidEnterBackgroundNotification:  进入后台时停止 CommandServer (后台运行好像要换GCDWebServer)</li>
<li>UIApplicationWillEnterForegroundNotification: 从后台唤醒时，重新启动 CommandServer</li>
</ol>

<h2>Link with CocoaHTTPServer</h2>

<p>Makefile如下：</p>
<div class="highlight"><pre><code class="language-makefile" data-lang="makefile"><span class="nv">ARCHS</span> <span class="o">:=</span> armv7 arm64

<span class="cp">include theos/makefiles/common.mk</span>

<span class="nv">THEOS_PACKAGE_DIR</span><span class="o">=</span>./debs

<span class="nv">TWEAK_NAME</span> <span class="o">=</span> commandServer
<span class="nv">testHttpServer_FILES</span> <span class="o">=</span> Tweak.xm <span class="k">$(</span>wildcard CommandServer/*.m<span class="k">)</span>
<span class="nv">testHttpServer_CFLAGS</span> <span class="o">+=</span> -I./
<span class="nv">testHttpServer_LDFLAGS</span> <span class="o">+=</span> -L./ -lCocoaHTTPServer -lxml2
<span class="nv">testHttpServer_FRAMEWORKS</span> <span class="o">=</span> UIKit CFNetwork Security CoreGraphics

<span class="cp">include $(THEOS_MAKE_PATH)/tweak.mk</span>

<span class="nf">lib</span><span class="o">::</span>
    rm -f libCocoaHTTPServer.a
    <span class="nb">cd </span>CocoaHTTPServer/<span class="p">;</span> ./build.sh

<span class="nf">after-clean</span><span class="o">::</span>
    rm -f <span class="k">$(</span>THEOS_PACKAGE_DIR<span class="k">)</span>/*.deb
</code></pre></div>
<p>链接CocoaHTTPServer需要libCocoaHTTPServer.a和libxml2.a，并且用到 UIKit CFNetwork Security CoreGraphics 四个FRAMEWORK。</p>

<p>之后make package，用 cinject 加载dylib后，就可以通过http://<IP>:8080访问到index.html了</p>
]]></content:encoded>
      <dc:date>2014-11-19T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>自己动手从 iOS Keychain 中恢复保存的Wifi密码</title>
      <link>http://blog.imaou.com/theos/2014/11/12/retrieve_wifi_password_from_keychain.html</link>
      <description><![CDATA[最近在学用Theos编写插件和小工具，本来打算自己动手写个类似Wifi Passwords的工具，用于查看保存在iOS设备中的Wifi密码的。不过搜了下居然没找到具体的实现方法。
]]></description>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/theos/2014/11/12/retrieve_wifi_password_from_keychain.html</guid>
      <content:encoded><![CDATA[<p>最近在学用Theos编写插件和小工具，本来打算自己动手写个类似<a href="http://modmyi.com/cydia/com.malcolmhall.wifipasswords">Wifi Passwords</a>的工具，用于查看保存在iOS设备中的Wifi密码的。不过搜了下居然没找到具体的实现方法。</p>

<p>本来以为iOS和Android一样保存在某个plist里(Android的Wifi密码明文保存在/data/misc/wifi/wpa_supplicant.conf)，不过Google了才发现iOS虽然在 /private/var/preferences/SystemConfiguration/com.apple.wifi.plist 里保存了Wifi信息，但密码却是存储在Keychain中的，而且网上没有给出具体的读取办法。</p>

<p>对Keychain Services不熟，只好用 Hopper Disassembler 反汇编WiFiPasswords自己看了。代码不多，大部分都是和UITableView相关的内容，排除掉这些很快发现 -[RootViewController refresh] 就是要找的函数：</p>

<p><img src="http://blog.imaou.com/images/201411/wifi_password_01.png" alt="StoryBoard"></p>

<p>这里读取了 /private/var/preferences/SystemConfiguration/com.apple.wifi.plist 的List of known networks中的信息(意义不明，实际上直接用SecItemCopyMatching也是能获取到Wifi名的，而且它后面也这样做了)。到机器上用plutil查看该plist文件，会看到类似下面的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">    &quot;List of known networks&quot; =     (
                {
            &quot;80211D_IE&quot; =             {
                &quot;IE_KEY_80211D_COUNTRY_CODE&quot; = JP;
            };
            &quot;80211W_ENABLED&quot; = 0;
            AGE = 41;
            &quot;AP_MODE&quot; = 2;
            &quot;ASSOC_FLAGS&quot; = 1;
            &quot;BEACON_INT&quot; = 20;
            BSSID = &quot;00:2e:1f:54:1d:82&quot;;
            CAPABILITIES = 1041;
            CHANNEL = 12;
        ...
</code></pre></div>
<p>这个plist里存储的是Wifi的属性等信息，不过BSSID和信道之类的这里用不上。继续往后看就能发现关键数据：</p>

<p><img src="http://blog.imaou.com/images/201411/wifi_password_02.png" alt="StoryBoard"></p>

<p>先构造一个NSMutableArray，内容为 [kSecClass, kSecAttrService, kSecReturnAttributes, kSecMatchLimit]</p>

<p><img src="http://blog.imaou.com/images/201411/wifi_password_03.png" alt="StoryBoard"></p>

<p>接着构造另一个NSMutableArray，内容为 [kSecClassGenericPassword, @&quot;AirPort&quot;, kCFBooleanTrue, kSecMatchLimitAll]。根据接着调用的 <a href="https://developer.apple.com/library/ios/documentation/security/reference/keychainservices/index.html#//apple_ref/c/func/SecItemCopyMatching">SecItemCopyMatching</a> 可以得知，这个数据是
参数1 CFDictionaryRef query 的内容，其作用是查询 Keychain 中 kSecClass = kSecClassGenericPassword，且 kSecAttrService 为 AirPort 的属性。</p>

<p>Apple的 <a href="https://developer.apple.com/library/ios/documentation/security/reference/keychainservices/index.html#//apple_ref/doc/uid/TP30000898-CH4g-SW7">Keychain Item Class Keys and Values</a> 里有详细介绍这些属性的含义。<a href="https://developer.apple.com/library/ios/documentation/security/reference/keychainservices/index.html#//apple_ref/doc/constant_group/Item_Class_Value_Constants">kSecClass</a> 还可以是这些值：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">CFTypeRef kSecClassGenericPassword ;
CFTypeRef kSecClassInternetPassword ;
CFTypeRef kSecClassCertificate ;
CFTypeRef kSecClassKey ;
CFTypeRef kSecClassIdentity;
</code></pre></div>
<p>比如网络密码，证书等等。这里枚举Wifi密码只用到了 kSecClassGenericPassword。</p>

<p>参考<a href="http://stackoverflow.com/questions/10966969/enumerate-all-keychain-items-in-my-ios-application">StackOverflow中SecItemCopyMatching的用法例子</a>，很容易还原出上面的代码。用Theos的nic.pl创建一个tools项目，输入验证用代码：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &lt;Security/Security.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">query</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>

    <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClassGenericPassword</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClass</span><span class="p">];</span>
    <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecMatchLimitAll</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecMatchLimit</span><span class="p">];</span>
    <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="s">@&quot;AirPort&quot;</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecAttrService</span><span class="p">];</span>
    <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kCFBooleanTrue</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecReturnAttributes</span><span class="p">];</span>

    <span class="n">CFTypeRef</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">OSStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">SecItemCopyMatching</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">query</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">errSecSuccess</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[ERROR] SecItemCopyMatching() failed! error = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">status</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">wifi_list</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">result</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wifi_list</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">wifi</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSDictionary</span><span class="o">*</span><span class="p">)</span><span class="n">wifi_list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

        <span class="bp">NSString</span> <span class="o">*</span><span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">wifi</span><span class="p">];</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">output</span> <span class="nl">cStringUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">CFRelease</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>make后传到iOS里运行，然后顺利的失败了。提示-34018：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[ERROR] SecItemCopyMatching() failed! error = -34018
</code></pre></div>
<p>再次请出Google大神，得知SecItemCopyMatching返回-34018(errSecMissingEntitlement)是权限问题。
用 ldid -e WiFiPasswords 查看entitlement，发现它比常规程序多了 keychain-access-groups 权限。于是编辑一个 ent.xml 如下：</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict&gt;</span>
    <span class="nt">&lt;key&gt;</span>application-identifier<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;string&gt;</span>com.zzz.my-idevice-tools<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;key&gt;</span>get-task-allow<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;true/&gt;</span>
    <span class="nt">&lt;key&gt;</span>keychain-access-groups<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;array&gt;</span>
        <span class="nt">&lt;string&gt;</span>apple<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;/array&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</code></pre></div>
<p>用 ldid -Sent.xml <app> 签上带keychain-access-groups的签名后运行，成功打印出Wifi信息：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
    accc = &quot;&lt;SecAccessControlRef: 0x1566a4c0&gt;&quot;;
    acct = Magdalene;
    agrp = apple;
    cdat = &quot;2014-11-02 04:56:39 +0000&quot;;
    mdat = &quot;2014-11-02 04:56:39 +0000&quot;;
    pdmn = ck;
    svce = AirPort;
    sync = 0;
    tomb = 0;
}
</code></pre></div>
<p>acct就是kSecAttrAccount，这里也就是Wifi名 (而accc是指向 strcut SecAccessControl 的指针，只不过网上搜了很久也没找到这个结构体的定义；不过这里用不到，pass)</p>

<p>注意，ldid签名如果失败，一般是codesign<em>allocate没有用对导致的。在MacOS上/usr/bin/codesign</em>allocate并非iOS用的版本，需要手工export一下(注意替换为你的Xcode安装目录)：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">export CODESIGN_ALLOCATE=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate
ldid -Sent.xml obj/wifi_passwords
</code></pre></div>
<p>已经在获取到的 NSDictionary 中找到Wifi的名称(acct)，就可以开始查询对应的密码了。获取密码的参数为：</p>

<p><img src="http://blog.imaou.com/images/201411/wifi_password_04.png" alt="StoryBoard"></p>

<p>和之前获取Wifi名类似，将kSecReturnAttributes换成了kSecReturnData，另外有kSecAttrAccount(acct)也不需要搜索了；kSecReturnData的返回为NSData，里面就是对应Wifi的密码。</p>

<p>完成后的恢复Wifi密码的函数如下：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="kt">void</span> <span class="nf">keychain_wifi_passwords</span><span class="p">()</span>
<span class="p">{</span>
    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">acct_name</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>

    <span class="c1">// form KeyChain get AirPort.acct (Wifi Name)</span>
    <span class="p">{</span>
        <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">query</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>

        <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClassGenericPassword</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClass</span><span class="p">];</span>
        <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecMatchLimitAll</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecMatchLimit</span><span class="p">];</span>
        <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)@</span><span class="n">KEYCHAIN_SVCE_AIRPORT</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecAttrService</span><span class="p">];</span>
        <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kCFBooleanTrue</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecReturnAttributes</span><span class="p">];</span>

        <span class="n">CFTypeRef</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">OSStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">SecItemCopyMatching</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">query</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">errSecSuccess</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[ERROR] SecItemCopyMatching() failed! error = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">status</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">wifi_list</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">result</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wifi_list</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">wifi</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSDictionary</span><span class="o">*</span><span class="p">)</span><span class="n">wifi_list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="c1">// get wifi name</span>
            <span class="p">[</span><span class="n">acct_name</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">wifi</span><span class="p">[@</span><span class="n">KEYCHAIN_ACCT_NAME</span><span class="p">]];</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">CFRelease</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// get password for each AirPort.acct</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">acct</span> <span class="k">in</span> <span class="n">acct_name</span><span class="p">)</span> <span class="p">{</span>
            <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">query</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>

            <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClassGenericPassword</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClass</span><span class="p">];</span>
            <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)@</span><span class="n">KEYCHAIN_SVCE_AIRPORT</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecAttrService</span><span class="p">];</span>
            <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">acct</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecAttrAccount</span><span class="p">];</span>
            <span class="p">[</span><span class="n">query</span> <span class="nl">setObject</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kCFBooleanTrue</span> <span class="nl">forKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecReturnData</span><span class="p">];</span>

            <span class="n">CFTypeRef</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
            <span class="n">OSStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">SecItemCopyMatching</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">query</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">errSecSuccess</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[ERROR] SecItemCopyMatching() failed! error = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">status</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="bp">NSData</span> <span class="o">*</span><span class="n">password</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">result</span><span class="p">;</span>
            <span class="bp">NSString</span> <span class="o">*</span><span class="n">output</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData</span><span class="p">:</span><span class="n">password</span> <span class="nl">encoding</span><span class="p">:</span><span class="n">NSASCIIStringEncoding</span><span class="p">];</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">acct</span> <span class="nl">cStringUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">],</span> <span class="p">[</span><span class="n">output</span> <span class="nl">cStringUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">CFRelease</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>make编译并make ldid签上ent.xml后，传入iOS会输出Keychain中保存的Wifi名和密码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root# ./wifi_passwords
Magdalene: Retrieve Wifi password.
iPhone: 123456
</code></pre></div>
<p>剩下就是给控制台程序加个界面了。完整Theos工程代码见：<a href="https://github.com/upbit/My-iDevice-Tools/blob/master/wifi_passwords.mm">https://github.com/upbit/My-iDevice-Tools/blob/master/wifi_passwords.mm</a></p>

<p>初次接触Keychain，如果文中有错误之处，欢迎拍砖:)</p>
]]></content:encoded>
      <dc:date>2014-11-12T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Tweak开发 - 为 SSL Kill Switch 增加AppList</title>
      <link>http://blog.imaou.com/theos/2014/11/10/SSL_Kill_Switch_add_AppList.html</link>
      <description><![CDATA[调试过HTTPS请求的都知道，如果直接用Fiddler decode目标流量，大部分App都会拒绝服务器的响应，这是iOS的证书检查在作怪。于是有了iOS SSL Kill Switch，一个可以干掉这个证书检查并让你顺利追踪HTTPS请求的Cydia插件。
]]></description>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/theos/2014/11/10/SSL_Kill_Switch_add_AppList.html</guid>
      <content:encoded><![CDATA[<p>调试过HTTPS请求的都知道，如果直接用Fiddler decode目标流量，大部分App都会拒绝服务器的响应，这是iOS的证书检查在作怪。于是有了<a href="https://github.com/iSECPartners/ios-ssl-kill-switch">iOS SSL Kill Switch</a>，一个可以干掉这个证书检查并让你顺利追踪HTTPS请求的Cydia插件。</p>

<p>不过最近手痒升级了iOS8，SSL Kill Switch 作者没明说是否能作用于iOS8，另外这个插件只有一个全局Hook开关，而我往往只想对要追踪的App关闭证书检查。于是自己动手给 SSL Kill Switch
加了个AppList 来选择要Hook的应用（比如用户App或天气等系统应用），并且部署到iOS8.1上测试了下：</p>

<p><span style="color:#f00;"><strong>deb下载：</strong></span><a href="http://blog.imaou.com/SSLKillSwitch/com.isecpartners.nabla.sslkillswitch_v0.61-iOS_8.1.deb">com.isecpartners.nabla.sslkillswitch<em>v0.61-iOS</em>8.1.deb</a> - (兼容iOS8.1，需要<strong>AppList</strong>)</p>

<p><img src="http://blog.imaou.com/SSLKillSwitch/screenshot.png" alt="SSL Kill Switch"></p>

<h2>Tweak修改过程</h2>

<p>开发Cydia插件和应用，目前主流的好像都是Theos了。Mac下<a href="http://iphonedevwiki.net/index.php/Theos/Setup">配置环境</a>极为简单，就不重复Theos的安装方法了。</p>

<h3>SSL Kill Switch</h3>

<p>这个插件在v0.5版后，采用Hook <strong>SSLCreateContext</strong> 增加 <strong>SSLSetSessionOption</strong>: <a href="https://developer.apple.com/library/IOs/documentation/Security/Reference/secureTransportRef/index.html#//apple_ref/c/econst/kSSLSessionOptionBreakOnServerAuth">kSSLSessionOptionBreakOnServerAuth</a>选项来实现关闭本地证书检查，关于这个选项的解释如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">kSSLSessionOptionBreakOnServerAuth

Enables returning from SSLHandshake (with a result of errSSLServerAuthCompleted) when the server authentication portion of the handshake is complete to allow your application to perform its own certificate verification.

Note that in iOS (all versions) and OS X 10.8 and later, setting this option disables Secure Transport&#39;s automatic verification of server certificates.

If you set this option, your application should perform its own certificate verification when errSSLServerAuthCompleted is returned before continuing with the handshake.

Available in iOS 5.0 and later.
</code></pre></div>
<p>Secure Transport Reference里提到这个是用于自行实现证书校验的，设置后会关闭Secure Transport的自动server端证书校验。</p>

<p>理解这一点后，<a href="https://github.com/iSECPartners/ios-ssl-kill-switch/blob/master/Tweak.xm">SSL Kill Switch的代码</a>就变得清晰易懂了。</p>

<ol>
<li><strong>%ctor</strong>里Hook <strong>SSLHandshake/SSLSetSessionOption</strong> 和 <strong>SSLCreateContext</strong>；</li>
<li>Hook <strong>SSLCreateContext</strong>是为了增加 <strong>SSLSetSessionOption</strong>(sslContext, kSSLSessionOptionBreakOnServerAuth, true) 来关闭自带的证书检查；</li>
<li>Hook <strong>SSLSetSessionOption</strong>则是为了防止外部修改 kSSLSessionOptionBreakOnServerAuth；</li>
<li>Hook <strong>SSLHandshake</strong>是因为设置 kSSLSessionOptionBreakOnServerAuth 后，需要处理errSSLServerAuthCompleted (其实此时只要调用原来的SSLHandshake继续处理就行)；</li>
</ol>

<h3>AppList</h3>

<p><a href="https://github.com/rpetrich/AppList">AppList</a>是个辅助获取已安装程序列表的插件，自带sample里演示了如何利用PreferenceLoader在设置中增加一个App列表，并可以供用户设置。用在这里，刚好适合SSL Kill Switch选取需要Hook的程序。</p>

<p>首先复制sample下的application.m，这个是AppList显示Preference时需要的cell等相关代码，因为不需要修改Cell的外观，这里保持不变。修改Makefile增加如下内容：</p>
<div class="highlight"><pre><code class="language-makefile" data-lang="makefile"><span class="c"># application</span>
<span class="nv">APPLICATION_NAME</span> <span class="o">=</span> SSLKillSwitchSettings
<span class="nv">SSLKillSwitchSettings_FILES</span> <span class="o">=</span> application.m

<span class="nv">SSLKillSwitchSettings_FRAMEWORKS</span> <span class="o">=</span> UIKit CoreGraphics
<span class="nv">SSLKillSwitchSettings_PRIVATE_FRAMEWORKS</span> <span class="o">=</span> Preferences
<span class="nv">SSLKillSwitchSettings_LIBRARIES</span> <span class="o">=</span> applist

<span class="cp">include $(THEOS_MAKE_PATH)/application.mk</span>
</code></pre></div>
<p>这样打包时就会将这个app和tweak打到同一个deb中了。这个app用于显示设置里的AppList，并将设置存储于指定的plist中。修改 layout/Library/PreferenceLoader/Preferences/SSLKillSwitch_prefs.plist 文件，适配AppList的内容：</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="err">entry</span> <span class="err">=</span> <span class="err">{</span>
        <span class="err">bundle</span> <span class="err">=</span> <span class="err">AppList;</span>
        <span class="err">cell</span> <span class="err">=</span> <span class="err">PSLinkCell;</span>
        <span class="err">icon</span> <span class="err">=</span> <span class="nt">&quot;/Library/PreferenceLoader/Preferences/SSLKillSwitch.png&quot;</span><span class="err">;</span>
        <span class="err">isController</span> <span class="err">=</span> <span class="mi">1</span><span class="err">;</span>
        <span class="err">label</span> <span class="err">=</span> <span class="s2">&quot;SSL Kill Switch&quot;</span><span class="err">;</span>
        <span class="err">ALSettingsPath</span> <span class="err">=</span> <span class="s2">&quot;/var/mobile/Library/Preferences/com.isecpartners.nabla.SSLKillSwitchSettings.plist&quot;</span><span class="err">;</span>
        <span class="err">ALSettingsKeyPrefix</span> <span class="err">=</span> <span class="s2">&quot;Settings-&quot;</span><span class="err">;</span>
        <span class="err">ALChangeNotification</span> <span class="err">=</span> <span class="s2">&quot;com.rpetrich.applist.sample.notification&quot;</span><span class="err">;</span>
        <span class="err">ALAllowsSelection</span> <span class="err">=</span> <span class="mi">1</span><span class="err">;</span>
        <span class="err">ALSectionDescriptors</span> <span class="err">=</span> <span class="err">(</span>
            <span class="p">{</span>
                <span class="err">items</span> <span class="err">=</span> <span class="err">(</span>
                    <span class="err">{</span>
                        <span class="err">text</span> <span class="err">=</span> <span class="nt">&quot;Disable Certificate Validation&quot;</span><span class="err">;</span>
                        <span class="err">image</span> <span class="err">=</span> <span class="s2">&quot;/Library/PreferenceLoader/Preferences/SSLKillSwitch.png&quot;</span><span class="err">;</span>
                    <span class="p">},</span>
                <span class="err">);</span>
                <span class="nt">&quot;footer-title&quot;</span> <span class="err">=</span> <span class="s2">&quot;SSL Kill Switch v0.61 - iSEC Partners&quot;</span><span class="err">;</span>
            <span class="p">}</span><span class="err">,</span>
            <span class="p">{</span>
                <span class="err">title</span> <span class="err">=</span> <span class="nt">&quot;User Applications&quot;</span><span class="err">;</span>
                <span class="err">predicate</span> <span class="err">=</span> <span class="s2">&quot;isSystemApplication = FALSE&quot;</span><span class="err">;</span>
                <span class="s2">&quot;cell-class-name&quot;</span> <span class="err">=</span> <span class="err">ALSwitchCell;</span>
                <span class="s2">&quot;icon-size&quot;</span> <span class="err">=</span> <span class="mi">29</span><span class="err">;</span>
                <span class="s2">&quot;suppress-hidden-apps&quot;</span> <span class="err">=</span> <span class="mi">1</span><span class="err">;</span>
            <span class="p">}</span><span class="err">,</span>
            <span class="p">{</span>
                <span class="err">title</span> <span class="err">=</span> <span class="nt">&quot;System Applications&quot;</span><span class="err">;</span>
                <span class="err">predicate</span> <span class="err">=</span> <span class="s2">&quot;isSystemApplication = TRUE&quot;</span><span class="err">;</span>
                <span class="s2">&quot;cell-class-name&quot;</span> <span class="err">=</span> <span class="err">ALSwitchCell;</span>
                <span class="s2">&quot;icon-size&quot;</span> <span class="err">=</span> <span class="mi">29</span><span class="err">;</span>
                <span class="s2">&quot;suppress-hidden-apps&quot;</span> <span class="err">=</span> <span class="mi">1</span><span class="err">;</span>
                <span class="s2">&quot;footer-title&quot;</span> <span class="err">=</span> <span class="s2">&quot;2012-2014 nabla-c0d3&quot;</span><span class="err">;</span>
            <span class="p">}</span><span class="err">,</span>
        <span class="err">);</span>
    <span class="err">};</span>
<span class="err">}</span>
</code></pre></div>
<p>此文件可以直接用json格式，也可以用plutil转为XML。主要是设置 <strong>ALSettingsPath</strong> 为保存设置的plist位置，并指定 <strong>ALSettingsKeyPrefix</strong> 这个设置前缀，其他照常处理。这里可以先写个简单的plist，然后放到机器上的 /Library/PreferenceLoader/Preferences 里慢慢调，其他可用的Cell类型和属性名，可以参考 <a href="http://iphonedevwiki.net/index.php/Preferences_specifier_plist">Preferences specifier plist</a> 这个wiki。</p>

<p>另外 <strong>ALSectionDescriptors</strong> 里注意不能出现 PSSwitchCell，也许是因为ALSwitchCell是继承于PSSwitchCell，加上会导致异常。本来想自定义一个单独的UISwitch，不过加上后就变成没有图标的程序列表了...</p>

<p>最后在Tweak.m里加上bundleIdentifier获取与plist查询功能，就实现了针对单个App增加Hook的SSL Kill Switch。代码fork在<a href="https://github.com/upbit/ios-ssl-kill-switch">GitHub</a>，这是编译好的deb：</p>

<p><span style="color:#f00;"><strong>deb下载：</strong></span><a href="http://blog.imaou.com/SSLKillSwitch/com.isecpartners.nabla.sslkillswitch_v0.61-iOS_8.1.deb">com.isecpartners.nabla.sslkillswitch<em>v0.61-iOS</em>8.1.deb</a> - (兼容iOS8.1，需要<strong>AppList</strong>)</p>
]]></content:encoded>
      <dc:date>2014-11-10T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Pixiv RankingLog for iOS 开发手记02 (XCode6/iOS8.1)</title>
      <link>http://blog.imaou.com/opensource/2014/11/07/RankingLog_dev_notes2.html</link>
      <description><![CDATA[继续Pixiv RankingLog for iOS 开发手记01，这篇重点放在StoryBoard中遇到的问题。
]]></description>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/11/07/RankingLog_dev_notes2.html</guid>
      <content:encoded><![CDATA[<p>继续<a href="http://blog.imaou.com/opensource/2014/11/07/RankingLog_dev_notes1.html">Pixiv RankingLog for iOS 开发手记01</a>，这篇重点放在StoryBoard中遇到的问题。</p>

<p><img src="http://blog.imaou.com/images/201411/dev_RankingLog_03.png" alt="StoryBoard"></p>

<p>这是RankingLog的StoryBoard全貌，首先是从RankingLogWaterfallViewController的主面板，其中一个DatePickerSegue跳转DatePickerViewController。另外两个跳转路径则是左上角的收藏按钮BookmarkSegue，以及点击Cell时的ImageDetail：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;ImageDetail&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">PixivDetailScrollImageViewController</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">PixivDetailScrollImageViewController</span> <span class="o">*</span><span class="n">ivc</span> <span class="o">=</span> <span class="p">(</span><span class="n">PixivDetailScrollImageViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">;</span>
            <span class="bp">NSArray</span> <span class="o">*</span><span class="n">indexPaths</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="n">indexPathsForSelectedItems</span><span class="p">];</span>
            <span class="bp">NSIndexPath</span> <span class="o">*</span><span class="n">indexPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">indexPaths</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
            <span class="n">ivc</span><span class="p">.</span><span class="n">illusts</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">illusts</span><span class="p">;</span>
            <span class="n">ivc</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;DatePickerSegue&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">DatePickerViewController</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">DatePickerViewController</span> <span class="o">*</span><span class="n">dpvc</span> <span class="o">=</span> <span class="p">(</span><span class="n">DatePickerViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">;</span>
            <span class="c1">// modeArray for RankingLog</span>
            <span class="n">dpvc</span><span class="p">.</span><span class="n">modeArray</span> <span class="o">=</span> <span class="l">@[</span>
                <span class="s">@&quot;daily&quot;</span><span class="p">,</span> <span class="s">@&quot;weekly&quot;</span><span class="p">,</span> <span class="s">@&quot;monthly&quot;</span><span class="p">,</span> <span class="s">@&quot;male&quot;</span><span class="p">,</span> <span class="s">@&quot;female&quot;</span><span class="p">,</span> <span class="s">@&quot;rookie&quot;</span><span class="p">,</span>
                <span class="s">@&quot;daily_r18&quot;</span><span class="p">,</span> <span class="s">@&quot;weekly_r18&quot;</span><span class="p">,</span> <span class="s">@&quot;male_r18&quot;</span><span class="p">,</span> <span class="s">@&quot;female_r18&quot;</span><span class="p">,</span> <span class="s">@&quot;r18g&quot;</span><span class="p">,</span>
            <span class="l">]</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;BookmarkSegue&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">BookmarksWaterfallViewController</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">BookmarksWaterfallViewController</span> <span class="o">*</span><span class="n">bvc</span> <span class="o">=</span> <span class="p">(</span><span class="n">BookmarksWaterfallViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">;</span>
            <span class="n">bvc</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="p">[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">user_id</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>PixivDetailScrollImageViewController</h2>

<p>直接从自定义Cell中拖一个Segue到 SDWebScrollImageViewController 控制的视图，这是在StoryBoard里自定义的优势。不过用SDWebScrollImageViewController显示具体图片还略显不足，定义一个PixivDetailScrollImageViewController继承于SDWebScrollImageViewController。这里需要处理的内容有如下几个：</p>

<ol>
<li>处理SAPIIllust到PAPIIllust的转换（SAPIIllust是获取不到大图地址的，也没有收藏ID等详细信息）；</li>
<li>重载 reloadImage: 增加图片预载；</li>
<li>响应导出按钮的点击，以及实现单击全屏显示图片；</li>
<li>增加一个ContainerView，用于显示作者信息/Tags以及收藏按钮；</li>
</ol>

<h3>处理SAPIIllust到PAPIIllust的转换</h3>

<p>先覆盖掉父类的 reloadImage: 异步的在下载图片前，检查并尝试获取PAPIIllust内容。定义一个replaceSAPIIllustToPAPIIllustAtIndex:函数，将指定index位置的SAPIIllust，调用 PAPI_works: 后替换到self.illusts的index位置：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">replaceSAPIIllustToPAPIIllustAtIndex:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span>
<span class="p">{</span>
    <span class="kt">id</span> <span class="n">raw_illust</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">illusts</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">((</span><span class="nb">self</span><span class="p">.</span><span class="n">showLargeSize</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">raw_illust</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">SAPIIllust</span> <span class="k">class</span><span class="p">]]))</span> <span class="p">{</span>
        <span class="n">SAPIIllust</span> <span class="o">*</span><span class="n">SAPI_illust</span> <span class="o">=</span> <span class="p">(</span><span class="n">SAPIIllust</span> <span class="o">*</span><span class="p">)</span><span class="n">raw_illust</span><span class="p">;</span>
        <span class="n">PAPIIllust</span> <span class="o">*</span><span class="n">PAPI_illust</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">PAPI_works</span><span class="p">:</span><span class="n">SAPI_illust</span><span class="p">.</span><span class="n">illustId</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">PAPI_illust</span><span class="p">)</span> <span class="p">{</span>
            <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">new_illusts</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithArray</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span><span class="p">];</span>
            <span class="p">[</span><span class="n">new_illusts</span> <span class="nl">replaceObjectAtIndex</span><span class="p">:</span><span class="n">index</span> <span class="nl">withObject</span><span class="p">:</span><span class="n">PAPI_illust</span><span class="p">];</span>
            <span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="o">=</span> <span class="n">new_illusts</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadImage</span>
<span class="p">{</span>
    <span class="k">__weak</span> <span class="n">PixivDetailScrollImageViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">asyncBlockingQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
        <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">replaceSAPIIllustToPAPIIllustAtIndex</span><span class="p">:</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">index</span><span class="p">];</span>

        <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">onMainQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
            <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">illust_record</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">illustRecordWithIndex</span><span class="p">:</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">index</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">illust_record</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">realShowImageWithBaseInfo</span><span class="p">:</span><span class="n">illust_record</span><span class="p">];</span>
        <span class="p">}];</span>
    <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<p>之后就是按常规流程，回到main queue上调用 realShowImageWithBaseInfo: 下载原图。
这里用 asyncBlockingQueue: 将 replaceSAPIIllustToPAPIIllustAtIndex: 异步化，是为了保证获取PAPIIllust和下载图片依次执行，并且不会阻塞主线程。另外在block中调用super而不引起循环引用貌似很复杂，索性干脆重写了reloadImage。</p>

<h3>重载 reloadImage: 增加图片预载</h3>

<p>reloadImage:的事情还没完，因为是图片浏览类应用，提前预载1-2张图片是必备的功能。定义preloadImageWithBaseInfo:index:用来添加指定图片到下载队列，然后在下载当前index图片同时，异步的发起后2张图的预载：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">preloadImageWithBaseInfo:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">illust_record</span> <span class="nf">index:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span>
<span class="p">{</span>
    <span class="bp">NSInteger</span> <span class="n">illust_id</span> <span class="o">=</span> <span class="p">[</span><span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;illust_id&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">image_url</span> <span class="o">=</span> <span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;image_url&quot;</span><span class="p">];</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;title&quot;</span><span class="p">];</span>

    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot; preload(%@, id=%ld): %@&quot;</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">,</span> <span class="n">image_url</span><span class="p">);</span>

    <span class="p">[</span><span class="nb">self</span> <span class="nl">simulatePixivRefererAndUserAgent</span><span class="p">:</span><span class="n">illust_id</span><span class="p">];</span>

    <span class="k">__weak</span> <span class="n">PixivDetailScrollImageViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="n">SDWebImageManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">SDWebImageManager</span> <span class="n">sharedManager</span><span class="p">];</span>
    <span class="p">[</span><span class="n">manager</span> <span class="nl">downloadImageWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">image_url</span><span class="p">]</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span>
                         <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">receivedSize</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">expectedSize</span><span class="p">)</span> <span class="p">{</span>
                             <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot; preload id=%ld: %.1f%%&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">,</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">receivedSize</span><span class="o">/</span><span class="n">expectedSize</span><span class="o">*</span><span class="mi">100</span><span class="p">);</span>
                         <span class="p">}</span>
                        <span class="nl">completed</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">SDImageCacheType</span> <span class="n">cacheType</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">finished</span><span class="p">,</span> <span class="bp">NSURL</span> <span class="o">*</span><span class="n">imageURL</span><span class="p">)</span> <span class="p">{</span>
                            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot; preload id=%ld: completed&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">);</span>
                        <span class="p">}];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadImage</span>
<span class="p">{</span>
    <span class="k">__weak</span> <span class="n">PixivDetailScrollImageViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="p">...</span>

    <span class="c1">// preload next 2 illust</span>
    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">index</span><span class="o">+</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">self</span><span class="p">.</span><span class="n">illusts</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// TO-DO: fetch next page here</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">asyncBlockingQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
            <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">replaceSAPIIllustToPAPIIllustAtIndex</span><span class="p">:</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">index</span><span class="o">+</span><span class="n">i</span><span class="p">];</span>

            <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">onMainQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
                <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">preload_record</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">illustRecordWithIndex</span><span class="p">:</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">index</span><span class="o">+</span><span class="n">i</span><span class="p">];</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">preload_record</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;safeGetIllustBaseInfo(%ld) error&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)(</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">index</span><span class="o">+</span><span class="n">i</span><span class="p">));</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">preloadImageWithBaseInfo</span><span class="p">:</span><span class="n">preload_record</span> <span class="nl">index</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}];</span>
        <span class="p">}];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>这里最初是用的UIImageView，这样就可以像Pixiv客户端那样，滑动时有个切入效果。不过这么做UI会变得相当复杂，这里就简单的用了SDWebImageManager。需要注意的是，SDWebImage默认queue中同时只有2个图片在下载，因此下载原图时需要将options设上SDWebImageHighPriority避免翻页后迟迟得不到响应。</p>

<p>这里还留了个坑，在查看图片时如果illusts列表已经翻到尾部，必须退回到Waterfall下才会继续获取。如果最初将MVC思想贯彻得彻底点，将翻页获取写入Model中，就可以在缺少预载内容时，在图片浏览状态下同步发起翻页了。</p>

<h3>响应导出按钮的点击等UI操作</h3>

<p>先说最简单的单击全屏吧，覆盖掉父类的singleTap:即可。隐藏后记得updateZoom:一下，重新使图片适应新的高度：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">singleTap:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">setNavigationBarHidden</span><span class="p">:</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">isNavigationBarHidden</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">isNavigationBarHidden</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">contantButtomView</span> <span class="nl">setHidden</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">contantButtomView</span> <span class="nl">setHidden</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nb">self</span> <span class="n">updateZoom</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>导出则分为两个部分，一个是导出图片到Documents/下，另一个则是导出到相册。</p>

<p>导出图片到文件比较简单，判断图片后缀名然后 UIImagePNGRepresentation(image) writeToFile:atomically: 或 UIImageJPEGRepresentation(image, 清晰度) writeToFile:atomically: 即可。将操作异步到后台执行，最后用SVProgressHUD显示个提示：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">exportImageToDocuments:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span> <span class="nf">filename:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">filename</span> <span class="nf">ext:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">ext</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;export to: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">documentsPathForFileName</span><span class="p">:</span><span class="n">filename</span><span class="p">]);</span>

    <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="nl">showWithStatus</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Export &#39;%@&#39; to Documents&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="p">]];</span>

    <span class="kt">dispatch_queue_t</span> <span class="n">exportQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;export illust&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">exportQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="c1">// export to Documents/</span>
        <span class="kt">BOOL</span> <span class="n">success</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">ext</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;png&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="nl">writeToFile</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">documentsPathForFileName</span><span class="p">:</span><span class="n">filename</span><span class="p">]</span> <span class="nl">atomically</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mf">0.92</span><span class="p">)</span> <span class="nl">writeToFile</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">documentsPathForFileName</span><span class="p">:</span><span class="n">filename</span><span class="p">]</span> <span class="nl">atomically</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="nl">showErrorWithStatus</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Export %@ to Documents/ failed.&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="p">]];</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="n">dismiss</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>导出到相册则需要用到ALAssetsLibrary，首先需要 #import <AssetsLibrary/AssetsLibrary.h>，接着调用 writeImageToSavedPhotosAlbum:orientation:completionBlock: 来异步的导出到相册。不过这个操作在我的iPad2上有点慢，较大的图片SVProgressHUD的圈会转很久</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">exportImageToPhotosAlbum:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span> <span class="nf">filename:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">filename</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="nl">showWithStatus</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Export &#39;%@&#39; to Photos Album&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="p">]];</span>

    <span class="c1">// export to Photos Album</span>
    <span class="bp">ALAssetsLibrary</span> <span class="o">*</span><span class="n">library</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">ALAssetsLibrary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="p">[</span><span class="n">library</span> <span class="nl">writeImageToSavedPhotosAlbum</span><span class="p">:[</span><span class="n">image</span> <span class="bp">CGImage</span><span class="p">]</span>
                              <span class="nl">orientation</span><span class="p">:(</span><span class="n">ALAssetOrientation</span><span class="p">)[</span><span class="n">image</span> <span class="n">imageOrientation</span><span class="p">]</span>
                          <span class="nl">completionBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSURL</span> <span class="o">*</span><span class="n">assetURL</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
                              <span class="c1">// on main queue</span>
                              <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                                  <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
                                      <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="nl">showErrorWithStatus</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Export error: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]]];</span>
                                  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                                      <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="n">dismiss</span><span class="p">];</span>
                                  <span class="p">}</span>
                              <span class="p">});</span>
                          <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<h3>ContainerView的更新与Segue</h3>

<p>说实话，头一次接触ContainerView，开始觉得一头雾水，最无法接受的是Embed View内的Segue是Embed View自己跳转，目前我还没找到不用代码让包含ContainerView的父窗口执行Segue的方法。总之，最后是实现了想要的效果：点击作者的头像和姓名，让整个窗口切换到该作者的作品列表页。</p>

<p>Segue名为embedView的就是ContainerView：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;embedView&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">DetailInfoContainerViewController</span> <span class="o">*</span><span class="n">dicvc</span> <span class="o">=</span> <span class="p">(</span><span class="n">DetailInfoContainerViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">;</span>
        <span class="n">dicvc</span><span class="p">.</span><span class="n">illust</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">illusts</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">index</span><span class="p">];</span>

    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;UserWorksSegue&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">UserWorksWaterfallViewController</span> <span class="o">*</span><span class="n">uwvc</span> <span class="o">=</span> <span class="p">(</span><span class="n">UserWorksWaterfallViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">;</span>
        <span class="kt">id</span> <span class="n">raw_illust</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">illusts</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">index</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">raw_illust</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">SAPIIllust</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">SAPIIllust</span> <span class="o">*</span><span class="n">illust</span> <span class="o">=</span> <span class="p">(</span><span class="n">SAPIIllust</span> <span class="o">*</span><span class="p">)</span><span class="n">raw_illust</span><span class="p">;</span>
            <span class="n">uwvc</span><span class="p">.</span><span class="n">author_id</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">authorId</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">raw_illust</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">PAPIIllust</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">PAPIIllust</span> <span class="o">*</span><span class="n">illust</span> <span class="o">=</span> <span class="p">(</span><span class="n">PAPIIllust</span> <span class="o">*</span><span class="p">)</span><span class="n">raw_illust</span><span class="p">;</span>
            <span class="n">uwvc</span><span class="p">.</span><span class="n">author_id</span> <span class="o">=</span>  <span class="n">illust</span><span class="p">.</span><span class="n">author_id</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;unknow illust %@ type at index %ld&quot;</span><span class="p">,</span> <span class="n">raw_illust</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">index</span><span class="p">);</span>
            <span class="n">uwvc</span><span class="p">.</span><span class="n">author_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>不过ContainerView的数据更新略蛋疼，prepareForSegue:只能在第一次显示时调用，之后需要这样来更新：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="n">DetailInfoContainerViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">_embedViewController</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">DetailInfoContainerViewController</span> <span class="o">*</span><span class="p">)[</span><span class="nb">self</span><span class="p">.</span><span class="n">childViewControllers</span> <span class="n">firstObject</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadImage</span>
<span class="p">{</span>
    <span class="k">__weak</span> <span class="n">PixivDetailScrollImageViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">asyncBlockingQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
        <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">replaceSAPIIllustToPAPIIllustAtIndex</span><span class="p">:</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">index</span><span class="p">];</span>

        <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">onMainQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
            <span class="p">...</span>

            <span class="c1">// update embedView for PAPIIllust</span>
            <span class="n">DetailInfoContainerViewController</span> <span class="o">*</span><span class="n">dicvc</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span> <span class="n">_embedViewController</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dicvc</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">dicvc</span><span class="p">.</span><span class="n">illust</span> <span class="o">=</span> <span class="n">weakSelf</span><span class="p">.</span><span class="n">illusts</span><span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">index</span><span class="p">];</span>
                <span class="p">[</span><span class="n">dicvc</span> <span class="n">updateEmbedView</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}];</span>
    <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<p>先用 self.childViewControllers firstObject 获取第一个ChildView，当然这里写的不严谨，没有检查Class也没有遍历ChildView，不过这样确实能取到ContainerView的实例。</p>

<p>再说上面的Segue处理，既然无法用StoryBoard绑定在ContainerView中，就在父页里埋一个看不见的Segue供ContainerView调用吧。在父页里拖一个UIButton，并命名其上的Segue为UserWorksSegue：</p>

<p><img src="http://blog.imaou.com/images/201411/dev_RankingLog_04.png" alt="UserWorksSegue"></p>

<p>注意窗口左下脚的小方框，那个UIButton就藏在ContainerView的底下，并且设置成隐藏状态。父页有了Segue就来考虑怎么触发，在ContainerView的viewDidLoad中：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
    <span class="p">...</span>

    <span class="c1">// 为带有 WithTapGesture 的View，增加Tap手势</span>
    <span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">restorationIdentifier</span> <span class="nl">rangeOfString</span><span class="p">:</span><span class="s">@&quot;WithTapGesture&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSBackwardsSearch</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">image</span> <span class="nl">addGestureRecognizer</span><span class="p">:[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">singleTap</span><span class="p">:)]];</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">label</span> <span class="nl">addGestureRecognizer</span><span class="p">:[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">singleTap</span><span class="p">:)]];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#pragma mark - Gesture Recognizer</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">singleTap:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;singleTap&quot;</span><span class="p">);</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">parentViewController</span> <span class="nl">performSegueWithIdentifier</span><span class="p">:</span><span class="s">@&quot;UserWorksSegue&quot;</span> <span class="nl">sender</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>增加单击手势，其中调用 parentViewController performSegueWithIdentifier:sender: 触发跳转。</p>

<h3>ContainerView中的进度条更新</h3>

<p>载入图片总是有个等待时间，可以像Pixiv客户端那样在中间显示进度条，不过我偏好在底部的详细信息区域显示。进度条有2个，一个蓝色的显示当前图片的下载进度，另一个绿色的则显示预载情况，这些都需要在父页的 onImageProgress:expectedSize: 和预载函数中更新。将之前NSLog函数替换为下面这样：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onImageProgress:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">receivedSize</span> <span class="nf">expectedSize:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">expectedSize</span>
<span class="p">{</span>
    <span class="c1">//NSLog(@&quot;download id=%ld: %.1f%%&quot;, (long)illust_id, (float)receivedSize/expectedSize*100);</span>
    <span class="p">[[</span><span class="nb">self</span> <span class="n">_embedViewController</span><span class="p">]</span> <span class="nl">updateDownloadProgress</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">receivedSize</span><span class="o">/</span><span class="n">expectedSize</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">preloadImageWithBaseInfo:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">illust_record</span> <span class="nf">index:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span>
<span class="p">{</span>
    <span class="bp">NSInteger</span> <span class="n">illust_id</span> <span class="o">=</span> <span class="p">[</span><span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;illust_id&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">image_url</span> <span class="o">=</span> <span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;image_url&quot;</span><span class="p">];</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;title&quot;</span><span class="p">];</span>

    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot; preload(%@, id=%ld): %@&quot;</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">,</span> <span class="n">image_url</span><span class="p">);</span>

    <span class="p">[</span><span class="nb">self</span> <span class="nl">simulatePixivRefererAndUserAgent</span><span class="p">:</span><span class="n">illust_id</span><span class="p">];</span>

    <span class="k">__weak</span> <span class="n">PixivDetailScrollImageViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="n">SDWebImageManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">SDWebImageManager</span> <span class="n">sharedManager</span><span class="p">];</span>
    <span class="p">[</span><span class="n">manager</span> <span class="nl">downloadImageWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">image_url</span><span class="p">]</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span>
                         <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">receivedSize</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">expectedSize</span><span class="p">)</span> <span class="p">{</span>
                             <span class="c1">//NSLog(@&quot; preload id=%ld: %.1f%%&quot;, (long)illust_id, (float)receivedSize/expectedSize*100);</span>
                             <span class="p">[[</span><span class="n">weakSelf</span> <span class="n">_embedViewController</span><span class="p">]</span> <span class="nl">updatePreloadProgress</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">receivedSize</span><span class="o">/</span><span class="n">expectedSize</span><span class="p">];</span>
                         <span class="p">}</span>
                        <span class="nl">completed</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">SDImageCacheType</span> <span class="n">cacheType</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">finished</span><span class="p">,</span> <span class="bp">NSURL</span> <span class="o">*</span><span class="n">imageURL</span><span class="p">)</span> <span class="p">{</span>
                            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot; preload id=%ld: completed&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">);</span>
                            <span class="p">[[</span><span class="n">weakSelf</span> <span class="n">_embedViewController</span><span class="p">]</span> <span class="nl">updatePreloadProgress</span><span class="p">:</span><span class="o">-</span><span class="mf">1.0</span><span class="p">];</span>
                        <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<p>注意，这里没有在main queue中更新进度条，我的理解上UI操作应该都在main queue上进行，才不会导致延迟或异常。不过也许进度条对人的感知不是那么强烈，不在main queue上跑也感知不到有什么不同。另外就是在completed时更新为-1.0，这里hack了下负值代表隐藏进度条。</p>

<p>另外还有个问题实际上没解决，因为预载的是2张图片，各自下载的进度并非相加，而是同时更新绿色那个进度条的。好在SDWebImage同时只有2个工作，而往往也是主线程和预载的其中一张图片在下载，只要不翻的很快是不会出现绿色进度条来回跳变现象的。另外还有个问题是 preloadImageWithBaseInfo: 循环调用的太快，导致有时是间隔而非顺序预载图片的，有功夫再来把它改成顺序加载吧。</p>

<p>剩下的收藏列表与作品列表抓取，和过去排行页面大同小异。至此，RankingLog中解决和未解决的问题都梳理在这了。最后不得不感叹XCode6的 Size Class 和 Auto Layout 的便捷性，以前哪怕Delphi的编辑器，遇上自动布局的事也照样会弄得人一头包，那时还不用考虑不同屏幕高宽的适配。</p>
]]></content:encoded>
      <dc:date>2014-11-07T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Pixiv RankingLog for iOS 开发手记01 (XCode6/iOS8.1)</title>
      <link>http://blog.imaou.com/opensource/2014/11/07/RankingLog_dev_notes1.html</link>
      <description><![CDATA[昨天在开源的Pixiv“过去排行”扫图专用App - RankingLog发布了完善后的版本，感觉通过写RankingLog很好的熟悉了XCode6的Storyboard和自动布局，这里记录下其中遇到的问题和解决方法，以免以后自己走弯路。
]]></description>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/11/07/RankingLog_dev_notes1.html</guid>
      <content:encoded><![CDATA[<p>昨天在<a href="http://blog.imaou.com/opensource/2014/11/06/Pixiv_RankingLog_for_iOS.html">开源的Pixiv“过去排行”扫图专用App - RankingLog</a>发布了完善后的版本，感觉通过写RankingLog很好的熟悉了XCode6的Storyboard和自动布局，这里记录下其中遇到的问题和解决方法，以免以后自己走弯路。</p>

<h2>CocoaPods</h2>

<p>先从整个工程说起吧，用到了下面3个pods</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">platform :ios, &quot;6.1&quot;
source &#39;https://github.com/CocoaPods/Specs.git&#39;

pod &#39;SDWebImage&#39;, &#39;~&gt;3.6&#39;
pod &#39;CHTCollectionViewWaterfallLayout&#39;, :head
pod &#39;SVProgressHUD&#39;, :head
</code></pre></div>
<p><a href="https://github.com/rs/SDWebImage">SDWebImage</a>就不用多介绍了，API简单功能强大。<a href="https://github.com/chiahsien/CHTCollectionViewWaterfallLayout">CHTCollectionViewWaterfallLayout</a>是RankingLog用到的瀑布流插件，因为特殊性不像前面的控件那么容易上手，而且自定义Cell还是蛮头疼的；P站的缩略图是128x128的方型无法显示出瀑布流，不过自动调整cell大小这点还是能用到的，后面具体说明。<a href="https://github.com/TransitApp/SVProgressHUD">SVProgressHUD</a>是个方便的弹出框，等待、成功/错误提示都由这个控件提供。</p>

<h2>CHTCollectionViewWaterfallLayout</h2>

<p>首先是瀑布流实现，之前<a href="http://blog.imaou.com/study/2014/10/24/Waterfall_CollectionView_Layout.html">有篇文章</a>详细介绍了CHTCollectionViewWaterfallLayout的用法。当时使用xib自定义cell，但随之而来的问题是Segue只能通过代码来发起...</p>

<p>苦苦尝试最终找到StoryBoard里自定义Cell的方法：</p>

<ol>
<li>在StoryBoard的UICollectionView里放一个UICollectionViewCell，Collection Reusable View的Identifier里填入WaterfallCell。这样就不用 collectionView registerClass:forCellWithReuseIdentifier: 了，一切由StoryBoard搞定；</li>
<li>定义CHTCollectionViewCell继承自UICollectionViewCell，用于绑定自定义Cell上面的UIImageView和UILabel；</li>
</ol>

<p>这样自定义Cell就完成了(相关代码位于<a href="https://github.com/upbit/Pixiv-RankingLog/tree/master/RankingLog/CHTWaterfallLayout">CHTWaterfallLayout</a>下)，这样自定义Cell的优势在于，能够在StoryBoard里直接拖Segue来实现跳转。</p>

<h2>ScrollImageViewController</h2>

<p>图片浏览应用，自然需要个UIScrollView来查看图片了。网上找到个能够使图片自适应窗口，放大后自动居中的片段，于是封装到了ScrollImageViewController里。</p>

<p>首先在UIViewController里放置UIScrollView，里面放上UIImageView。UIScrollView设置距离四周0的平铺，而UIImageView四个对齐绑定到下面四个NSLayoutConstraint上，用于动态居中：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">ScrollImageViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span>

<span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraintLeft</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraintRight</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraintTop</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraintBottom</span><span class="p">;</span>

<span class="k">@end</span>
</code></pre></div>
<p>并在scrollViewDidZoom:时调用updateConstraints:使图片居中显示：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidZoom:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">updateConstraints</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateConstraints</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">imageWidth</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">imageHeight</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>

    <span class="kt">float</span> <span class="n">viewWidth</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">viewHeight</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>

    <span class="c1">// center image if it is smaller than screen</span>
    <span class="kt">float</span> <span class="n">hPadding</span> <span class="o">=</span> <span class="p">(</span><span class="n">viewWidth</span> <span class="o">-</span> <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">*</span> <span class="n">imageWidth</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hPadding</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">hPadding</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="kt">float</span> <span class="n">vPadding</span> <span class="o">=</span> <span class="p">(</span><span class="n">viewHeight</span> <span class="o">-</span> <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">*</span> <span class="n">imageHeight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">vPadding</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">vPadding</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">constraintLeft</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">hPadding</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">constraintRight</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">hPadding</span><span class="p">;</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">constraintTop</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">vPadding</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">constraintBottom</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">vPadding</span><span class="p">;</span>

    <span class="c1">// Makes zoom out animation smooth and starting from the right point not from (0, 0)</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="n">layoutIfNeeded</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>这是调整图片大小以适应屏幕(完全显示方式)，其中 fitZoom -= 0.0001 是修复当ZoomScale略大时引起滑动手势失效的BUG：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="c1">// Zoom to show as much image as possible unless image is smaller than screen</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateZoom</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">fitZoom</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
                        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>

    <span class="n">fitZoom</span> <span class="o">-=</span> <span class="mf">0.0001</span><span class="p">;</span>      <span class="c1">// FIX BUG: zoom image small then frame, so disable scrollView&#39;s PanGesture</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">minimumZoomScale</span> <span class="o">=</span> <span class="p">(</span><span class="n">fitZoom</span> <span class="o">&lt;</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">?</span> <span class="nl">fitZoom</span> <span class="p">:</span> <span class="mf">1.0</span><span class="p">;</span>
    <span class="c1">//self.scrollView.maximumZoomScale = 3.0;</span>

    <span class="c1">// Force scrollViewDidZoom fire if zoom did not change</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fitZoom</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">lastZoomScale</span><span class="p">)</span> <span class="n">fitZoom</span> <span class="o">+=</span> <span class="mf">0.000001</span><span class="p">;</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">lastZoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="n">fitZoom</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>SDWebScrollImageViewController</h2>

<p>ScrollImageViewController只完成了基本的图片展示，图片缓存和手势都还没有实现。定义SDWebScrollImageViewController继承于ScrollImageViewController，在viewDidLoad:中加入手势：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - View Controller</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>

    <span class="c1">// 设置图片下载的默认User-Agent</span>
    <span class="p">[</span><span class="n">SDWebImageManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">.</span><span class="n">imageDownloader</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;PixivIOSApp/5.1.1&quot;</span> <span class="nl">forHTTPHeaderField</span><span class="p">:</span><span class="s">@&quot;User-Agent&quot;</span><span class="p">];</span>
    <span class="n">SDWebImageManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">.</span><span class="n">imageDownloader</span><span class="p">.</span><span class="n">executionOrder</span> <span class="o">=</span> <span class="n">SDWebImageDownloaderLIFOExecutionOrder</span><span class="p">;</span>

    <span class="c1">// single/double tap gesture</span>
    <span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTapGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">singleTap</span><span class="p">:)];</span>
    <span class="n">singleTapGesture</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">singleTapGesture</span><span class="p">];</span>
    <span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">doubleTapGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">doubleTap</span><span class="p">:)];</span>
    <span class="n">doubleTapGesture</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">doubleTapGesture</span><span class="p">];</span>
    <span class="p">[</span><span class="n">singleTapGesture</span> <span class="nl">requireGestureRecognizerToFail</span><span class="p">:</span><span class="n">doubleTapGesture</span><span class="p">];</span>

    <span class="c1">// left/right swipe gesture</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
    <span class="bp">UISwipeGestureRecognizer</span> <span class="o">*</span><span class="n">leftSwipeGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UISwipeGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">leftSwipe</span><span class="p">:)];</span>
    <span class="p">[</span><span class="n">leftSwipeGesture</span> <span class="nl">setDirection</span><span class="p">:(</span><span class="n">UISwipeGestureRecognizerDirectionLeft</span><span class="p">)];</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">leftSwipeGesture</span><span class="p">];</span>
    <span class="bp">UISwipeGestureRecognizer</span> <span class="o">*</span><span class="n">rightSwipeGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UISwipeGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">rightSwipe</span><span class="p">:)];</span>
    <span class="p">[</span><span class="n">rightSwipeGesture</span> <span class="nl">setDirection</span><span class="p">:(</span><span class="n">UISwipeGestureRecognizerDirectionRight</span><span class="p">)];</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">rightSwipeGesture</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>接着封装Pixiv图片的下载功能。这里会用到<a href="https://github.com/upbit/PixivAPI_iOS">PixivAPI_iOS</a>的返回类型。因为P站有SAPI和Public-API两种API，返回也存在SAPIIllust和PAPIIllust两种。先定义一个通用的提取illust_id/title信息的函数：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">_safeGetIllustBaseInfo:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">illusts</span> <span class="nf">index:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="nf">largeSize:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">largeSize</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="n">illusts</span><span class="p">.</span><span class="n">count</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="bp">NSInteger</span> <span class="n">illust_id</span><span class="p">;</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">image_url</span><span class="p">;</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>

    <span class="kt">id</span> <span class="n">raw_illust</span> <span class="o">=</span> <span class="n">illusts</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">raw_illust</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">illust</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">raw_illust</span><span class="p">;</span>
        <span class="n">illust_id</span> <span class="o">=</span> <span class="p">[</span><span class="n">illust</span><span class="p">[</span><span class="s">@&quot;illust_id&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">largeSize</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">image_url</span> <span class="o">=</span> <span class="n">illust</span><span class="p">[</span><span class="s">@&quot;url_large&quot;</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">image_url</span> <span class="o">=</span> <span class="n">illust</span><span class="p">[</span><span class="s">@&quot;url_px_480mw&quot;</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">illust</span><span class="p">[</span><span class="s">@&quot;title&quot;</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">raw_illust</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">SAPIIllust</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="n">SAPIIllust</span> <span class="o">*</span><span class="n">illust</span> <span class="o">=</span> <span class="p">(</span><span class="n">SAPIIllust</span> <span class="o">*</span><span class="p">)</span><span class="n">raw_illust</span><span class="p">;</span>
        <span class="n">illust_id</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">illustId</span><span class="p">;</span>
        <span class="n">image_url</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">mobileURL</span><span class="p">;</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">raw_illust</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">PAPIIllust</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="n">PAPIIllust</span> <span class="o">*</span><span class="n">illust</span> <span class="o">=</span> <span class="p">(</span><span class="n">PAPIIllust</span> <span class="o">*</span><span class="p">)</span><span class="n">raw_illust</span><span class="p">;</span>
        <span class="n">illust_id</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">illust_id</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">largeSize</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">image_url</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">true_url_large</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">image_url</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">url_px_480mw</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">illust</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 封装成NSDictionary返回</span>
    <span class="k">return</span> <span class="l">@{</span>
        <span class="s">@&quot;index&quot;</span><span class="o">:</span> <span class="l">@(</span><span class="n">index</span><span class="l">)</span><span class="p">,</span>
        <span class="s">@&quot;illust_id&quot;</span><span class="o">:</span> <span class="l">@(</span><span class="n">illust_id</span><span class="l">)</span><span class="p">,</span>
        <span class="s">@&quot;image_url&quot;</span><span class="o">:</span> <span class="n">image_url</span><span class="p">,</span>
        <span class="s">@&quot;title&quot;</span><span class="o">:</span> <span class="n">title</span><span class="p">,</span>
    <span class="l">}</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">illustRecordWithIndex:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">_safeGetIllustBaseInfo</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="nl">index</span><span class="p">:</span><span class="n">index</span> <span class="nl">largeSize</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">showLargeSize</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>接着实现异步下载图片到UIImageView的核心功能reloadImage:</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="c1">// 图片下载进度通知</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onImageProgress:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">receivedSize</span> <span class="nf">expectedSize:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">expectedSize</span>
<span class="p">{</span>
    <span class="c1">//NSLog(@&quot;download progress: %.2f%%&quot;, (float)receivedSize/expectedSize);</span>
<span class="p">}</span>

<span class="c1">// 图片下载完成的回掉函数，供外部感知下载结束</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onImageDownloaded:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span>
<span class="p">{</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">realShowImageWithBaseInfo:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">illust_record</span>
<span class="p">{</span>
    <span class="bp">NSInteger</span> <span class="n">illust_id</span> <span class="o">=</span> <span class="p">[</span><span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;illust_id&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">image_url</span> <span class="o">=</span> <span class="n">illust_record</span><span class="p">[</span><span class="s">@&quot;image_url&quot;</span><span class="p">];</span>

    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;download(id=%ld): %@&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">,</span> <span class="n">image_url</span><span class="p">);</span>

    <span class="p">[</span><span class="nb">self</span> <span class="nl">simulatePixivRefererAndUserAgent</span><span class="p">:</span><span class="n">illust_id</span><span class="p">];</span>

    <span class="k">__weak</span> <span class="n">SDWebScrollImageViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="p">[</span><span class="n">ApplicationDelegate</span> <span class="nl">setNetworkActivityIndicatorVisible</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>

    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="nl">sd_setImageWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">image_url</span><span class="p">]</span>
                      <span class="nl">placeholderImage</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">options</span><span class="p">:(</span><span class="n">SDWebImageHighPriority</span><span class="o">|</span><span class="n">SDWebImageRetryFailed</span><span class="p">)</span>
                              <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">receivedSize</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">expectedSize</span><span class="p">)</span> <span class="p">{</span>
                                  <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">onImageProgress</span><span class="p">:</span><span class="n">receivedSize</span> <span class="nl">expectedSize</span><span class="p">:</span><span class="n">expectedSize</span><span class="p">];</span>
                              <span class="p">}</span>
                             <span class="nl">completed</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">SDImageCacheType</span> <span class="n">cacheType</span><span class="p">,</span> <span class="bp">NSURL</span> <span class="o">*</span><span class="n">imageURL</span><span class="p">)</span> <span class="p">{</span>
                                 <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
                                     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;download(id=%ld) error: %@&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
                                 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                                     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;download(id=%ld) completed.&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">);</span>
                                 <span class="p">}</span>

                                 <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                                     <span class="p">[</span><span class="n">ApplicationDelegate</span> <span class="nl">setNetworkActivityIndicatorVisible</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
                                     <span class="p">[</span><span class="n">weakSelf</span> <span class="nl">onImageDownloaded</span><span class="p">:</span><span class="n">image</span><span class="p">];</span>
                                 <span class="p">});</span>
                             <span class="p">}];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadImage</span>
<span class="p">{</span>
    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">illust_record</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">illustRecordWithIndex</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">index</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">illust_record</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//NSLog(@&quot;safeGetIllustBaseInfo(%ld) error&quot;, (long)self.index);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">[</span><span class="nb">self</span> <span class="nl">realShowImageWithBaseInfo</span><span class="p">:</span><span class="n">illust_record</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<ol>
<li>先用 illustRecordWithIndex: 获取illust的基本信息；</li>
<li>realShowImageWithBaseInfo: 中调用 sd_setImageWithURL:placeholderImage:completed: 异步下载图片；(这个函数没封装好，导致后面增加进度条时，不得不重写整个函数...)</li>
<li>completed block 中，在 main queue 上调用 onImageDownloaded: 回掉，更新image；(这里单独拿出来，是为了通知外部下载完成)</li>
</ol>

<p>其中还有个 simulatePixivRefererAndUserAgent: 因为原图下载需要模拟从网页端的访问，每次下载前调整下Referer和UserAgent：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">simulatePixivRefererAndUserAgent:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">illust_id</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">showLargeSize</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 模拟Referer来下载原图</span>
        <span class="bp">NSString</span> <span class="o">*</span><span class="n">referer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=%ld&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illust_id</span><span class="p">];</span>
        <span class="bp">NSString</span> <span class="o">*</span><span class="n">user_agent</span> <span class="o">=</span> <span class="s">@&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.4 (KHTML, like Gecko) Ubuntu/12.10 Chromium/22.0.1229.94 Chrome/22.0.1229.94 Safari/537.4&quot;</span><span class="p">;</span>
        <span class="p">[</span><span class="n">SDWebImageManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">.</span><span class="n">imageDownloader</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">referer</span> <span class="nl">forHTTPHeaderField</span><span class="p">:</span><span class="s">@&quot;Referer&quot;</span><span class="p">];</span>
        <span class="p">[</span><span class="n">SDWebImageManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">.</span><span class="n">imageDownloader</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">user_agent</span> <span class="nl">forHTTPHeaderField</span><span class="p">:</span><span class="s">@&quot;User-Agent&quot;</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">SDWebImageManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">.</span><span class="n">imageDownloader</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;PixivIOSApp/5.1.1&quot;</span> <span class="nl">forHTTPHeaderField</span><span class="p">:</span><span class="s">@&quot;User-Agent&quot;</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>完成了 reloadImage: 最后是手势响应，单击/左划跳转下一张，右划上一张，双击则是在原图与适合屏幕zoomScale中切换：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - Gesture Recognizer</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">singleTap:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;singleTap&quot;</span><span class="p">);</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">reloadImage</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doubleTap:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">!=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">lastZoomScale</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">leftSwipe:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;leftSwipe&quot;</span><span class="p">);</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">reloadImage</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">rightSwipe:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;rightSwipe&quot;</span><span class="p">);</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">reloadImage</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>导出相应的函数供外部重载，至此简易的Pixiv图片下载与显示类完成。</p>

<h2>RankingLogWaterfallViewController</h2>

<p>接着说主界面的 Controller - RankingLogWaterfallViewController，继承于PixivWaterfallViewController，用于显示选定历史排行的内容展示。StoryBoard的布局如下：</p>

<p><img src="http://blog.imaou.com/images/201411/dev_RankingLog_01.png" alt="StoryBoard RankingLog"></p>

<p>首先是在viewDidLoad:中，根据历史设置判断是否第一次进入。第一次进入则 performSegueWithIdentifier: 转到DatePickerViewController的设置页卡，否则调用 loginAndRefreshView: 登录Pixiv并重新刷新列表内容：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">loadSettingFromUserDefaults</span><span class="p">])</span> <span class="p">{</span>
        <span class="c1">// 第一次进入先跳转设置页卡</span>
        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSegueWithIdentifier</span><span class="p">:</span><span class="s">@&quot;DatePickerSegue&quot;</span> <span class="nl">sender</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span> <span class="n">loginAndRefreshView</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItem</span> <span class="nl">setEnabled</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>DatePickerSegue转向的DatePickerViewController暂且不表，这里先说下返回时的处理。搜索了网上的各种资料，发现当UINavigationController返回上级页面时，先前的页面无法得到通知或返回值，
于是只好在viewDidAppear:里做了些很low的判断：根据ModelSettings的isChanged标记判断变更的，当DatePickerViewController里的控件修改了ModelSettings的关键字段，isChanged会变成YES。</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">isChanged</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 发生过变化，重新刷新RankingLog</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;refresh RankingLog&quot;</span><span class="p">);</span>
        <span class="p">[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">isChanged</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>

        <span class="p">[</span><span class="nb">self</span> <span class="n">loginAndRefreshView</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nb">self</span> <span class="n">updateTitle</span><span class="p">];</span>

    <span class="c1">// 如果是r18类日榜，启用左侧的收藏按钮</span>
    <span class="k">if</span> <span class="p">([[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">mode</span> <span class="nl">rangeOfString</span><span class="p">:</span><span class="s">@&quot;r18&quot;</span><span class="p">].</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItem</span> <span class="nl">setEnabled</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItem</span> <span class="nl">setEnabled</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>另外如果发生改变，除了重置isChanged = NO，也会调用loginAndRefreshView:刷新内容。</p>

<h2>SAPI RankingLog的获取</h2>

<p>loginAndRefreshView:主要显示一个Login...的提示，接着调用 PixivAPI loginIfNeeded: 来登录Pixiv。因为PixivAPI是同步的(苹果规定主线程中不应该有阻塞的网络操作)，因此需要用到 asyncBlockingQueue: 来异步执行。在 asyncBlockingQueue: 代码块中的内容，将在后台线程中依次执行。等login:成功返回后，注意调用 onMainQueue: 在main queue上更新UI操作，例如隐藏 SVProgressHUD 或更新图片等。</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">loginAndRefreshView</span>
<span class="p">{</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="o">=</span> <span class="l">@[]</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">__weak</span> <span class="n">RankingLogWaterfallViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>

    <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="nl">showWithStatus</span><span class="p">:</span><span class="s">@&quot;Login...&quot;</span> <span class="nl">maskType</span><span class="p">:</span><span class="n">SVProgressHUDMaskTypeBlack</span><span class="p">];</span>

    <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">asyncBlockingQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
        <span class="bp">NSString</span> <span class="o">*</span><span class="n">username</span> <span class="o">=</span> <span class="p">[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">username</span><span class="p">;</span>
        <span class="bp">NSString</span> <span class="o">*</span><span class="n">password</span> <span class="o">=</span> <span class="p">[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">password</span><span class="p">;</span>
        <span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">loginIfNeeded</span><span class="p">:</span><span class="n">username</span> <span class="nl">password</span><span class="p">:</span><span class="n">password</span><span class="p">];</span>

        <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">onMainQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="nl">showErrorWithStatus</span><span class="p">:</span><span class="s">@&quot;Login failed! Check your pixiv ID and password.&quot;</span><span class="p">];</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="p">[</span><span class="n">SVProgressHUD</span> <span class="n">dismiss</span><span class="p">];</span>
            <span class="p">[</span><span class="n">weakSelf</span> <span class="n">asyncGetRankingLog</span><span class="p">];</span>
        <span class="p">}];</span>
    <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<p>等获PixivAPI获取到auth信息后，就可以实现 asyncGetRankingLog: 来查询过去排行了：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">fetchNextRankingLog</span>
<span class="p">{</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">updateTitle</span><span class="p">];</span>

    <span class="bp">NSString</span> <span class="o">*</span><span class="n">mode</span> <span class="o">=</span> <span class="p">[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">mode</span><span class="p">;</span>
    <span class="n">NSCalendarUnit</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">NSCalendarUnitDay</span> <span class="o">|</span> <span class="n">NSCalendarUnitMonth</span> <span class="o">|</span> <span class="n">NSCalendarUnitYear</span><span class="p">;</span>
    <span class="bp">NSDateComponents</span> <span class="o">*</span><span class="n">components</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">]</span> <span class="nl">components</span><span class="p">:</span><span class="n">flags</span> <span class="nl">fromDate</span><span class="p">:[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">date</span><span class="p">];</span>


    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">illusts</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">SAPI_ranking_log</span><span class="p">:[</span><span class="n">components</span> <span class="n">year</span><span class="p">]</span> <span class="nl">month</span><span class="p">:[</span><span class="n">components</span> <span class="n">month</span><span class="p">]</span> <span class="nl">day</span><span class="p">:[</span><span class="n">components</span> <span class="n">day</span><span class="p">]</span>
                                                  <span class="nl">mode</span><span class="p">:</span><span class="n">mode</span> <span class="nl">page</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span> <span class="nl">requireAuth</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>

    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;get RankingLog(%@, %ld-%ld-%ld, page=%ld) return %ld works&quot;</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)[</span><span class="n">components</span> <span class="n">year</span><span class="p">],</span> <span class="p">(</span><span class="kt">long</span><span class="p">)[</span><span class="n">components</span> <span class="n">month</span><span class="p">],</span> <span class="p">(</span><span class="kt">long</span><span class="p">)[</span><span class="n">components</span> <span class="n">day</span><span class="p">],</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">illusts</span><span class="p">.</span><span class="n">count</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">illusts</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span>     <span class="c1">// 已经更多数据或出错</span>
        <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span> <span class="o">&gt;=</span> <span class="p">[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">pageLimit</span><span class="p">))</span> <span class="p">{</span>   <span class="c1">// 翻页达到深度限制</span>
        <span class="p">[</span><span class="nb">self</span> <span class="n">goPriorRankingRound</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">illusts</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">asyncGetRankingLog</span>
<span class="p">{</span>
    <span class="k">__weak</span> <span class="n">RankingLogWaterfallViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="p">[</span><span class="n">ApplicationDelegate</span> <span class="nl">setNetworkActivityIndicatorVisible</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
    <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">asyncBlockingQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>

        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">SAPI_illusts</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span> <span class="n">fetchNextRankingLog</span><span class="p">];</span>
        <span class="p">[[</span><span class="n">PixivAPI</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">onMainQueue</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
            <span class="p">[</span><span class="n">ApplicationDelegate</span> <span class="nl">setNetworkActivityIndicatorVisible</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">SAPI_illusts</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">weakSelf</span><span class="p">.</span><span class="n">illusts</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">illusts</span> <span class="nl">arrayByAddingObjectsFromArray</span><span class="p">:</span><span class="n">SAPI_illusts</span><span class="p">];</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;fetchNextRankingLog: failed.&quot;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}];</span>

    <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<p>每次调用 SAPI<em>ranking</em>log: 获取一页数据，一般历史排行有2页*30作品。不过因为SAPI<em>ranking</em>log:为同步API的相同原因，这里需要先封装成异步操作 asyncGetRankingLog: 并当执行结束后，追加到weakSelf.illusts。不过illusts会触发 collectionView reloadData，这同样是个UI操作，需要在main queue里更新，不然会出现界面假死或显示不出内容的各种BUG...</p>

<p>细心的你应该发现了，在fetchNextRankingLog:末尾有个goPriorRankingRound:函数，用于在当日历史榜单没有数据可翻或达到最大翻页深度时，将日期移动到上一个周期：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">goPriorRankingRound</span>
<span class="p">{</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">mode</span> <span class="o">=</span> <span class="p">[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">mode</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">mode</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;weekly&quot;</span><span class="p">]</span> <span class="o">||</span> <span class="p">[</span><span class="n">mode</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;weekly_r18&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">updateDateIntervalAgo</span><span class="p">:</span><span class="mi">7</span><span class="o">*</span><span class="mf">86400.0</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">mode</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;monthly&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">updateDateIntervalAgo</span><span class="p">:</span><span class="mi">30</span><span class="o">*</span><span class="mf">86400.0</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">[[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">updateDateIntervalAgo</span><span class="p">:</span><span class="mf">86400.0</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">ModelSettings</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">isChanged</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>这个处理比较容易，根据mode如果是weekly则减去7天的秒数，monthly则减去30天的秒数，其他按1天向前回溯，并且重置当前页数使下次获取该日期的第一天数据。</p>

<h2>DatePickerViewController</h2>

<p>设置界面，选项越来越多导致iPhone4S上都显示不下了。尽可能精简布局，在Size Class的Any|Any状态下调整好布局和边距，用Auto Layout尝试慢慢调整。必要时可以在横屏隐藏部分控件，这个现在只要在hCompact时去掉installed即可。</p>

<p><img src="http://blog.imaou.com/images/201411/dev_RankingLog_02.png" alt="StoryBoard DatePicker"></p>

<p>再来说说输入框输完后隐藏键盘。先将View的Class改为UIControl，这样就可以绑定Touch Down事件到dismissKeyboard: 判断UILabel的isFirstResponder，并调用resignFirstResponder隐藏键盘。然后是两个输入框，为了在按Return/Enter时隐藏键盘，在其 Did End On Exit 上绑定hideKeyboardOnEnterClick:</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">dismissKeyboard:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">usernameLabel</span> <span class="n">isFirstResponder</span><span class="p">])</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">usernameLabel</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">passwordLabel</span> <span class="n">isFirstResponder</span><span class="p">])</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">passwordLabel</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">hideKeyboardOnEnterClick:</span><span class="p">(</span><span class="bp">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">sender</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>其他控件绑定的大多是常用的Value Changed，这里就不再详述了。第二部分<a href="http://blog.imaou.com/opensource/2014/11/07/RankingLog_dev_notes2.html">Pixiv RankingLog for iOS 开发手记02</a>则主要说明和StoryBoard纠缠的经历，欢迎继续查看。</p>
]]></content:encoded>
      <dc:date>2014-11-07T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>开源的Pixiv“过去排行”扫图专用App - RankingLog(v1.2)</title>
      <link>http://blog.imaou.com/opensource/2014/11/06/Pixiv_RankingLog_for_iOS.html</link>
      <description><![CDATA[我是个重度的P站扫图爱好者，与其说享受壁纸库和收藏列表里满满的成果，扫图时的快感更让我欲罢不能。我曾经不厌其烦的查看Pixiv的日榜，之后又写了工具去抓取日榜排名(其副产品就是Pixiv日榜搬运姬(@pixivbot))，闲暇之余也会拿起iPad翻翻跟随作者的新作。
]]></description>
      <pubDate>Thu, 06 Nov 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/11/06/Pixiv_RankingLog_for_iOS.html</guid>
      <content:encoded><![CDATA[<p>我是个重度的P站扫图爱好者，与其说享受壁纸库和收藏列表里满满的成果，扫图时的快感更让我欲罢不能。我曾经不厌其烦的查看Pixiv的日榜，之后又写了工具去抓取日榜排名(其副产品就是<a href="https://github.com/upbit/PixivBot">Pixiv日榜搬运姬(@pixivbot)</a>)，闲暇之余也会拿起iPad翻翻跟随作者的新作。</p>

<p>如果你也是和我同样的扫图中毒者，你一定也尝试过用下面的方式收集图片(按病症严重程度递增)：</p>

<ol>
<li>找到收藏作品的作者，去查看ta的作品或者收藏...</li>
<li>不断查看P站的日榜、周榜与月榜，挑选出喜欢的图片右键...</li>
<li>极度图荒时，从收藏作品的Tag、或者收藏该作品的用户里，作为种子继续翻找图片...</li>
</ol>

<p>有人说了，为什么不用客户端隐藏的“过去的排行榜”功能，查看历史作品？过去的排行榜在哪？打开Pixiv for iOS，点标题栏的“推荐”-&gt;“编辑”-&gt;选中“过去的排行榜”，之后返回来选榜单类型和时间。</p>

<p>“过去排行”确实是查看漏网作品的利器，只不过iOS客户端上此功能极为反人类，只有2页数据不说每每点回去修改日期，所有设置项就都重置了。于是萌生了自己写通过“过去排行”扫图的App的想法，App开源在<a href="https://github.com/upbit/Pixiv-RankingLog">GitHub/Pixiv-RankingLog</a>。</p>

<p><span style="color:#f00;"><strong>IPA下载：</strong></span><a href="http://blog.imaou.com/RankingLog/RankingLog_v1.3.ipa">RankingLog_v1.3.ipa</a> - (通用版，支持iOS6.1~iOS8.1，需越狱)</p>

<h2>使用说明:</h2>

<p><img src="http://blog.imaou.com/images/201411/RankingLogHelper.png" alt="RankingLog Helper"></p>

<h2>主要功能：</h2>

<ol>
<li>无限翻页查看&quot;过去的排行榜&quot;，并支持图片预载与缓存；</li>
<li>支持导出原图到相册或文件(Documents/下)；</li>
<li>支持查看同作者的其他作品；v1.1新增</li>
<li>支持收藏到Pixiv，并可以查看帐号的公开收藏；v1.2新增</li>
</ol>

<p>更多功能，自己下载体验吧 :P</p>

<p>附iPad2(iOS7.1.1)实际运行截图：</p>

<p><img src="http://blog.imaou.com/images/201411/RankingLog_iPad_waterfall.png" alt="RankingLog Helper"></p>

<p>ps: 有任何问题或建议，可以直接在GitHub上提issus，或者给我留言。</p>
]]></content:encoded>
      <dc:date>2014-11-06T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>瀑布流(CHTCollectionViewWaterfallLayout)使用笔记</title>
      <link>http://blog.imaou.com/study/2014/10/24/Waterfall_CollectionView_Layout.html</link>
      <description><![CDATA[好久没更新博客了，想想还是把快忘掉的CHTCollectionViewWaterfallLayout拿出来备忘下，以便以后使用。
]]></description>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2014/10/24/Waterfall_CollectionView_Layout.html</guid>
      <content:encoded><![CDATA[<p>好久没更新博客了，想想还是把快忘掉的<a href="https://github.com/chiahsien/CHTCollectionViewWaterfallLayout">CHTCollectionViewWaterfallLayout</a>拿出来备忘下，以便以后使用。</p>

<p>先上最终效果，这是显示的Pixiv的日榜结果(没有使用非等高排列)，配合xib可以方便调整Cell内的样式与布局：</p>

<p><img src="http://blog.imaou.com/images/CHTCollectionViewWaterfallLayout_example.png" alt="Waterfall example"></p>

<h2>瀑布流使用笔记</h2>

<p>首先CocosPods安装最新的CHTCollectionViewWaterfallLayout</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">pod &#39;CHTCollectionViewWaterfallLayout&#39;, :head
</code></pre></div>
<h3>CHTCollectionViewWaterfallLayout的初始化</h3>

<p>之后创建一个WaterfallViewController，在.m中引用头文件以及CHTCollectionViewDelegateWaterfallLayout：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &lt;CHTCollectionViewWaterfallLayout/CHTCollectionViewWaterfallLayout.h&gt;</span>

<span class="k">@interface</span> <span class="nc">WaterfallViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="bp">UICollectionViewDataSource</span><span class="p">,</span> <span class="n">CHTCollectionViewDelegateWaterfallLayout</span><span class="o">&gt;</span>

<span class="k">@end</span>
</code></pre></div>
<p>在Storyboard里拖放一个UICollectionViewController，因为后面使用xib确定Cell内容，这里先删掉里面的Cell。接着选定WaterfallViewController，开始CHTCollectionViewWaterfallLayout的配置：</p>

<p>先设置</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>

    <span class="n">CHTCollectionViewWaterfallLayout</span> <span class="o">*</span><span class="n">layout</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CHTCollectionViewWaterfallLayout</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>

    <span class="n">layout</span><span class="p">.</span><span class="n">sectionInset</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>     <span class="c1">// top, left, bottom, right边距</span>
    <span class="n">layout</span><span class="p">.</span><span class="n">minimumColumnSpacing</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                        <span class="c1">// Cell之间1px</span>
    <span class="n">layout</span><span class="p">.</span><span class="n">minimumInteritemSpacing</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">// 为了自适应横竖屏，layout.columnCount的设置在后面单独说明</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">.</span><span class="n">collectionViewLayout</span> <span class="o">=</span> <span class="n">layout</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="o">=</span> <span class="n">UIViewAutoresizingFlexibleHeight</span> <span class="o">|</span> <span class="n">UIViewAutoresizingFlexibleWidth</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>

    <span class="c1">// 注册自定义Cell: CHTCollectionViewCell</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">registerClass</span><span class="p">:[</span><span class="n">CHTCollectionViewCell</span> <span class="k">class</span><span class="p">]</span> <span class="nl">forCellWithReuseIdentifier</span><span class="p">:</span><span class="n">CELL_IDENTIFIER</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h3>自定义CHTCollectionViewCell</h3>

<p>接着创建一个UICollectionViewCell的子类CHTCollectionViewCell，勾选生成xib，粘贴下面的初始化代码：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="c1">//</span>
<span class="c1">//  CHTCollectionViewCell.h</span>
<span class="c1">//</span>

<span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>

<span class="cp">#define CELL_IDENTIFIER @&quot;WaterfallCell&quot;</span>

<span class="k">@interface</span> <span class="nc">CHTCollectionViewCell</span> : <span class="bp">UICollectionViewCell</span>

<span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIImageView</span> <span class="o">*</span><span class="n">image</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span><span class="p">;</span>

<span class="k">@end</span>
</code></pre></div><div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="c1">//</span>
<span class="c1">//  CHTCollectionViewCell.m</span>
<span class="c1">//</span>

<span class="cp">#import &quot;CHTCollectionViewCell.h&quot;</span>

<span class="k">@implementation</span> <span class="nc">CHTCollectionViewCell</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">frame</span>
<span class="p">{</span>
    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">frame</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">NSString</span> <span class="o">*</span><span class="n">xibName</span> <span class="o">=</span> <span class="s">@&quot;CHTCollectionViewCell&quot;</span><span class="p">;</span>
        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">arrayOfViews</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">loadNibNamed</span><span class="p">:</span><span class="n">xibName</span> <span class="nl">owner</span><span class="p">:</span><span class="nb">self</span> <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(([</span><span class="n">arrayOfViews</span> <span class="n">count</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="p">[[</span><span class="n">arrayOfViews</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">UICollectionViewCell</span> <span class="k">class</span><span class="p">]]))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">arrayOfViews</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<p>接着在xib里拖放UIImageView和UILabel，添加AutoSize的约束如下：</p>

<p><img src="http://blog.imaou.com/images/CHTCollectionViewWaterfallLayout_cell_storyboard.png" alt="Waterfall Cell Storyboard"></p>

<p>以后调整Cell就可以直接在Storyboard里修改xib了。需要注意的是，Cell的大小在这里修改是没用的，所以无论UIImageView还是UILabel，都需要自动布局适应外框大小。</p>

<h3>处理Waterfall的数据源</h3>

<p>因为是基于UICollectionView的，在添加 collectionView:cellForItemAtIndexPath: 前，先将数据存储定义好：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">WaterfallViewController</span> : <span class="bp">UICollectionViewController</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">illusts</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<p>当外部设置好illusts后，触发 [self.collectionView reloadData] 来更新数据：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - UICollectionViewDataSource</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">numberOfItemsInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="n">count</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">numberOfSectionsInCollectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">UICollectionViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">cellForItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="n">CHTCollectionViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">CHTCollectionViewCell</span> <span class="o">*</span><span class="p">)[</span><span class="n">collectionView</span> <span class="nl">dequeueReusableCellWithReuseIdentifier</span><span class="p">:</span><span class="n">CELL_IDENTIFIER</span> <span class="nl">forIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>

    <span class="c1">///</span>
    <span class="c1">///  在此设置 cell.image 和 cell.label</span>
    <span class="c1">///</span>
<span class="cm">/*</span>
<span class="cm">    id raw_illust = self.illusts[indexPath.row];</span>
<span class="cm">    NSString *image_url = nil;</span>

<span class="cm">    if ([raw_illust isKindOfClass:[PAPIIllust class]]) {</span>
<span class="cm">        PAPIIllust *illust = (PAPIIllust *)raw_illust;</span>
<span class="cm">        cell.label.text = illust.title;</span>
<span class="cm">        image_url = illust.url_px_128x128;</span>

<span class="cm">    } else if ([raw_illust isKindOfClass:[SAPIIllust class]]) {</span>
<span class="cm">        SAPIIllust *illust = (SAPIIllust *)raw_illust;</span>
<span class="cm">        cell.label.text = illust.title;</span>
<span class="cm">        image_url = illust.thumbURL;</span>

<span class="cm">    } else {</span>
<span class="cm">        cell.label.text = @&quot;unhandle class&quot;;</span>
<span class="cm">    }</span>

<span class="cm">    if (image_url) {</span>
<span class="cm">        [cell.image sd_setImageWithURL:[NSURL URLWithString:image_url]</span>
<span class="cm">                      placeholderImage:[UIImage imageNamed:@&quot;placeholder&quot;] options:indexPath.row == 0 ? SDWebImageRefreshCached : 0];</span>
<span class="cm">    }</span>
<span class="cm">*/</span>
    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>除了常规的cell设置外，还有CHTCollectionViewDelegateWaterfallLayout的参数需要调整：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - CHTCollectionViewDelegateWaterfallLayout</span>

<span class="c1">// this method asks for the size of cell at indexpath</span>
<span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">layout:</span><span class="p">(</span><span class="bp">UICollectionViewLayout</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionViewLayout</span> <span class="nf">sizeForItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="c1">// 这里返回不一样的长宽比，cell就会根据列数和相对高度自动排列</span>
    <span class="bp">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>     <span class="c1">// 50x50只代表比例，实际Cell的显示大小由columnCount与屏宽决定</span>
    <span class="k">return</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// this method is called when a cell is selected (tapped on)</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">didSelectItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="c1">// 选中某个Cell的处理方法</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Cell at %ld is selected&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)[</span><span class="n">indexPath</span> <span class="n">row</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div>
<p>此时运行，就会显示出columnCount=2的瀑布流了。</p>

<h3>根据屏幕宽度自动调整columnCount</h3>

<p>那位说了，我iPhone上和iPad上，看到的怎么都是2列啊，还有横屏时明明可以显示更多，却把图片给拉伸了... 其实还有个处理没做——<strong>根据屏幕宽度自动调整columnCount</strong></p>

<p>在View显示或者设备发生旋转时</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#define __MainScreenFrame   [[UIScreen mainScreen] bounds]</span>
<span class="cp">#define __MainScreen_Width  __MainScreenFrame.size.width</span>

<span class="c1">// Cell的最小显示大小(决定列数)</span>
<span class="cp">#define MIN_CELL_COLUMN_SIZE (96)</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span> <span class="nl">updateLayoutForOrientation</span><span class="p">:[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">statusBarOrientation</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willAnimateRotationToInterfaceOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">toInterfaceOrientation</span> <span class="nf">duration:</span><span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nv">duration</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="nl">willAnimateRotationToInterfaceOrientation</span><span class="p">:</span><span class="n">toInterfaceOrientation</span> <span class="nl">duration</span><span class="p">:</span><span class="n">duration</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span> <span class="nl">updateLayoutForOrientation</span><span class="p">:</span><span class="n">toInterfaceOrientation</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateLayoutForOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">orientation</span>
<span class="p">{</span>
    <span class="n">CHTCollectionViewWaterfallLayout</span> <span class="o">*</span><span class="n">layout</span> <span class="o">=</span> <span class="p">(</span><span class="n">CHTCollectionViewWaterfallLayout</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span><span class="p">.</span><span class="n">collectionViewLayout</span><span class="p">;</span>
    <span class="n">layout</span><span class="p">.</span><span class="n">columnCount</span> <span class="o">=</span> <span class="n">__MainScreen_Width</span> <span class="o">/</span> <span class="n">MIN_CELL_COLUMN_SIZE</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>关键的就是 updateLayoutForOrientation: 函数，只要必要时根据 _<em>MainScreen</em>Width 返回的屏幕宽度，以及Cell的最小宽度，就可以知道当前设备、方向下应该显示的瀑布流列数了。</p>

<h3>关于Header和Footer</h3>

<p>为了简便起见(其实是偷懒)，这里省去了相关的设置。定义好Header和Footer Cell后，在viewDidLoad:里注册Cell Class，接着处理 collectionView:viewForSupplementaryElementOfKind:atIndexPath:</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">registerClass</span><span class="p">:[</span><span class="n">CHTCollectionViewWaterfallHeader</span> <span class="k">class</span><span class="p">]</span>
        <span class="nl">forSupplementaryViewOfKind</span><span class="p">:</span><span class="n">CHTCollectionElementKindSectionHeader</span> <span class="nl">withReuseIdentifier</span><span class="p">:</span><span class="n">HEADER_IDENTIFIER</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">registerClass</span><span class="p">:[</span><span class="n">CHTCollectionViewWaterfallFooter</span> <span class="k">class</span><span class="p">]</span>
        <span class="nl">forSupplementaryViewOfKind</span><span class="p">:</span><span class="n">CHTCollectionElementKindSectionFooter</span> <span class="nl">withReuseIdentifier</span><span class="p">:</span><span class="n">FOOTER_IDENTIFIER</span><span class="p">];</span>
<span class="p">}</span>

<span class="c1">// this method will ask for supplementary views - headers and footers - for each section</span>
<span class="p">-</span> <span class="p">(</span><span class="bp">UICollectionReusableView</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span>
           <span class="nf">viewForSupplementaryElementOfKind:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">kind</span> <span class="nf">atIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">kind</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">CHTCollectionElementKindSectionHeader</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">CHTCollectionViewHeader</span> <span class="o">*</span><span class="n">headerCell</span> <span class="o">=</span> <span class="p">(</span><span class="n">CHTCollectionViewHeader</span><span class="o">*</span><span class="p">)[</span><span class="n">collectionView</span>
            <span class="nl">dequeueReusableSupplementaryViewOfKind</span><span class="p">:</span><span class="n">kind</span> <span class="nl">withReuseIdentifier</span><span class="p">:</span><span class="n">HEADER_IDENTIFIER</span> <span class="nl">forIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
        <span class="n">headerCell</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;example title&quot;</span><span class="p">;</span>
        <span class="n">headerCell</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;example&quot;</span><span class="p">];</span>
        <span class="k">return</span> <span class="n">headerCell</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">kind</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">CHTCollectionElementKindSectionFooter</span><span class="p">])</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>CHTCollectionViewWaterfallLayout就这么多东西了，虽然上手起来有点不易，不过效果还是很不错的。未来做其他资讯类的app时应该也能用上。</p>
]]></content:encoded>
      <dc:date>2014-10-24T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>MagicalRecord与CoreData - MagicalRecord使用笔记</title>
      <link>http://blog.imaou.com/opensource/2014/10/13/MagicalRecord_and_core_data.html</link>
      <description><![CDATA[因为需要本地存储Pixiv的返回内容，于是搜了下CoreData的写法，自然而然也就接触到了MagicalRecord。MagicalRecord确实极大简化了CoreData的各种操作，但正因为基于CoreData，到最后还是没搞定按插入顺序返回查询结果的功能...
]]></description>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/10/13/MagicalRecord_and_core_data.html</guid>
      <content:encoded><![CDATA[<p>因为需要本地存储Pixiv的返回内容，于是搜了下CoreData的写法，自然而然也就接触到了<a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a>。MagicalRecord确实极大简化了CoreData的各种操作，但正因为基于CoreData，到最后还是没搞定按插入顺序返回查询结果的功能...</p>

<p>已经打算切换到 <a href="https://github.com/ccgus/fmdb">SQLite + FMDB</a>，不过还是先记录下MagicalRecord的用法吧。</p>

<h2>MagicalRecord的配置</h2>

<ol>
<li>首先是用CocoaPods安装MagicalRecord：<strong>pod &#39;MagicalRecord&#39;, &#39;~&gt; 2.2&#39;</strong></li>
<li>引入 <strong>CoreData+MagicalRecord.h</strong></li>
<li>在 application:didFinishLaunchingWithOptions: 里加入初始化语句</li>
</ol>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &lt;MagicalRecord/CoreData+MagicalRecord.h&gt;</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
    <span class="c1">// Override point for customization after application launch.</span>
    <span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">setupCoreDataStackWithAutoMigratingSqliteStoreNamed</span><span class="p">:</span><span class="s">@&quot;PixixWalker.sqlite&quot;</span><span class="p">];</span>

    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>MagicalRecord的使用</h2>

<h3>插入数据</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c">  <span class="c1">// saveUsingCurrentThreadContextWithBlockAndWait: 是使用后台保存避免阻塞主线程</span>
  <span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">saveUsingCurrentThreadContextWithBlockAndWait</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">localContext</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 先按 illust_id 查询 IllustBase 是否存在，不存在则用 MR_createInContext: 创建</span>
    <span class="n">IllustBase</span> <span class="o">*</span><span class="n">illust</span> <span class="o">=</span> <span class="p">[</span><span class="n">IllustBase</span> <span class="nl">MR_findFirstByAttribute</span><span class="p">:</span><span class="s">@&quot;illust_id&quot;</span>
                                                   <span class="nl">withValue</span><span class="p">:</span><span class="l">@(</span><span class="n">illustBaseInfo</span><span class="p">.</span><span class="n">illustId</span><span class="l">)</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">illust</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;new illust=%ld: %@&quot;</span><span class="p">,</span> <span class="n">illustBaseInfo</span><span class="p">.</span><span class="n">illustId</span><span class="p">,</span> <span class="n">illustBaseInfo</span><span class="p">.</span><span class="n">title</span><span class="p">);</span>
        <span class="n">illust</span> <span class="o">=</span> <span class="p">[</span><span class="n">IllustBase</span> <span class="nl">MR_createInContext</span><span class="p">:</span><span class="n">content</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// illust.score = illustBaseInfo.score;</span>

  <span class="p">}];</span>
</code></pre></div>
<h3>查询与筛选</h3>

<p>过滤出评分次数大于500，且平均分高于8.0分的作品：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c">    <span class="bp">NSPredicate</span> <span class="o">*</span><span class="n">filter</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:</span><span class="s">@&quot;scored_count &gt; %d AND score/scored_count &gt; %f&quot;</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">];</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">illustArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">IllustBase</span> <span class="nl">MR_findAllSortedBy</span><span class="p">:</span><span class="s">@&quot;score&quot;</span> <span class="nl">ascending</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">withPredicate</span><span class="p">:</span><span class="n">filter</span><span class="p">];</span>
    <span class="n">weakSelf</span><span class="p">.</span><span class="n">illusts</span> <span class="o">=</span> <span class="n">illustArray</span><span class="p">;</span>
</code></pre></div>
<h3>清空所有数据</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c">    <span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">saveUsingCurrentThreadContextWithBlockAndWait</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">localContext</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">IllustBase</span> <span class="nl">MR_truncateAllInContext</span><span class="p">:</span><span class="n">localContext</span><span class="p">];</span>
    <span class="p">}];</span>
</code></pre></div>
<h3>计算存储空间</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c">    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">yourSqlLitePath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSApplicationSupportDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)</span> <span class="n">lastObject</span><span class="p">]</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span> <span class="s">@&quot;PixixWalker/PixixWalker.sqlite&quot;</span><span class="p">];</span>
    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">storeAttributesOfItemAtPath</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">attributesOfItemAtPath</span><span class="p">:</span><span class="n">yourSqlLitePath</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
    <span class="bp">NSNumber</span> <span class="o">*</span><span class="n">entities</span> <span class="o">=</span> <span class="p">[</span><span class="n">IllustBase</span> <span class="n">MR_numberOfEntities</span><span class="p">];</span>

    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;&gt;&gt;&gt; SQLite size %.2f MB of %@ entities.&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">storeAttributesOfItemAtPath</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;NSFileSize&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">]</span><span class="o">/</span><span class="mi">1024</span><span class="o">/</span><span class="mi">1024</span><span class="p">,</span> <span class="n">entities</span><span class="p">);</span>
</code></pre></div>
<p>也许是对CoreData不熟，或者是CoreData本身就不适合复杂查询，写起来总觉得怪怪的，想想要是加上黑名单和联合查询，估计头都大了... 想想还是重新学习FMDB算了，虽然又要折腾一阵，不过应该比CoreData用的更加顺手。</p>
]]></content:encoded>
      <dc:date>2014-10-13T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Pixiv Public-API (OAuth)分析 - pixivpy新版本放出</title>
      <link>http://blog.imaou.com/opensource/2014/10/09/pixiv_api_for_ios_update.html</link>
      <description><![CDATA[最近Pixiv将图片存储升级，已经无法通过从SAPI返回的mobileURL里截断 /mobile/. 来获取图片原始地址了。而早在几个版本前，SAPI的login.php也已经无法用于获取PHPSESSID：
]]></description>
      <pubDate>Thu, 09 Oct 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/10/09/pixiv_api_for_ios_update.html</guid>
      <content:encoded><![CDATA[<p>最近Pixiv将图片存储升级，已经无法通过从SAPI返回的mobileURL里截断 /mobile/<strong><em>.</em></strong> 来获取图片原始地址了。而早在几个版本前，SAPI的login.php也已经无法用于获取PHPSESSID：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">http://spapi.pixiv.net/iphone/login.php?mode={}&amp;pixiv_id={}&amp;pass={}&amp;skip={}
</code></pre></div>
<p>好在十一期间闲下来了，有足够时间去分析Pixiv的新客户端和登录模拟。事实证明最终还是找到了模拟OAuth认证的方法，并且不像Pixitti那样使用js脚本，而是和官方客户端一样走更为安全的方法进行登录模拟。</p>

<p>新版的API已经更新到 <a href="https://github.com/upbit/pixivpy">PixivPy</a> 和 <a href="https://github.com/upbit/PixivAPI_iOS">PixivAPI_iOS</a>，发现任何问题或建议请尽管提issues吧 :P</p>

<h2>分析过程</h2>

<p>用Fiddler2分析了iOS客户端的请求，发现SAPI的 ranking.php 并未返回原始的图片地址；而点击放大镜访问的URL，显然也不是从mobileURL里推断出来的。例如下面是两组对比数据：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">px_480mw: http://i2.pixiv.net/c/480x960/img-master/img/2014/10/07/00/08/26/46401177_480mw.jpg
large: http://i2.pixiv.net/img-original/img/2014/10/07/00/08/26/46401177_p0.jpg

px_480mw: http://i2.pixiv.net/c/480x960/img-master/img/2014/10/07/00/08/21/46401171_480mw.jpg
large: http://i2.pixiv.net/img-original/img/2014/10/07/00/08/21/46401171_p0.png
</code></pre></div>
<p>&#39;px_480mw&#39;是mobileURL的内容，&#39;large&#39;则是原始图片地址(需要加Referer来访问)。除了img-original/外，后面的后缀也不尽相同(例如第二个原图是png)。</p>

<p>出于好奇，再次祭出Fiddler2尝试抓取完整的iOS客户端访问，发现新版客户端会用HTTPS访问一个 public-api.secure.pixiv.net 的服务器。通常HTTPS访问，客户端会检查证书的有效性，所以经过Fiddler2解密的HTTPS请求Pixiv客户端会不认。好在还有 <a href="https://github.com/iSECPartners/ios-ssl-kill-switch">iOS SSL Kill Switch</a> 这个Cydia插件，可以关闭iOS上的SSL证书检查。</p>

<h3>Public-API</h3>

<p>分析解密后的请求发现，客户端除了访问SAPI的ranking.php获取日榜外，查看图片时还会访问如下两个Public-API的地址：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">https://public-api.secure.pixiv.net/v1/works/{illust_id}.json
https://public-api.secure.pixiv.net/v1/users/{author_id}.json
</code></pre></div>
<p>其中 works/{id}.json 返回的json数据中，就有想要的图片原始地址。works/46605041.json 返回如下：</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="err">count</span> <span class="err">=</span> <span class="err">1;</span>
    <span class="err">response</span> <span class="err">=</span>     <span class="err">(</span>
                <span class="err">{</span>
            <span class="nt">&quot;age_limit&quot;</span> <span class="err">=</span> <span class="s2">&quot;all-age&quot;</span><span class="err">;</span>
            <span class="s2">&quot;book_style&quot;</span> <span class="err">=</span> <span class="err">none;</span>
            <span class="err">caption</span> <span class="err">=</span> <span class="s2">&quot;\U307b\U306e\U304b\U3061\U3083\U3093\U3000\U58c1\U7d19\U30b5\U30a4\U30ba\Uff081024\U00d7768\Uff09\U3067\U3059\Uff01</span>
<span class="s2">\n\U30a2\U30a4\U30b3\U30f3\U3082\U3069\Uff5e\U305e\Uff5e&quot;</span><span class="err">;</span>
            <span class="s2">&quot;created_time&quot;</span> <span class="err">=</span> <span class="s2">&quot;2014-10-18 02:31:58&quot;</span><span class="err">;</span>
            <span class="s2">&quot;favorite_id&quot;</span> <span class="err">=</span> <span class="mi">0</span><span class="err">;</span>
            <span class="err">height</span> <span class="err">=</span> <span class="mi">768</span><span class="err">;</span>
            <span class="err">id</span> <span class="err">=</span> <span class="mi">46605041</span><span class="err">;</span>
            <span class="s2">&quot;image_urls&quot;</span> <span class="err">=</span>             <span class="p">{</span>
                <span class="err">large</span> <span class="err">=</span> <span class="nt">&quot;http://i2.pixiv.net/img-original/img/2014/10/18/02/31/58/46605041_p0.jpg&quot;</span><span class="err">;</span>
                <span class="err">medium</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/600x600/img-master/img/2014/10/18/02/31/58/46605041_p0_master1200.jpg&quot;</span><span class="err">;</span>
                <span class="s2">&quot;px_128x128&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/128x128/img-master/img/2014/10/18/02/31/58/46605041_128x128.jpg&quot;</span><span class="err">;</span>
                <span class="s2">&quot;px_480mw&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/480x960/img-master/img/2014/10/18/02/31/58/46605041_480mw.jpg&quot;</span><span class="err">;</span>
                <span class="err">small</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/150x150/img-master/img/2014/10/18/02/31/58/46605041_p0_master1200.jpg&quot;</span><span class="err">;</span>
            <span class="p">}</span><span class="err">;</span>
            <span class="s2">&quot;is_liked&quot;</span> <span class="err">=</span> <span class="mi">0</span><span class="err">;</span>
            <span class="s2">&quot;is_manga&quot;</span> <span class="err">=</span> <span class="mi">1</span><span class="err">;</span>
            <span class="err">metadata</span> <span class="err">=</span>             <span class="p">{</span>
                <span class="err">pages</span> <span class="err">=</span>                 <span class="err">(</span>
                                        <span class="err">{</span>
                        <span class="nt">&quot;image_urls&quot;</span> <span class="err">=</span>                         <span class="p">{</span>
                            <span class="err">large</span> <span class="err">=</span> <span class="nt">&quot;http://i2.pixiv.net/img-original/img/2014/10/18/02/31/58/46605041_p0.jpg&quot;</span><span class="err">;</span>
                            <span class="err">medium</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/1200x1200/img-master/img/2014/10/18/02/31/58/46605041_p0_master1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_128x128&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/128x128/img-master/img/2014/10/18/02/31/58/46605041_p0_square1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_480mw&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/480x960/img-master/img/2014/10/18/02/31/58/46605041_p0_master1200.jpg&quot;</span><span class="err">;</span>
                        <span class="p">}</span><span class="err">;</span>
                    <span class="p">},</span>
                                        <span class="err">{</span>
                        <span class="nt">&quot;image_urls&quot;</span> <span class="err">=</span>                         <span class="p">{</span>
                            <span class="err">large</span> <span class="err">=</span> <span class="nt">&quot;http://i2.pixiv.net/img-original/img/2014/10/18/02/31/58/46605041_p1.jpg&quot;</span><span class="err">;</span>
                            <span class="err">medium</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/1200x1200/img-master/img/2014/10/18/02/31/58/46605041_p1_master1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_128x128&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/128x128/img-master/img/2014/10/18/02/31/58/46605041_p1_square1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_480mw&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/480x960/img-master/img/2014/10/18/02/31/58/46605041_p1_master1200.jpg&quot;</span><span class="err">;</span>
                        <span class="p">}</span><span class="err">;</span>
                    <span class="p">}</span><span class="err">,</span>
                                        <span class="p">{</span>
                        <span class="nt">&quot;image_urls&quot;</span> <span class="err">=</span>                         <span class="p">{</span>
                            <span class="err">large</span> <span class="err">=</span> <span class="nt">&quot;http://i2.pixiv.net/img-original/img/2014/10/18/02/31/58/46605041_p2.jpg&quot;</span><span class="err">;</span>
                            <span class="err">medium</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/1200x1200/img-master/img/2014/10/18/02/31/58/46605041_p2_master1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_128x128&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/128x128/img-master/img/2014/10/18/02/31/58/46605041_p2_square1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_480mw&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/480x960/img-master/img/2014/10/18/02/31/58/46605041_p2_master1200.jpg&quot;</span><span class="err">;</span>
                        <span class="p">}</span><span class="err">;</span>
                    <span class="p">}</span><span class="err">,</span>
                                        <span class="p">{</span>
                        <span class="nt">&quot;image_urls&quot;</span> <span class="err">=</span>                         <span class="p">{</span>
                            <span class="err">large</span> <span class="err">=</span> <span class="nt">&quot;http://i2.pixiv.net/img-original/img/2014/10/18/02/31/58/46605041_p3.jpg&quot;</span><span class="err">;</span>
                            <span class="err">medium</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/1200x1200/img-master/img/2014/10/18/02/31/58/46605041_p3_master1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_128x128&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/128x128/img-master/img/2014/10/18/02/31/58/46605041_p3_square1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_480mw&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/480x960/img-master/img/2014/10/18/02/31/58/46605041_p3_master1200.jpg&quot;</span><span class="err">;</span>
                        <span class="p">}</span><span class="err">;</span>
                    <span class="p">}</span><span class="err">,</span>
                                        <span class="p">{</span>
                        <span class="nt">&quot;image_urls&quot;</span> <span class="err">=</span>                         <span class="p">{</span>
                            <span class="err">large</span> <span class="err">=</span> <span class="nt">&quot;http://i2.pixiv.net/img-original/img/2014/10/18/02/31/58/46605041_p4.jpg&quot;</span><span class="err">;</span>
                            <span class="err">medium</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/1200x1200/img-master/img/2014/10/18/02/31/58/46605041_p4_master1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_128x128&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/128x128/img-master/img/2014/10/18/02/31/58/46605041_p4_square1200.jpg&quot;</span><span class="err">;</span>
                            <span class="s2">&quot;px_480mw&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/c/480x960/img-master/img/2014/10/18/02/31/58/46605041_p4_master1200.jpg&quot;</span><span class="err">;</span>
                        <span class="p">}</span><span class="err">;</span>
                    <span class="p">}</span>
                <span class="err">);</span>
            <span class="err">};</span>
            <span class="s2">&quot;page_count&quot;</span> <span class="err">=</span> <span class="mi">5</span><span class="err">;</span>
            <span class="err">publicity</span> <span class="err">=</span> <span class="mi">0</span><span class="err">;</span>
            <span class="s2">&quot;reuploaded_time&quot;</span> <span class="err">=</span> <span class="s2">&quot;2014-10-18 02:31:58&quot;</span><span class="err">;</span>
            <span class="err">stats</span> <span class="err">=</span>             <span class="p">{</span>
                <span class="nt">&quot;commented_count&quot;</span> <span class="err">=</span> <span class="mi">29</span><span class="err">;</span>
                <span class="s2">&quot;favorited_count&quot;</span> <span class="err">=</span>                 <span class="p">{</span>
                    <span class="err">private</span> <span class="err">=</span> <span class="err">109;</span>
                    <span class="err">public</span> <span class="err">=</span> <span class="err">1418;</span>
                <span class="p">}</span><span class="err">;</span>
                <span class="err">score</span> <span class="err">=</span> <span class="mi">10278</span><span class="err">;</span>
                <span class="s2">&quot;scored_count&quot;</span> <span class="err">=</span> <span class="mi">1034</span><span class="err">;</span>
                <span class="s2">&quot;views_count&quot;</span> <span class="err">=</span> <span class="mi">11673</span><span class="err">;</span>
            <span class="p">}</span><span class="err">;</span>
            <span class="err">tags</span> <span class="err">=</span>             <span class="err">(</span>
                <span class="s2">&quot;\U30e9\U30d6\U30e9\U30a4\U30d6!&quot;</span><span class="err">,</span>
                <span class="s2">&quot;\U9ad8\U5742\U7a42\U4e43\U679c&quot;</span><span class="err">,</span>
                <span class="s2">&quot;\U30e9\U30d6\U30e9\U30a4\U30d6!1000users\U5165\U308a&quot;</span><span class="err">,</span>
                <span class="s2">&quot;\U30ed\U30ea&quot;</span>
            <span class="err">);</span>
            <span class="err">title</span> <span class="err">=</span> <span class="s2">&quot;\U307b\U306e\U304b\U3061\U3083\U3093&quot;</span><span class="err">;</span>
            <span class="err">tools</span> <span class="err">=</span>             <span class="err">(</span>
                <span class="err">SAI</span>
            <span class="err">);</span>
            <span class="err">type</span> <span class="err">=</span> <span class="err">manga;</span>
            <span class="err">user</span> <span class="err">=</span>             <span class="p">{</span>
                <span class="err">account</span> <span class="err">=</span> <span class="nt">&quot;yukinko-02727&quot;</span><span class="err">;</span>
                <span class="err">id</span> <span class="err">=</span> <span class="mi">10539782</span><span class="err">;</span>
                <span class="s2">&quot;is_follower&quot;</span> <span class="err">=</span> <span class="mi">0</span><span class="err">;</span>
                <span class="s2">&quot;is_following&quot;</span> <span class="err">=</span> <span class="mi">0</span><span class="err">;</span>
                <span class="s2">&quot;is_friend&quot;</span> <span class="err">=</span> <span class="mi">0</span><span class="err">;</span>
                <span class="err">name</span> <span class="err">=</span> <span class="s2">&quot;\U7950\U559c\Uff08\U3086\U304d\Uff09&quot;</span><span class="err">;</span>
                <span class="s2">&quot;profile_image_urls&quot;</span> <span class="err">=</span>                 <span class="p">{</span>
                    <span class="nt">&quot;px_50x50&quot;</span> <span class="err">=</span> <span class="s2">&quot;http://i2.pixiv.net/img142/profile/yukinko-02727/8524995_s.jpg&quot;</span><span class="err">;</span>
                <span class="p">}</span><span class="err">;</span>
            <span class="p">}</span><span class="err">;</span>
            <span class="err">width</span> <span class="err">=</span> <span class="mi">1024</span><span class="err">;</span>
        <span class="err">}</span>
    <span class="err">);</span>
    <span class="err">status</span> <span class="err">=</span> <span class="err">success;</span>
<span class="err">}</span>
</code></pre></div>
<p>json.response[0].image_urls.large 的结果就是原始图片地址(多张图时信息则存在metadata的pages里)，并且其中还包含不少SAPI拿不到的信息。</p>

<p>下面是 users/1184799.json 的返回:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="err">&#39;status&#39;:</span> <span class="err">u&#39;success&#39;,</span>
     <span class="err">&#39;count&#39;:</span> <span class="err">1,</span>
     <span class="err">&#39;response&#39;:</span> <span class="err">[</span>
        <span class="err">{</span>
            <span class="err">&#39;profile&#39;:</span> <span class="err">{</span>
                <span class="err">&#39;tags&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;introduction&#39;:</span> <span class="err">u&#39;白髪娘を愛しています(*\&#39;▽\&#39;*)\r\n好きなものを好きなように描いてます！\r\nｵﾘｼﾞﾅﾙ多め｡\r\n\r\n※ﾏｲﾋﾟｸ＆ご依頼はお受けしていません｡\r\n■I</span> <span class="err">don\&#39;t</span> <span class="err">accept</span> <span class="nt">&quot;maipiku&quot;</span> <span class="err">application</span> <span class="err">other</span> <span class="err">than</span> <span class="err">a</span> <span class="err">friend</span> <span class="err">with</span> <span class="err">having</span> <span class="err">met.　I</span> <span class="err">am</span> <span class="err">really</span> <span class="err">sorry＞＜\r\n\r\n絵はたまに気まぐれで消したりします｡\r\n画像加工＆配布は一切お断りしております｡\r\n\r\n※pixivのメールには反応していませんので、何かありましたらTwitterかHPの方へお願い致します。&#39;</span><span class="p">,</span>
                 <span class="err">&#39;gender&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;contacts&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;job&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;location&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;workspace&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;birth_date&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;homepage&#39;:</span> <span class="err">None,</span>
                 <span class="err">&#39;blood_type&#39;:</span> <span class="err">None</span>
            <span class="p">}</span><span class="err">,</span>
             <span class="err">&#39;account&#39;:</span> <span class="err">u&#39;luciahreat&#39;,</span>
             <span class="err">&#39;name&#39;:</span> <span class="err">u&#39;三嶋くろね&#39;,</span>
             <span class="err">&#39;email&#39;:</span> <span class="err">None,</span>
             <span class="err">&#39;is_premium&#39;:</span> <span class="err">None,</span>
             <span class="err">&#39;profile_image_urls&#39;:</span> <span class="p">{</span>
                <span class="err">&#39;px_170x170&#39;:</span> <span class="err">u&#39;http://i2.pixiv.net/img38/profile/luciahreat/7271308.png&#39;,</span>
                 <span class="err">&#39;px_50x50&#39;:</span> <span class="err">u&#39;http://i2.pixiv.net/img38/profile/luciahreat/7271308_s.png&#39;</span>
            <span class="p">}</span><span class="err">,</span>
             <span class="err">&#39;id&#39;:</span> <span class="mi">1184799</span>
        <span class="err">}</span>
    <span class="err">]</span>
<span class="err">}</span>
</code></pre></div>
<p>不过这个 Public-API 并非真的那么公开，需要提供OAuth鉴权(Authorization 中携带 Bearer Token)。分析了下发现iOS的BearerToken每次登录或者换用户名都会变化，而Android是固定的(8mMXXWT9iuwdJvsVIvQsFYDwuZpRCMePeyagSh30ZdU)，于是拿来主义直接用到Public-API的访问模拟上了。另外一个麻烦则是需要提供 Cookie: PHPSESSID=****，完整的请求头部类似下面这样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Referer: http://spapi.pixiv.net/
User-Agent: PixivIOSApp/5.1.1
Content-Type: application/x-www-form-urlencoded       // 这个很关键，不然POST请求会返回失败

Authorization: Bearer 8mMXXWT9iuwdJvsVIvQsFYDwuZpRCMePeyagSh30ZdU     // Android Bearer
Cookie: PHPSESSID=500123_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx            // Mobile PHPSESSID
</code></pre></div>
<h3>Login (auth/token)</h3>

<p>再来说说如何模拟 auth/token 请求获得PHPSESSID。抓包发现iOS客户端每次打开，都会访问 oauth.secure.pixiv.net，其后的请求中都会携带 PHPSESSID：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">POST https://oauth.secure.pixiv.net/auth/token
</code></pre></div>
<p>分析这个POST请求，其返回的 header[&#39;Set-Cookie&#39;] 里就包含了PHPSESSID。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">username: username,
password: password,
grant_type: password,
client_id: bYGKuGVw91e0NMfPGp44euvGt59s,                            // iOS Client ID
client_secret: HP3RmkgAmEGro0gn1x9ioawQE8WMfvLXDz3ZqxpK,            // iOS Client Secret
</code></pre></div>
<p>因为是OAuth，POST请求中必须包含client<em>id和client</em>secret，好在这个ID和Secret是不变的，直接模拟iOS客户端的即可。鉴权类型是密码方式，然后在Payload里加入username和password就ok了。</p>

<p>至此，顺利解决登录获取PHPSESSID，以及通过Public-API获取图片原始地址问题。唯一的遗憾是不知道iOS客户端是怎么算 Authorization: Bearer Token 的，以后再想办法找找规律吧。</p>
]]></content:encoded>
      <dc:date>2014-10-09T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>TravelingMerchant开发手记02 - 供给与需求模型</title>
      <link>http://blog.imaou.com/game/2014/09/30/merchant_development_notes2.html</link>
      <description><![CDATA[说到商业模拟，我们往往想到的是大航海时代里，在两个港口来回倒卖特产的情景，然而现实中的经济远非这么简单。例如小麦，它的价格由当地的供给与需求决定，如果供不应求势必会导致价格的上涨，而供过于求则会致使小麦价格的下跌。小麦同时又是面粉的原料(投入品)，其价格直接影响面粉的价格；并且小麦还有大麦、黑麦、燕麦等代替品，当小麦价格过高时，人们又会选择相对低廉的代替品，从而导致需求的二次变化...
]]></description>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/game/2014/09/30/merchant_development_notes2.html</guid>
      <content:encoded><![CDATA[<p>说到商业模拟，我们往往想到的是大航海时代里，在两个港口来回倒卖特产的情景，然而现实中的经济远非这么简单。例如小麦，它的价格由当地的供给与需求决定，如果供不应求势必会导致价格的上涨，而供过于求则会致使小麦价格的下跌。小麦同时又是面粉的原料(投入品)，其价格直接影响面粉的价格；并且小麦还有大麦、黑麦、燕麦等代替品，当小麦价格过高时，人们又会选择相对低廉的代替品，从而导致需求的二次变化...</p>

<p>对于一个经济概念还仅仅停留在大学时背诵的“生产力决定生产关系”的门外汉，直接上来就思考供需理论实在是难度太大了点。好在现在是个网络的时代，搜了本曼昆的<a href="http://book.douban.com/subject/3719533/">《经济学原理》</a>猛啃，算是摸到了点门道。</p>

<p>首先要明确的是，<strong>价格影响供给与需求</strong>。以白菜为例，如果价格涨到50块钱一斤，想必商家会想方设法从附近省市调货，甚至把自家地下室里储藏过冬的白菜都拿出来卖了；如果白菜跌到5毛钱3斤，老百姓是高兴了但想必种白菜的没人愿意拿出来卖，还不如留着自家煮火锅来的合算。</p>

<p>所以物品的价格，会趋于一个稳定点，即<a href="http://zh.wikipedia.org/wiki/%E4%BE%9B%E7%BB%99%E5%92%8C%E9%9C%80%E6%B1%82">供给与需求曲线</a>的交点，并且在这一点对应的价格P，使得供给与需求刚好都等于Q：</p>

<p><center><img src="http://blog.imaou.com/images/Supply-demand-equilibrium.svg.png" alt="供需平衡价格"></center></p>

<p>图中需求曲线(红色)和供给曲线(蓝色)，存在不同的曲率以及与坐标轴的交点。交点可以理解为最大需求量(价格为0时)以及最小供给价格(供给为0时)，而曲率则比较复杂，还需要从影响供需的因素说起。</p>

<p>首先来考虑<strong>影响需求的因素</strong>，在游戏中存在以下几个方面：</p>

<ol>
<li><strong>收入：</strong>购买者的收入决定了购买力，并且当收入过低时，低档商品的需求相反会得到提升；

<ul>
<li><span style="color:#888;">因为低档商品与正常商品的模型完全不同，这里只考虑随着收入变化而同步变化的正常商品。同时区域的收入也可以抽象为该区域的繁荣度。</span></li>
</ul></li>
<li><strong>相关物品价格：</strong>就像开头提到的小麦，它存在其他谷物的代替品，在小麦价格上涨时其自身需求下降，并且其他代替品的需求上升；同样的还有互补品，比如面包卖的好时，店里的咖啡或饮料销量同时会得到提升；</li>
<li><strong>嗜好：</strong>比如中国北方喜食面食，而南方则以大米为主，这是由于地域差异决定的；</li>
<li><strong>预期：</strong>如果某个商品的价格即将上涨，那么购买的人会在段时间内暴增，相反下跌前需求会急剧减少；

<ul>
<li><span style="color:#888;">不过预期刻画的是短期内的变化，不会长时间影响需求量，所以暂时可以不考虑这个因素。</span></li>
</ul></li>
</ol>

<p>这些因素共同决定了物品的需求变化(需求弹性)。相对应的，<strong>供给</strong>也同样存在以下几种<strong>影响因素</strong>：</p>

<ol>
<li><strong>投入品价格：</strong>原料等价格上涨，在市场价不变时会导致供给量下降(利润变低了)；</li>
<li><strong>技术：</strong>例如小麦的种植技术改进，使单位面积的小麦产量翻倍。在那么同样售价下，市场的供给也得到了近乎翻倍的提升；</li>
<li><strong>预期：</strong>不仅仅消费者，供应商也会有预期。</li>
</ol>

<p>因为模拟的是欧洲中世纪的贸易，大多都是手工或作坊生产，这里忽略生产成本对供给的影响。</p>

<p>说了这么多理论，再回头看下 规则3 [<strong>供需与价格</strong>：区域中的物品进货价格，由区域的供需关系决定] 这条，物品的均衡价格正好用供需曲线来刻画：</p>

<p><center><img src="http://blog.imaou.com/images/Supply-demand-right-shift-demand_zh-tw.svg.png" alt="供给和需求"></center></p>

<p>当区域中代替品价格上涨时，小麦的需求曲线从D1变化到D2，及相同价格P1下需求量上升。而由于供给曲线S未变，均衡价格从P1慢慢变化到P2(因为持续供不应求)，直到达到新的均衡点(Q2,P2)为止。这个过程就是当某种谷物(比如大麦)价格上涨时，小麦价格与供需的变化过程。</p>

<p>不过，光有这些理论还远远达不到构筑模型的程度，<a href="#">TravelingMerchant开发手记03</a>将继续阐述商人、供应商的模拟，来构筑供需平衡的市场规律。</p>
]]></content:encoded>
      <dc:date>2014-09-30T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>TravelingMerchant开发手记01 - SpicyWolf与商人的世界</title>
      <link>http://blog.imaou.com/game/2014/09/29/merchant_development_notes1.html</link>
      <description><![CDATA[《狼与香辛料》第一卷末尾，有个故事至今还让我记忆犹新。其中那个被商人买来的男孩对恶魔说：“逆神者恶魔啊，世上最好吃的人类不是我。世上最好吃的人类就在你面前。那人就是日复一日扛着串香料赚取财利，辛香料为他肥大的灵魂做了完美调味的男子啊”。原本是教会以商行为对象，劝说做生意必须有所节制的宗教戏剧，但在商人之间香辛料无疑有着另外一层含义，而且罗伦斯 “希望我的身体也能早日有辛香料的完美调味”。
]]></description>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/game/2014/09/29/merchant_development_notes1.html</guid>
      <content:encoded><![CDATA[<p>《狼与香辛料》第一卷末尾，有个故事至今还让我记忆犹新。其中那个被商人买来的男孩对恶魔说：“逆神者恶魔啊，世上最好吃的人类不是我。世上最好吃的人类就在你面前。那人就是日复一日扛着串香料赚取财利，辛香料为他肥大的灵魂做了完美调味的男子啊”。原本是教会以商行为对象，劝说做生意必须有所节制的宗教戏剧，但在商人之间香辛料无疑有着另外一层含义，而且罗伦斯 “<strong>希望我的身体也能早日有辛香料的完美调味</strong>”。</p>

<p>随着故事的推进，越来越觉得在这样的世界中，成为一个旅行商人是多么的有趣(虽然没法人人都拥有萌狼赫罗)。哪怕仅仅是四处行走，贩卖货物乃至积累财富，慢慢让让全身心染上香辛料的味道，想着就觉得香气诱人：</p>

<p><img src="http://blog.imaou.com/images/spicywolf_op1.png" alt="狼与香辛料 OP1"></p>

<p>也许我们无法穿越回欧洲，去体验那收割最后一粒麦子的喜悦，但在游戏中无疑可以创造一个像狼与香辛料那样的国度。以前我只是在想，如果有这样一个游戏，让玩家化身为欧洲的一名旅行商人，驱赶着马车来往于各个村镇、城市之间，交易和运输各种物资(麦子、铁器、香辛料...)从中积累财富，开设店铺乃至成立商会...
然而这样的想法遇到Google Ingress，一切都变得不一样了：游戏不再是坐在电脑前等待时间流逝，而是实际拿着带有3G/4G的设备来到户外，进行虚拟实境的游戏体验。</p>

<p>结合到旅行商人中 <em>(Traveling Merchant，暂时叫这个吧，反正是开发代号)</em>，<strong>玩家需要的仅仅是拿起手机进入户外：将某个地方的特产低价买入，然后在另外一个物价较高的地方卖出以换取差价</strong>。而在旅行的过程中，玩家同时也在影响着世界，用交易带动区域的繁荣，进而发展出村落、城镇乃至王国。</p>

<p>既然是虚拟实境的商业模拟，游戏需要具备以下几个规则：</p>

<ol>
<li><strong>现实划分</strong>：将地图划分为若干足够小的区域(Area)，根据经纬度与分布情况，计算每个区域都的特产与进口商品的基本供给量；</li>
<li><strong>生成集市，建立商铺</strong>：每个区域中，生成若干现实世界地标作为集市(Market，类似Ingress中的Portal)，玩家可以在集市附近搜索商铺(Shop，只会分布在集市的附近)进行交易；</li>
<li><strong>供需与价格</strong>：区域中的物品进货价格，由区域的供需关系决定<em>(微观经济学)</em>；

<ul>
<li><span style="color:#888;">比如大麦产地供过于求，价格相对不产小麦的区域会低一些；而一些人口密集(繁荣度高)的区域，则整体物品的需求都会增加，甚至奢侈品需求也会上涨，导致部分奢侈品供不应求而高价</span></li>
</ul></li>
<li><strong>店铺竞争</strong>：每个店铺可以以进货价格购买这些物品，并提高价格从中获利。不过店铺的销量，会受到其他店铺售价的影响而增减交易量<em>(竞争策略)</em>，并且仓库容量也受店铺等级制约；</li>
<li><strong>贸易驱动</strong>：玩家贩卖商品的过程，会造成购买地的需求上涨和目标区域的供给增加；虽然单个商人的行为无法影响一个区域的经济，但大量的物资变动会导致区域间物价更趋近于均衡；</li>
</ol>

<p>当然，上面说的特征仅仅是最基本的规则，而且实际模拟中还存在不少问题等待解决。不过Ingress用700w的用户证明了虚拟实境游戏的乐趣与可行性，而随着 Google Glass / Apple Watch 这样的可穿戴带GPS设备的普及，虚拟实境将真正进入玩家的生活。也许有一天，旅游而回的你给朋友携带的是虚拟国度的香辛料，而非现实社会的伴手礼也说不定。</p>

<p>规则1/2有Ingress可以参考，<a href="http://blog.imaou.com/game/2014/09/30/merchant_development_notes2.html">TravelingMerchant开发手记02</a>将重点说明<strong>规则3:供需与价格</strong>的模拟。</p>
]]></content:encoded>
      <dc:date>2014-09-29T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Aldnoah Zero 结局不吐不快，果然是老虚</title>
      <link>http://blog.imaou.com/misc/2014/09/21/aldnoah_zero_bad_end.html</link>
      <description><![CDATA[Aldnoah Zero算是7月新番里追得最勤的一部(因为iPad上几个客户端都没有刀剑神域2)，而且男主那扑克脸配那一身用低级装备压制Aldnoah战机的实力，实在是帅呆了。
]]></description>
      <pubDate>Sun, 21 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2014/09/21/aldnoah_zero_bad_end.html</guid>
      <content:encoded><![CDATA[<p>Aldnoah Zero算是7月新番里追得最勤的一部(因为iPad上几个客户端都没有刀剑神域2)，而且男主那扑克脸配那一身用低级装备压制Aldnoah战机的实力，实在是帅呆了。</p>

<p><img src="http://blog.imaou.com/images/aldnoah_zero.jpg" alt="Aldnoah Zero"></p>

<p>虽然明知老虚的作品，但还是毅然的把脸伸过去任打，只是没想到12话这个转折太突然了: <strong>无所不能的男主角，在战胜&quot;最强?&quot;(六神合体?)的机体后，被路过打酱油的情敌给捡便宜击毙了...</strong> 没有比这更让人意外的展开了啊！都快怀疑出13话的话，剧情会不会是伊奈帆突然蹦起来逆袭斯雷因。</p>

<p><img src="http://blog.imaou.com/images/aldnoah_zero_end.jpg" alt="BAD END"></p>

<p>既然还有2015年的续集，想必就是以Aldnoah觉醒后的斯雷因为主角。还有那么多轨道骑士呢，一集干掉一个也就够数了... (不过以老虚的风格，总是只能料到开头料不到结局，剧情绝对不仅仅是，公主发现斯雷因是枪杀伊奈帆的真凶后开枪那么简单)</p>
]]></content:encoded>
      <dc:date>2014-09-21T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Ingress-iOS ports代码阅读2 - Portal的绘制</title>
      <link>http://blog.imaou.com/opensource/2014/09/16/ingress_ios_code_reading2.html</link>
      <description><![CDATA[续Ingress-iOS ports代码阅读1，研究了好久经济学原理，越是深入越无法理解需求弹性和需求价格公式斜率的关系了。实在无力继续啃曼昆的微观卷，回头继续看Ingress-iOS的代码。感兴趣的，除了第一部分的地图mask层绘制，其次就是绘制Portal的方法。
]]></description>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/09/16/ingress_ios_code_reading2.html</guid>
      <content:encoded><![CDATA[<p>续<a href="http://blog.imaou.com/opensource/2014/09/04/ingress_ios_code_reading1.html">Ingress-iOS ports代码阅读1</a>，研究了好久经济学原理，越是深入越无法理解需求弹性和需求价格公式斜率的关系了。实在无力继续啃曼昆的微观卷，回头继续看Ingress-iOS的代码。感兴趣的，除了第一部分的地图mask层绘制，其次就是绘制Portal的方法。</p>

<p>自己实验了MKAnnotation和MKOverlay两种方法，用MKAnnotation放置一个图片在指定点比较简单，不过MKAnnotation是无法支持缩放的。我想要的效果是可以缩放地图，在目标建筑小到一定程度后将隐藏或者绘制其他建筑(比如大范围看到的是一个城镇，放大进去可以看到各种店铺和景点)。MKOverlay有个很好的例子<a href="https://developer.apple.com/library/ios/samplecode/HazardMap/Introduction/Intro.html">HazardMap</a>，不过里面的绘制和load部分看的云里雾里，还是直接从Ingress代码里找出Portal的处理方法把。</p>

<p>Portal的初始化是在 ScannerViewController 里进行的。不过在看这个之前，需要先了解下 Model - NSManagedObjects - Portal 的构成。Portal定义如下：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Portal</span> : <span class="bp">NSManagedObject</span> <span class="o">&lt;</span><span class="bp">MKAnnotation</span><span class="p">,</span> <span class="bp">MKOverlay</span><span class="o">&gt;</span>
<span class="k">@interface</span> <span class="nc">Portal</span> <span class="nl">(CoreDataGeneratedAccessors)</span>
</code></pre></div>
<p>可以看到，Portal可以作为MKAnnotation和MKOverlay加入到地图中，并且它也是CoreData的成员。这里只关注其作为MKAnnotation, MKOverlay的功能。</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">Portal</span>

<span class="p">-</span> <span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">)</span><span class="nf">coordinate</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">CLLocationCoordinate2DMake</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">longitude</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="n">CLLocationDistance</span><span class="p">)</span><span class="nf">distanceFromCoordinate:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">)</span><span class="nv">coordinate</span> <span class="p">{</span>
    <span class="bp">CLLocation</span> <span class="o">*</span><span class="n">loc1</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CLLocation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithLatitude</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">latitude</span> <span class="nl">longitude</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">longitude</span><span class="p">];</span>
    <span class="bp">CLLocation</span> <span class="o">*</span><span class="n">loc2</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CLLocation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithLatitude</span><span class="p">:</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span> <span class="nl">longitude</span><span class="p">:</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">];</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">loc1</span> <span class="nl">distanceFromLocation</span><span class="p">:</span><span class="n">loc2</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isInPlayerRange</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">distanceFromCoordinate</span><span class="p">:[</span><span class="n">LocationManager</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">playerLocation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">SCANNER_RANGE</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="n">MKMapRect</span><span class="p">)</span><span class="nf">boundingMapRect</span> <span class="p">{</span>
    <span class="n">MKMapPoint</span> <span class="n">upperLeft</span> <span class="o">=</span> <span class="n">MKMapPointForCoordinate</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">coordinate</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">pointsPerMeter</span> <span class="o">=</span> <span class="n">MKMapPointsPerMeterAtLatitude</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">);</span>
    <span class="n">MKMapRect</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">MKMapRectMake</span><span class="p">(</span><span class="n">upperLeft</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="mi">200</span><span class="o">*</span><span class="n">pointsPerMeter</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">upperLeft</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="mi">200</span><span class="o">*</span><span class="n">pointsPerMeter</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="mi">200</span><span class="o">*</span><span class="n">pointsPerMeter</span><span class="p">,</span> <span class="mi">200</span><span class="o">*</span><span class="n">pointsPerMeter</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">bounds</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>从实现可以看到，Portal的 coordinate: 由创建时的 (latitude,longitude) 确定，而玩家离该Portal的距离，则用 distanceFromCoordinate: 计算得来。boundingMapRect: 暂时没看懂，放着继续看其他部分了。。。</p>

<p>回到 ScannerViewController 的 refresh: 函数，里面异步的获取Portal信息，并添加到mapView中：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - Data Refresh</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">refresh</span> <span class="p">{</span>
   <span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span>  <span class="o">=</span> <span class="p">[</span><span class="bp">NSManagedObjectContext</span> <span class="n">MR_contextForCurrentThread</span><span class="p">];</span>

    <span class="p">[[</span><span class="n">API</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">getObjectsWithCompletionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>

        <span class="p">[</span><span class="n">context</span> <span class="nl">performBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>

            <span class="k">__block</span> <span class="kt">int</span> <span class="n">addedPortals</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="bp">NSArray</span> <span class="o">*</span><span class="n">fetchedPortals</span> <span class="o">=</span> <span class="p">[</span><span class="n">Portal</span> <span class="nl">MR_findAllWithPredicate</span><span class="p">:[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:</span><span class="s">@&quot;completeInfo = YES&quot;</span><span class="p">]</span> <span class="nl">inContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">Portal</span> <span class="o">*</span><span class="n">portal</span> <span class="k">in</span> <span class="n">fetchedPortals</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//NSLog(@&quot;adding portal to map: %@ (%f, %f)&quot;, portal.subtitle, portal.latitude, portal.longitude);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">portal</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">portal</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">MKMapRectContainsPoint</span><span class="p">(</span><span class="n">_mapView</span><span class="p">.</span><span class="n">visibleMapRect</span><span class="p">,</span> <span class="n">MKMapPointForCoordinate</span><span class="p">(</span><span class="n">portal</span><span class="p">.</span><span class="n">coordinate</span><span class="p">)))</span> <span class="p">{</span>
                    <span class="c1">// 如果Portal在视野范围内</span>
                    <span class="n">addedPortals</span><span class="o">++</span><span class="p">;</span>
                    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                        <span class="c1">// portal既作为MKAnnotation又作为MKOverlay添加到mapView中</span>
                        <span class="p">[</span><span class="n">_mapView</span> <span class="nl">addAnnotation</span><span class="p">:</span><span class="n">portal</span><span class="p">];</span>
                        <span class="p">[</span><span class="n">_mapView</span> <span class="nl">addOverlay</span><span class="p">:</span><span class="n">portal</span><span class="p">];</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>

        <span class="p">}];</span>
    <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<p>接着在 ScannerViewController 的 mapView:viewForAnnotation: 里，创建或者重用已存在的MKAnnotationView：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">MKAnnotationView</span> <span class="o">*</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="bp">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span> <span class="nf">viewForAnnotation:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">MKAnnotation</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">annotation</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">annotation</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Portal</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">AnnotationViewID</span> <span class="o">=</span> <span class="s">@&quot;portalAnnotationView&quot;</span><span class="p">;</span>

        <span class="bp">MKAnnotationView</span> <span class="o">*</span><span class="n">annotationView</span> <span class="o">=</span> <span class="cm">/*(PortalAnnotationView *)*/</span><span class="p">[</span><span class="n">_mapView</span> <span class="nl">dequeueReusableAnnotationViewWithIdentifier</span><span class="p">:</span><span class="n">AnnotationViewID</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">annotationView</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 没有指定Identifier的MKAnnotationView则创建一个</span>
            <span class="n">annotationView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">MKAnnotationView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAnnotation</span><span class="p">:</span><span class="n">annotation</span> <span class="nl">reuseIdentifier</span><span class="p">:</span><span class="n">AnnotationViewID</span><span class="p">];</span>
            <span class="n">annotationView</span><span class="p">.</span><span class="n">canShowCallout</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">annotationView</span><span class="p">.</span><span class="n">annotation</span> <span class="o">=</span> <span class="n">annotation</span><span class="p">;</span>

        <span class="n">Portal</span> <span class="o">*</span><span class="n">portal</span> <span class="o">=</span> <span class="p">(</span><span class="n">Portal</span> <span class="o">*</span><span class="p">)</span><span class="n">annotation</span><span class="p">;</span>
        <span class="n">annotationView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">Utilities</span> <span class="nl">iconForPortal</span><span class="p">:</span><span class="n">portal</span><span class="p">];</span>        <span class="c1">// 仅仅是为了触摸？这个图像好像没用</span>

        <span class="k">return</span> <span class="n">annotationView</span><span class="p">;</span>

    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">annotation</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Item</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="bp">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span> <span class="nf">didSelectAnnotationView:</span><span class="p">(</span><span class="bp">MKAnnotationView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">_mapView</span> <span class="nl">deselectAnnotation</span><span class="p">:</span><span class="n">view</span><span class="p">.</span><span class="n">annotation</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">view</span><span class="p">.</span><span class="n">annotation</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Portal</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="n">currentPortal</span> <span class="o">=</span> <span class="p">(</span><span class="n">Portal</span> <span class="o">*</span><span class="p">)</span><span class="n">view</span><span class="p">.</span><span class="n">annotation</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">virusToUse</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">([</span><span class="n">currentPortal</span> <span class="nl">distanceFromCoordinate</span><span class="p">:</span><span class="n">_mapView</span><span class="p">.</span><span class="n">centerCoordinate</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">SCANNER_RANGE</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">([[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">boolForKey</span><span class="p">:</span><span class="n">DeviceSoundToggleEffects</span><span class="p">])</span> <span class="p">{</span>
                    <span class="p">[[</span><span class="n">SoundManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">playSound</span><span class="p">:</span><span class="s">@&quot;Sound/sfx_ui_success.aif&quot;</span><span class="p">];</span>
                <span class="p">}</span>

                <span class="bp">UIActionSheet</span> <span class="o">*</span><span class="n">actionSheet</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIActionSheet</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Confirm Deployment&quot;</span> <span class="nl">delegate</span><span class="p">:</span><span class="nb">self</span> <span class="nl">cancelButtonTitle</span><span class="p">:</span><span class="s">@&quot;Cancel&quot;</span> <span class="nl">destructiveButtonTitle</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">otherButtonTitles</span><span class="p">:</span><span class="s">@&quot;Confirm&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
                <span class="n">actionSheet</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
                <span class="p">[</span><span class="n">actionSheet</span> <span class="nl">showInView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">window</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="p">[</span><span class="nb">self</span> <span class="nl">performSegueWithIdentifier</span><span class="p">:</span><span class="s">@&quot;PortalDetailSegue&quot;</span> <span class="nl">sender</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">view</span><span class="p">.</span><span class="n">annotation</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Item</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>mapView:didSelectAnnotationView: 里处理触摸事件，virusToUse暂时不明白是啥，不过看上去如果为YES，判断是否在范围内，然后弹出个确认对话框；如果为NO则直接 performSegueWithIdentifier: 到 PortalDetailSegue。</p>

<p>接着处理Portal的MKOverlayView。因为需要自定义绘制，在 Model - Overlay Views - PortalOverlayView.m 里进行了定制化的绘制：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">PortalOverlayView</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawMapRect:</span><span class="p">(</span><span class="n">MKMapRect</span><span class="p">)</span><span class="nv">mapRect</span> <span class="nf">zoomScale:</span><span class="p">(</span><span class="n">MKZoomScale</span><span class="p">)</span><span class="nv">zoomScale</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">CGContextRef</span><span class="p">)</span><span class="nv">context</span>
<span class="p">{</span>
    <span class="n">ScannerViewController</span> <span class="o">*</span><span class="n">scannerVC</span> <span class="o">=</span> <span class="p">[</span><span class="n">AppDelegate</span> <span class="n">instance</span><span class="p">].</span><span class="n">scannerViewController</span><span class="p">;</span>
    <span class="n">Portal</span> <span class="o">*</span><span class="n">portal</span> <span class="o">=</span> <span class="p">(</span><span class="n">Portal</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">overlay</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">portal</span><span class="p">.</span><span class="n">completeInfo</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">CGImageRef</span> <span class="n">portalImage</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">portal</span><span class="p">.</span><span class="n">completeInfo</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">portal</span><span class="p">.</span><span class="n">controllingTeam</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;ALIENS&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">portalImage</span> <span class="o">=</span> <span class="n">scannerVC</span><span class="p">.</span><span class="n">alienPortalImage</span><span class="p">.</span><span class="bp">CGImage</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">portal</span><span class="p">.</span><span class="n">completeInfo</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">portal</span><span class="p">.</span><span class="n">controllingTeam</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;RESISTANCE&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">portalImage</span> <span class="o">=</span> <span class="n">scannerVC</span><span class="p">.</span><span class="n">resistancePortalImage</span><span class="p">.</span><span class="bp">CGImage</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">portalImage</span> <span class="o">=</span> <span class="n">scannerVC</span><span class="p">.</span><span class="n">neutralPortalImage</span><span class="p">.</span><span class="bp">CGImage</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">MKMapPoint</span> <span class="n">portalCenter</span> <span class="o">=</span> <span class="n">MKMapPointForCoordinate</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">overlay</span><span class="p">.</span><span class="n">coordinate</span><span class="p">);</span>
        <span class="bp">CGPoint</span> <span class="n">portalCenterPoint</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">pointForMapPoint</span><span class="p">:</span><span class="n">portalCenter</span><span class="p">];</span>

        <span class="c1">// 看到这里还是没明白 boundingMapRect: 里的(200*pointsPerMeter/2)是怎么算的，Magic Number?</span>
        <span class="n">CGFloat</span> <span class="n">portalSize</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>

        <span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">portalCenterPoint</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="n">portalSize</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">portalCenterPoint</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">portalSize</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">portalSize</span><span class="p">,</span> <span class="n">portalSize</span><span class="p">),</span> <span class="n">portalImage</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div>
<p>ScannerViewController 的 mapView:viewForOverlay: 比较简单：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">MKOverlayView</span> <span class="o">*</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="bp">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span> <span class="nf">viewForOverlay:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">MKOverlay</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">overlay</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">Portal</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="c1">// 交给 PortalOverlayView 处理</span>
        <span class="n">PortalOverlayView</span> <span class="o">*</span><span class="n">overlayView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PortalOverlayView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithOverlay</span><span class="p">:</span><span class="n">overlay</span><span class="p">];</span>
        <span class="k">return</span> <span class="n">overlayView</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">MKPolyline</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="bp">MKPolyline</span> <span class="o">*</span><span class="n">polyline</span> <span class="o">=</span> <span class="p">(</span><span class="bp">MKPolyline</span> <span class="o">*</span><span class="p">)</span><span class="n">overlay</span><span class="p">;</span>
        <span class="bp">MKPolylineView</span> <span class="o">*</span><span class="n">polylineView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">MKPolylineView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithPolyline</span><span class="p">:</span><span class="n">polyline</span><span class="p">];</span>
        <span class="n">polylineView</span><span class="p">.</span><span class="n">strokeColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">Utilities</span> <span class="nl">colorForFaction</span><span class="p">:</span><span class="n">polyline</span><span class="p">.</span><span class="n">portalLink</span><span class="p">.</span><span class="n">controllingTeam</span><span class="p">];</span>
        <span class="n">polylineView</span><span class="p">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">polylineView</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">MKPolygon</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="bp">MKPolygon</span> <span class="o">*</span><span class="n">polygon</span> <span class="o">=</span> <span class="p">(</span><span class="bp">MKPolygon</span> <span class="o">*</span><span class="p">)</span><span class="n">overlay</span><span class="p">;</span>
        <span class="bp">MKPolygonView</span> <span class="o">*</span><span class="n">polygonView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">MKPolygonView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithPolygon</span><span class="p">:</span><span class="n">polygon</span><span class="p">];</span>
        <span class="n">polygonView</span><span class="p">.</span><span class="n">fillColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">Utilities</span> <span class="nl">colorForFaction</span><span class="p">:</span><span class="n">polygon</span><span class="p">.</span><span class="n">controlField</span><span class="p">.</span><span class="n">controllingTeam</span><span class="p">];</span>
        <span class="n">polygonView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">.1</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">polygonView</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">MKCircle</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="bp">MKCircle</span> <span class="o">*</span><span class="n">circle</span> <span class="o">=</span> <span class="p">(</span><span class="bp">MKCircle</span> <span class="o">*</span><span class="p">)</span><span class="n">overlay</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">circle</span><span class="p">.</span><span class="n">deployedResonator</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">DeployedResonatorView</span> <span class="o">*</span><span class="n">circleView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">DeployedResonatorView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCircle</span><span class="p">:</span><span class="n">circle</span><span class="p">];</span>
            <span class="n">circleView</span><span class="p">.</span><span class="n">fillColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">Utilities</span> <span class="nl">colorForLevel</span><span class="p">:</span><span class="n">circle</span><span class="p">.</span><span class="n">deployedResonator</span><span class="p">.</span><span class="n">level</span><span class="p">];</span>
            <span class="k">return</span> <span class="n">circleView</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">XMOverlay</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="n">XMOverlayView</span> <span class="o">*</span><span class="n">xmOverlayView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">XMOverlayView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithOverlay</span><span class="p">:</span><span class="n">overlay</span><span class="p">];</span>
        <span class="n">_xmOverlayView</span> <span class="o">=</span> <span class="n">xmOverlayView</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">xmOverlayView</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>写了一遍才体会到，原来MKAnnotation仅仅是用来响应触摸的([Utilities iconForPortal:portal]返回的是一张30x30的空UIImage，这里只是用来占位)，而MKOverlay才是绘制实际的图片(另外要注意CGContextDrawImage绘制的是用户空间，是倒着的图片)。在Apple总部的位置，画了个商店的图标：</p>

<p><img src="http://blog.imaou.com/images/ingress-ios_reading2_img1.png" alt="Merchant Overlay Draw"></p>

<p>触摸该MKAnnotation显示位置和class的名字。</p>
]]></content:encoded>
      <dc:date>2014-09-16T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>为PixivAPI的example，增加三列显示的UICollectionView及自动翻页</title>
      <link>http://blog.imaou.com/opensource/2014/09/12/Pixiv_demo_with_UICollectionView.html</link>
      <description><![CDATA[昨晚更新iPad到7.1.2后，终于在iPad上试了下PixivDaily。说实话，UITableView用来显示图片确实太小，在iPad2上50x50像素简直看不清内容。于是花了一中午把UICollectionView加了进去。
]]></description>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/09/12/Pixiv_demo_with_UICollectionView.html</guid>
      <content:encoded><![CDATA[<p>昨晚更新iPad到7.1.2后，终于在iPad上试了下<a href="https://github.com/upbit/PixivAPI_iOS/tree/master/examples/PixivDaily">PixivDaily</a>。说实话，UITableView用来显示图片确实太小，在iPad2上50x50像素简直看不清内容。于是花了一中午把UICollectionView加了进去。</p>

<p>和UITableView一样，先定义一个UICollectionViewController的父类，方便显示IllustModel：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">PixivIllustCollectionViewController</span> : <span class="bp">UICollectionViewController</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">illusts</span><span class="p">;</span>     <span class="c1">// of IllustModel</span>
<span class="k">@end</span>
</code></pre></div>
<p>里面类似主要实现如下几个方法：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - UICollectionViewDataSource</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">numberOfItemsInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="n">count</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">UICollectionViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">cellForItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">CellIdentifier</span> <span class="o">=</span> <span class="s">@&quot;Image ColCell&quot;</span><span class="p">;</span>
    <span class="bp">UICollectionViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">collectionView</span> <span class="nl">dequeueReusableCellWithReuseIdentifier</span><span class="p">:</span><span class="n">CellIdentifier</span> <span class="nl">forIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">IllustModel</span> <span class="o">*</span><span class="n">illust</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>

        <span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
        <span class="n">cell</span><span class="p">.</span><span class="n">backgroundView</span> <span class="o">=</span> <span class="n">imageView</span><span class="p">;</span>

        <span class="c1">// download illusts.thumbURL for cell image</span>
        <span class="p">[</span><span class="n">imageView</span> <span class="nl">sd_setImageWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">illust</span><span class="p">.</span><span class="n">thumbURL</span><span class="p">]</span>
                     <span class="nl">placeholderImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;placeholder&quot;</span><span class="p">]</span> <span class="nl">options</span><span class="p">:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="nl">SDWebImageRefreshCached</span> <span class="p">:</span> <span class="mi">0</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>注意，因为只显示一张缩略图，collectionView:cellForItemAtIndexPath: 里并没有设置cell的大小，直接将 cell.backgroundView 设置为目标UIImageView。此时图片显示大小会根据 UICollectionView 的配置而显示。</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - Navigation</span>

<span class="c1">// In a storyboard-based application, you will often want to do a little preparation before navigation</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="c1">// Get the new view controller using [segue destinationViewController].</span>
    <span class="c1">// Pass the selected object to the new view controller.</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">sender</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">UICollectionViewCell</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="bp">NSIndexPath</span> <span class="o">*</span><span class="n">indexPath</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">indexPathForCell</span><span class="p">:</span><span class="n">sender</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;Show Image&quot;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">PixivImageViewController</span> <span class="k">class</span><span class="p">]]))</span> <span class="p">{</span>
                <span class="p">[</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span> <span class="nl">setHidesBottomBarWhenPushed</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
                <span class="p">[</span><span class="nb">self</span> <span class="nl">prepareImageViewController</span><span class="p">:</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span> <span class="nl">toDisplayPhoto</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span> <span class="nl">mobileSize</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>至于 prepareImageViewController: 则和之前一样，用于准备SDWebImageViewController</p>

<p>再创建一个 DailyRankingCollectionViewController 继承于 PixivIllustCollectionViewController()，用于控制View显示日榜内容。唯一不同的是UICollectionView没有 willDisplayCell: 方法，需要自己在 collectionView:cellForItemAtIndexPath: 里进行判断。因此重载父类的该方法，在执行前先检查是否达到末尾：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">UICollectionViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">cellForItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span> <span class="o">==</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="n">count</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span> <span class="n">loadMoreIllusts</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">collectionView</span><span class="p">:</span><span class="n">collectionView</span> <span class="nl">cellForItemAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>如果此时运行，会发现 UICollectionViewCell 只有默认的 50x50 像素，而且两两之间存在很粗的黑边。此时只需要在StoryBoard里配置 UICollectionView 的 Collection View Size，即可完成UICollectionView布局的定制：</p>

<p><img src="http://blog.imaou.com/images/collection_view_size_for_PixivDaily.png" alt="PixivDaily View Size"></p>

<p>完成后的iPad布局如下：</p>

<p><img src="https://raw.github.com/upbit/PixivAPI_iOS/master/examples/screenshots/PixivDaily_04.png" alt="PixivDaily iPad Screenshot2"></p>

<p>当然，如果是需要UICollectionView全屏显示或者让Cell自适应屏幕宽度，就需要用到 <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionViewDelegateFlowLayout_protocol/Reference/Reference.html">UICollectionViewDelegateFlowLayout</a> 里的 collectionView:layout:sizeForItemAtIndexPath: 方法了，返回一个经过计算的 CGSize 来调整 UICollectionViewCell 的显示大小。</p>
]]></content:encoded>
      <dc:date>2014-09-12T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Google Nest破解与智能设备安全随想</title>
      <link>http://blog.imaou.com/hack/2014/09/04/nest_dfu_attack_and_more.html</link>
      <description><![CDATA[今天有幸在QQ上和看雪坛主聊了几句，感触颇深。学生时代就是在图书馆看他的书启蒙的，也是那年代头一次知道有个论坛叫“看雪”。说来惭愧，个人在安全方面建树不深，之前凭一篇《GSM Sniffing入门》去论坛混精华的帖子，居然让坛主产生我在硬件方面有所研究的错觉... 不过聊到智能设备，确实也勾起我那爱折腾的心。之前买树莓派折腾各种电路板、到现在折腾路由器，其实这些智能设备离我们并不远。
]]></description>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/hack/2014/09/04/nest_dfu_attack_and_more.html</guid>
      <content:encoded><![CDATA[<p>今天有幸在QQ上和看雪坛主聊了几句，感触颇深。学生时代就是在图书馆看他的书启蒙的，也是那年代头一次知道有个论坛叫“看雪”。说来惭愧，个人在安全方面建树不深，之前凭一篇<a href="http://bbs.pediy.com/showthread.php?t=182574">《GSM Sniffing入门》</a>去论坛混精华的帖子，居然让坛主产生我在硬件方面有所研究的错觉... 不过聊到智能设备，确实也勾起我那爱折腾的心。之前买树莓派折腾各种电路板、到现在折腾路由器，其实这些智能设备离我们并不远。</p>

<p>说到智能硬件，不得不提最近最火爆的Google Nest被黑一事。早在5月底就有人放出了视频<a href="https://www.youtube.com/watch?v=7AnvTgAKa-g">Hacking into the Nest Thermostat (SSL@UCF)</a>(要翻墙)。随后，Grant Hernandez, Orlando Arias, Daniel Buentello, and Yier Jin在黑帽大会US-14上发布了 <a href="https://www.blackhat.com/docs/us-14/materials/us-14-Jin-Smart-Nest-Thermostat-A-Smart-Spy-In-Your-Home-WP.pdf">Smart Nest Thermostat: A Smart Spy in Your Home</a> 这篇论文。</p>

<p>论文里提到，在重置Nest时会导致 sys_boot5 高电平(貌似和TI AM3703这个CPU有关)，而这个引脚会直接触发USB启动。从而可以通过USB口，将自定义的x-loader刷入到Nest中，从而获取Shell并进一步获取Nest的控制权。文末还提到，<strong>这个漏洞可以在其他使用类似CPU的设备上应用！</strong></p>

<p>然而论文都是简洁的，无一例外的需要你大量的Google相关资料。万幸找到GTVHacker的<a href="http://blog.gtvhacker.com/2014/google-nest-exploiting-dfu-for-root/">一篇博文</a>，里面从获取root的角度提到了这个漏洞的另一些细节：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">The Bug:

The Nest uses a CPU similar to the OMAP3630 series. This CPU features a Device Firmware Update (DFU) mode that can be accessed by holding down the Nest’s screen while off. This mode is intended for the manufacturer to easily diagnose and repair the device. Unfortunately, in the case of the Nest, this mode also allows us to modify the device without restriction.
</code></pre></div>
<p>德州仪器的这块CPU存在一个DFU模式，原本是用于厂商诊断和修复设备用的，但对于Nest则可以用来刷入自定义固件。</p>

<p>这篇文章提到了详细的攻击过程：</p>

<ol>
<li>通过 omap3_loader 上传自定义固件到DFU模式的Nest里；</li>
<li>先传入stage 1的x-loader，x-loader用于加载stage 2的U-Boot；(这里和黑帽大会里说的方法不太一样？不是直接改x-loader？)</li>
<li>修改U-Boot，在里面放入ssh server: Dropbear；</li>
<li>启动一个脚本，定时检查Nest虚拟磁盘中的host.txt，从中读取配置建立反向的SSH连接；</li>
</ol>

<p>作者甚至还开源了整个root过程用到的源码：<a href="https://github.com/gtvhacker/NestDFUAttack">NestDFUAttack</a> 对照<a href="https://nest.com/legal/compliance/">Nest开源的代码</a>，应该有可能看出是怎么修改U-Boot到获取root的。这回有东西可以研究了:)</p>
]]></content:encoded>
      <dc:date>2014-09-04T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>Ingress-iOS ports代码阅读1 - ScannerViewController</title>
      <link>http://blog.imaou.com/opensource/2014/09/04/ingress_ios_code_reading1.html</link>
      <description><![CDATA[昨晚装上VPN兴冲冲出去把Ingress升到了Lv2，觉得这种实境&quot;世界&quot;实在是让宅男出门的最佳办法，何况它还打着拯救/奴役世界的幌子。想想不用实现的这么复杂，只要有个简单的户外游戏，就能够持续给予我外出的动力：能够根据行走的距离累计游戏内的点数(或金钱)，完成一些特殊地点才能取得的成就，乃至通过自己的努力改变虚拟世界的状态(例如经商模拟类游戏，通过物品的交易提升某个地域的贸易等级，从而慢慢从小镇发展为城邦甚至王国)
]]></description>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/09/04/ingress_ios_code_reading1.html</guid>
      <content:encoded><![CDATA[<p>昨晚装上VPN兴冲冲出去把Ingress升到了Lv2，觉得这种实境&quot;世界&quot;实在是让宅男出门的最佳办法，何况它还打着拯救/奴役世界的幌子。想想不用实现的这么复杂，只要有个简单的户外游戏，就能够持续给予我外出的动力：能够根据行走的距离累计游戏内的点数(或金钱)，完成一些特殊地点才能取得的成就，乃至通过自己的努力改变虚拟世界的状态(例如经商模拟类游戏，通过物品的交易提升某个地域的贸易等级，从而慢慢从小镇发展为城邦甚至王国)</p>

<p>于是在GitHub上找到了曾经有人ports的 <a href="https://github.com/marstone/ingress-ios">Ingress for iOS</a>，打算下载下代码自己研究下，于是有了这篇文章。</p>

<p>先研究主界面，虽然没有现在Ingress那么绚丽，但也足够满足最初的需求了。以下是运行截图：</p>

<p><img src="/images/ingress-ios_screenshot.png" alt="Ingress for iOS"></p>

<p>从StoryBoard里可以看到，最初显示的由LoadingViewController控制，出口一个是Enbed Segue: GLKView，另一个则是Model Segue: ScannerViewController，也就是上面的正题 MapKit 界面。根据 Model Seque 的Identifier &quot;LoadingCompletedSegue&quot;可以找到如下代码：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;LoadingCompletedSegue&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[[</span><span class="n">AppDelegate</span> <span class="n">instance</span><span class="p">]</span> <span class="nl">setScannerViewController</span><span class="p">:(</span><span class="n">ScannerViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">([[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">boolForKey</span><span class="p">:</span><span class="n">DeviceSoundToggleBackground</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[[</span><span class="n">SoundManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">playMusic</span><span class="p">:</span><span class="s">@&quot;Sound/sfx_ambient_scanner_base.aif&quot;</span> <span class="nl">looping</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>在loading动画结束后，切换ScannerViewController，并播放背景音效&quot;Sound/sfx<em>ambient</em>scanner_base.aif&quot;</p>

<p>转到ScannerViewController，从它的两个连接都是处理地图点击的，暂时不用关心：</p>

<ol>
<li>Model Seque<PortalDetailSegue>: PortalDetailViewController</li>
<li>Model Seque<FactionChooseSegue>: MissionViewController</li>
</ol>

<p>回到ScannerViewController的 viewDidLoad:，先初始化几个单例类，然后将自身的_mapView导出到AppDelegate里的mapView变量里，并检查app是否有定位权限：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>

    <span class="p">[[</span><span class="n">AppDelegate</span> <span class="n">instance</span><span class="p">]</span> <span class="nl">setMapView</span><span class="p">:</span><span class="n">_mapView</span><span class="p">];</span>

    <span class="c1">// 检查app是否有定位服务的权限</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">validateLocationServicesAuthorization</span><span class="p">];</span>
    <span class="p">...</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">validateLocationServicesAuthorization</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="bp">CLLocationManager</span> <span class="n">authorizationStatus</span><span class="p">]</span> <span class="o">!=</span> <span class="n">kCLAuthorizationStatusAuthorized</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 没有定位权限，显示 &quot;Please allow location services&quot; 的提示</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">locationAllowHUD</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">_mapView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="n">playerArrowImage</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="c1">// MBProgressHUD: Displays a simple HUD window containing a progress indicator and two optional labels for short messages</span>
            <span class="n">locationAllowHUD</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MBProgressHUD</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
            <span class="n">locationAllowHUD</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
            <span class="n">locationAllowHUD</span><span class="p">.</span><span class="n">mode</span> <span class="o">=</span> <span class="n">MBProgressHUDModeCustomView</span><span class="p">;</span>
            <span class="n">locationAllowHUD</span><span class="p">.</span><span class="n">customView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;warning.png&quot;</span><span class="p">]];</span>
            <span class="n">locationAllowHUD</span><span class="p">.</span><span class="n">labelText</span> <span class="o">=</span> <span class="s">@&quot;Please allow location services&quot;</span><span class="p">;</span>
            <span class="n">locationAllowHUD</span><span class="p">.</span><span class="n">labelFont</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">fontWithName</span><span class="p">:[[[</span><span class="bp">UILabel</span> <span class="n">appearance</span><span class="p">]</span> <span class="n">font</span><span class="p">]</span> <span class="n">fontName</span><span class="p">]</span> <span class="nl">size</span><span class="p">:</span><span class="mi">16</span><span class="p">];</span>
            <span class="n">locationAllowHUD</span><span class="p">.</span><span class="n">removeFromSuperViewOnHide</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="k">__weak</span> <span class="k">__block</span> <span class="k">typeof</span><span class="p">(</span><span class="n">locationAllowHUD</span><span class="p">)</span> <span class="n">weakLocationAllowHUD</span> <span class="o">=</span> <span class="n">locationAllowHUD</span><span class="p">;</span>
            <span class="n">locationAllowHUD</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
                <span class="n">weakLocationAllowHUD</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
            <span class="p">};</span>
            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">locationAllowHUD</span><span class="p">];</span>
            <span class="p">[</span><span class="n">locationAllowHUD</span> <span class="nl">show</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">locationAllowHUD</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">locationAllowHUD</span> <span class="nl">hide</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
            <span class="n">_mapView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
            <span class="n">playerArrowImage</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nb">self</span> <span class="n">updateRangeCircleView</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>接着从StoryBoard里读取CommViewController模板，添加到SubView中：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>

    <span class="bp">UIStoryboard</span> <span class="o">*</span><span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIStoryboard</span> <span class="nl">storyboardWithName</span><span class="p">:</span><span class="s">@&quot;MainStoryboard_iPhone&quot;</span> <span class="nl">bundle</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
    <span class="n">commVC</span> <span class="o">=</span> <span class="p">[</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier</span><span class="p">:</span><span class="s">@&quot;CommViewController&quot;</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">commVC</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>

    <span class="p">[</span><span class="nb">self</span> <span class="n">updateCommViewControllerFrame</span><span class="p">];</span>
    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">statusBarFrameDidChange</span><span class="p">:)</span> <span class="nl">name</span><span class="p">:</span><span class="n">UIApplicationDidChangeStatusBarFrameNotification</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span> <span class="nl">addChildViewController</span><span class="p">:</span><span class="n">commVC</span><span class="p">];</span>

<span class="p">}</span>
</code></pre></div>
<p>根据StoryBoard布局，这个层是对话框界面，暂时pass继续向后看。接着初始化LocationManager和手势操作：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>

    <span class="p">[[</span><span class="n">LocationManager</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">addDelegate</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>

    <span class="bp">UIPinchGestureRecognizer</span> <span class="o">*</span><span class="n">recognizer</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPinchGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handlePinch</span><span class="p">:)];</span>
    <span class="p">[</span><span class="n">_mapView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">recognizer</span><span class="p">];</span>

    <span class="bp">UILongPressGestureRecognizer</span> <span class="o">*</span><span class="n">mapViewLognPressGestureRecognizer</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILongPressGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">mapLongPress</span><span class="p">:)];</span>
    <span class="p">[</span><span class="n">_mapView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">mapViewLognPressGestureRecognizer</span><span class="p">];</span>

    <span class="cp">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 70000</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">_mapView</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">isPitchEnabled</span><span class="p">)])</span> <span class="p">{</span>
        <span class="n">_mapView</span><span class="p">.</span><span class="n">pitchEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">_mapView</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">isRotateEnabled</span><span class="p">)])</span> <span class="p">{</span>
        <span class="n">_mapView</span><span class="p">.</span><span class="n">rotateEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cp">#endif</span>

<span class="p">}</span>
</code></pre></div>
<p>先设置 LocationManager <CLLocationManagerDelegate> 为self，然后绑定Pinch手势到handlePinch:，LongPress手势到mapLongPress:。iOS7.0以上SDK时，还设置MapKit本身无法Pitch和Rotate。</p>

<p>LocationManager是一个自定义对CLLocationManager的单例封装，里面包含了对CLLocationManager的初始化操作：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>

        <span class="n">_delegates</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>

        <span class="n">_locationManager</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
        <span class="n">_locationManager</span><span class="p">.</span><span class="n">desiredAccuracy</span> <span class="o">=</span> <span class="n">kCLLocationAccuracyBestForNavigation</span><span class="p">;</span>        <span class="c1">// 设置为最佳精度(不怕过于耗电?)</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">_locationManager</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">activityType</span><span class="p">)])</span> <span class="p">{</span>
            <span class="n">_locationManager</span><span class="p">.</span><span class="n">activityType</span> <span class="o">=</span> <span class="n">CLActivityTypeFitness</span><span class="p">;</span>                      <span class="c1">// 当位置改变时才进行跟踪</span>
        <span class="p">}</span>
        <span class="n">_locationManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>

        <span class="p">[</span><span class="n">_locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
        <span class="p">[</span><span class="n">_locationManager</span> <span class="n">startUpdatingHeading</span><span class="p">];</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>XMOverlay是一个MKOverlay协议的对象，貌似是用于绘制什么内容到Map上的。暂时看不懂，不过也有<a href="http://stackoverflow.com/questions/5283741/how-do-i-create-an-image-overlay-and-add-to-mkmapview">How do I create an image overlay and add to MKMapView?</a>这样的例子可以参考，暂时也不用管它：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>

    <span class="n">_xmOverlay</span> <span class="o">=</span> <span class="p">[</span><span class="n">XMOverlay</span> <span class="n">new</span><span class="p">];</span>
    <span class="p">[</span><span class="n">_mapView</span> <span class="nl">addOverlay</span><span class="p">:</span><span class="n">_xmOverlay</span><span class="p">];</span>

<span class="p">}</span>
</code></pre></div>
<p>后面的quickActionsMenu初始化和NSNotificationCenter部分，无关地图绘制的部分就先pass了。</p>

<p>未完待续：<a href="http://blog.imaou.com/opensource/2014/09/16/ingress_ios_code_reading2.html">Ingress-iOS ports代码阅读2 - Portal的绘制</a></p>
]]></content:encoded>
      <dc:date>2014-09-04T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>继续完善PixivDaily，增加iPad布局和图片的单击、双击操作</title>
      <link>http://blog.imaou.com/opensource/2014/09/01/update_pixivdaily_demo.html</link>
      <description><![CDATA[作为一个图片浏览应用，PixivDaily的功能实在太简单了，连最基本的双击改变缩放模式都没有。于是给这个作为Pixiv API for iOS的example的程序，增加了一些列如单击隐藏标题栏、双击切换缩放比例；图片宽度自适应；UITableView到底部后自动加载下一页；图片导出到Documents/等功能，算是学完CS193p的知识补充。这里记录下实现的过程，方便以后查阅。
]]></description>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/09/01/update_pixivdaily_demo.html</guid>
      <content:encoded><![CDATA[<p>作为一个图片浏览应用，PixivDaily的功能实在太简单了，连最基本的双击改变缩放模式都没有。于是给这个作为Pixiv API for iOS的example的程序，增加了一些列如单击隐藏标题栏、双击切换缩放比例；图片宽度自适应；UITableView到底部后自动加载下一页；图片导出到Documents/等功能，算是学完CS193p的知识补充。这里记录下实现的过程，方便以后查阅。</p>

<h3>为图片浏览增加手势: 双击切换缩放状态；单击隐藏标题</h3>

<p>先尝试在StoryBoard里拖放UITapGestureRecognizer，操作很简单不过当复制ImageView时，绑定的Tap手势失效了。第二个View莫名其妙只能触发双击操作，百思不得其解。</p>

<p>于是手工在代码里添加单击、双击的手势：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">singelTap:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="c1">// 单击隐藏NavigationBar</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">setNavigationBarHidden</span><span class="p">:</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">isNavigationBarHidden</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doubleTap:</span><span class="p">(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="c1">// 双击改变缩放比例</span>
    <span class="c1">// height -&gt; width -&gt; 1.0</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">heightZoomScale</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">widthZoomScale</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">widthZoomScale</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">heightZoomScale</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">];</span>

    <span class="c1">// single/double tap gesture</span>
    <span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTapGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">singelTap</span><span class="p">:)];</span>
    <span class="n">singleTapGesture</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">singleTapGesture</span><span class="p">];</span>

    <span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">doubleTapGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">doubleTap</span><span class="p">:)];</span>
    <span class="n">doubleTapGesture</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">doubleTapGesture</span><span class="p">];</span>

    <span class="p">[</span><span class="n">singleTapGesture</span> <span class="nl">requireGestureRecognizerToFail</span><span class="p">:</span><span class="n">doubleTapGesture</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>这样SDWebImageViewController就能顺利响应双击操作了。不过绑定时需要注意，因为是在scrollView中添加的imageView，需要向scrollView上添加手势。而initWithTarget:要用self，因为是发送的[self singelTap]消息，不然就会报这个经典的运行期错误：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="o">***</span> <span class="n">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="err">&#39;</span><span class="n">NSInvalidArgumentException</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">reason</span><span class="p">:</span> <span class="err">&#39;</span><span class="o">-</span><span class="p">[</span><span class="bp">UIScrollView</span> <span class="nl">singelTap</span><span class="p">:]</span><span class="o">:</span> <span class="n">unrecognized</span> <span class="n">selector</span> <span class="n">sent</span> <span class="n">to</span> <span class="n">instance</span> <span class="mh">0x8fc4840</span><span class="err">&#39;</span>
    <span class="mi">2</span>   <span class="n">CoreFoundation</span>                      <span class="mh">0x01c23243</span> <span class="o">-</span><span class="p">[</span><span class="bp">NSObject</span><span class="p">(</span><span class="bp">NSObject</span><span class="p">)</span> <span class="nl">doesNotRecognizeSelector</span><span class="p">:]</span> <span class="o">+</span> <span class="mi">275</span>
</code></pre></div>
<h3>图片宽度/高度自适应</h3>

<p>在StoryBoard里拖iPad布局不难，之前因为都有处理 tableView:didSelectRowAtIndexPath:，直接复制就搞定了：</p>

<p><img src="https://raw.github.com/upbit/PixivAPI_iOS/master/examples/screenshots/PixivDaily_03.png" alt="PixivDaily iPad Screenshot"></p>

<p>唯一没料到的是Zoom，怎么弄都不太对劲。本来想实现尽可能用图片填满屏幕，试了半天发现 maximumZoomScale 会影响缩放比例，不设置的话iPad上又不能填充满ScrollView。</p>

<p>最后看到<a href="http://www.cnblogs.com/wyqfighting/p/3194364.html">这篇文章</a>一语点醒梦中人，imageView.frame里，高宽没有设置放大倍率，这也就是为什么zoomScale怎么设置，图片也只能放大到原始大小的原因。弄清楚这个，整个缩放就很简单了：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#define MAX_ILLUST_ZOOM_SCALE (2.0)</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setScrollView:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
<span class="p">{</span>
    <span class="n">_scrollView</span><span class="p">.</span><span class="n">maximumZoomScale</span> <span class="o">=</span> <span class="n">MAX_ILLUST_ZOOM_SCALE</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">contentSize</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">image</span> <span class="o">?</span> <span class="nb">self</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="nl">size</span> <span class="p">:</span> <span class="n">CGSizeZero</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setImage:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span>
<span class="p">{</span>
    <span class="c1">// 这里最重要，frame一定要乘以放大的最大倍率</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="n">MAX_ILLUST_ZOOM_SCALE</span><span class="p">,</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="n">MAX_ILLUST_ZOOM_SCALE</span><span class="p">);</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">contentSize</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">image</span> <span class="o">?</span> <span class="nb">self</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="nl">size</span> <span class="p">:</span> <span class="n">CGSizeZero</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">initZoom</span><span class="p">];</span>
<span class="p">}</span>

<span class="c1">// Zoom to show as much image as possible</span>
<span class="c1">// http://stackoverflow.com/questions/14471298/zooming-uiimageview-inside-uiscrollview-with-autolayout</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">initZoom</span> <span class="p">{</span>
    <span class="kt">float</span> <span class="n">minZoom</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
                        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">minZoom</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">minZoom</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">minimumZoomScale</span> <span class="o">=</span> <span class="n">minZoom</span><span class="p">;</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">widthZoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">heightZoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">widthZoomScale</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didRotateFromInterfaceOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">fromInterfaceOrientation</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">initZoom</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>每次载入图片，调用initZoom()就会自动设置缩放比例了。widthZoomScale / heightZoomScale 分别是宽度适应和高度适应的比例，在双击图片时进行切换，默认宽度适应。</p>

<h3>UITableView向下翻页</h3>

<p>UITableView的向下翻页功能，一直没找到一个简单的实现方法(网上大多是增加一个Load More的Cell，伴随一堆零碎的插入代码)，只好退而求次不显示&quot;Loading...&quot;和小菊花了：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addPageRankingIllusts:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">page</span>
<span class="p">{</span>
    <span class="k">__weak</span> <span class="n">DailyRankingViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="p">[</span><span class="n">PixivFetcher</span> <span class="nl">API_getRanking</span><span class="p">:</span><span class="n">page</span> <span class="nl">mode</span><span class="p">:</span><span class="n">PIXIV_RANKING_MODE_DAY</span> <span class="nl">content</span><span class="p">:</span><span class="n">PIXIV_RANKING_CONTENT_ALL</span>
                       <span class="nl">onSuccess</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">illusts</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">isIllust</span><span class="p">)</span> <span class="p">{</span>
                           <span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">refreshControl</span> <span class="n">endRefreshing</span><span class="p">];</span>
                           <span class="n">weakSelf</span><span class="p">.</span><span class="n">illusts</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">illusts</span> <span class="nl">arrayByAddingObjectsFromArray</span><span class="p">:</span><span class="n">illusts</span><span class="p">];</span>
                       <span class="p">}</span>
                       <span class="nl">onFailure</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">responseCode</span><span class="p">,</span> <span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">connectionError</span><span class="p">)</span> <span class="p">{</span>
                           <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[HTTP %d] %@&quot;</span><span class="p">,</span> <span class="n">responseCode</span><span class="p">,</span> <span class="n">connectionError</span><span class="p">);</span>
                       <span class="p">}];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">loadMoreIllusts</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span> <span class="o">&lt;</span> <span class="n">MAX_FETCH_RANKING_PAGE_NUM</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span><span class="o">++</span><span class="p">;</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Load More - page %u&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span><span class="p">);</span>
        <span class="p">[</span><span class="nb">self</span> <span class="nl">addPageRankingIllusts</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">currentPage</span><span class="p">];</span>
        <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">willDisplayCell:</span><span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nv">cell</span> <span class="nf">forRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span> <span class="o">==</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">illusts</span> <span class="n">count</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span> <span class="n">loadMoreIllusts</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>首先增加 addPageRankingIllusts:，将获取到的指定页码数据，插入到self.illusts中。接着判断 tableView:willDisplayCell:forRowAtIndexPath: 中indexPath.row == [self.illusts count]-1，如果相等说明已经滑到最后一个cell。此时就可以获取翻页数据了。</p>

<h3>导出图片到文件</h3>

<p>这个比较简单，主要是注意iPad默认detail会显示导出按钮，需要判断illust是否有效。另外在主线程里导出2M的图片担心卡住，于是 dispatch<em>async() 再写到Documents/；最后 UIAlertView 则要回到main</em>queue再弹出，不然窗口就冻结了：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">documentsPathForFileName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span>
<span class="p">{</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span><span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">);</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="n">name</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">exportIllustToDocuments:</span><span class="p">(</span><span class="bp">UIBarButtonItem</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">((</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">illust</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">illust</span><span class="p">.</span><span class="n">illustId</span> <span class="o">==</span> <span class="n">PIXIV_ID_INVALID</span><span class="p">))</span>
        <span class="k">return</span><span class="p">;</span>

    <span class="bp">NSString</span> <span class="o">*</span><span class="n">illustName</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;illistid_%u.%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">illust</span><span class="p">.</span><span class="n">illustId</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">illust</span><span class="p">.</span><span class="n">ext</span><span class="p">];</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">illustPath</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">documentsPathForFileName</span><span class="p">:</span><span class="n">illustName</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;export: %@&quot;</span><span class="p">,</span> <span class="n">illustPath</span><span class="p">);</span>

    <span class="k">__weak</span> <span class="n">SDWebImageViewController</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
    <span class="kt">dispatch_queue_t</span> <span class="n">exportQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;export illust&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">exportQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">illust</span><span class="p">.</span><span class="n">ext</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;png&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">image</span><span class="p">)</span> <span class="nl">writeToFile</span><span class="p">:</span><span class="n">illustPath</span> <span class="nl">atomically</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">image</span><span class="p">,</span> <span class="mf">0.92</span><span class="p">)</span> <span class="nl">writeToFile</span><span class="p">:</span><span class="n">illustPath</span> <span class="nl">atomically</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
            <span class="bp">UIAlertView</span> <span class="o">*</span><span class="n">alertView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Export Success!&quot;</span>
                                                                <span class="nl">message</span><span class="p">:</span><span class="n">illustName</span>
                                                               <span class="nl">delegate</span><span class="p">:</span><span class="nb">self</span>
                                                      <span class="nl">cancelButtonTitle</span><span class="p">:</span><span class="nb">nil</span>
                                                      <span class="nl">otherButtonTitles</span><span class="p">:</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
            <span class="p">[</span><span class="n">alertView</span> <span class="n">show</span><span class="p">];</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded>
      <dc:date>2014-09-01T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>PixivAPI_iOS初版完成，附带一个日榜图片查看例子</title>
      <link>http://blog.imaou.com/opensource/2014/08/31/pixiv_api_for_ios.html</link>
      <description><![CDATA[折腾了几天，终于磕磕碰碰的把 PixivAPI_iOS(Pixiv API for iOS) 发布到GitHub了。主要是以前没用过SDWebImage，写PixivDaily这个Demo花了很多时间。不过SDWebImage的Cache和异步下载确实很赞！
]]></description>
      <pubDate>Sun, 31 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/opensource/2014/08/31/pixiv_api_for_ios.html</guid>
      <content:encoded><![CDATA[<p>折腾了几天，终于磕磕碰碰的把 PixivAPI_iOS(Pixiv API for iOS) 发布到<a href="https://github.com/upbit/PixivAPI_iOS">GitHub</a>了。主要是以前没用过SDWebImage，写PixivDaily这个Demo花了很多时间。不过SDWebImage的Cache和异步下载确实很赞！</p>

<h3>1. API的用法介绍</h3>

<p>API为了尽可能简单，决定用block语法将异步获取和Illust解析封装在里面，于是最后调用方式变成了这样：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &quot;PixivFetcher.h&quot;</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getDailyRanking</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">PixivFetcher</span> <span class="nl">API_getRanking</span><span class="p">:</span><span class="mi">1</span> <span class="nl">mode</span><span class="p">:</span><span class="n">PIXIV_RANKING_MODE_DAY</span> <span class="nl">content</span><span class="p">:</span><span class="n">PIXIV_RANKING_CONTENT_ALL</span>
                       <span class="nl">onSuccess</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">illusts</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">isIllust</span><span class="p">)</span> <span class="p">{</span>
                           <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">illusts</span><span class="p">);</span>
                       <span class="p">}</span>
                       <span class="nl">onFailure</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">responseCode</span><span class="p">,</span> <span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">connectionError</span><span class="p">)</span> <span class="p">{</span>
                           <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[HTTP %d] %@&quot;</span><span class="p">,</span> <span class="n">responseCode</span><span class="p">,</span> <span class="n">connectionError</span><span class="p">);</span>
                       <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div>
<p>onSuccess:^(NSArray *illusts, BOOL isIllust) 会在解析成功后调用，NSArray *illusts是一个IllustModel的数组。isIllust透传API的参数，如果是 getUser: 这样获取 Author 信息的API，则 isIllust = NO，此时IllustModel部分属性将没有值</p>

<p>如果responseCode不是200或连接出错时，会调用 onFailure:^(NSURLResponse *response, NSInteger responseCode, NSData *data, NSError *connectionError)，此时可以进行重试或者错误处理</p>

<h3>2. API的请求流程</h3>

<p>对于 API_getRanking: 具体做了些什么，可以概括为以下几个：</p>

<ol>
<li>调用 URLforRanking: 得到 Pixiv SAPI 的请求URL</li>
<li>如果返回是List调用 asyncFetchIllustList:，单个illust则调用 asyncFetchIllust: 异步获取并解析返回为 IllsutModel</li>
<li>以 asyncFetchIllustList: 为例，调用 asyncURLFetch: 并判断返回是否正常，正常则调用 [PixivFetcher parsePayloadList:payload] 解析返回数据，并传递给 onSuccessHandler()；失败则调用 onFailureHandler()</li>
<li>asyncURLFetch: 里先设置 NSMutableURLRequest 的 Referer 和 User-Agent，因为这里调用的是私有的iOS SAPI，必须要稍微伪装下...</li>
<li>接下来就是常规的 [NSURLConnection sendAsynchronousRequest:...] 了，然后淡定的等待返回</li>
</ol>

<h3>3. IllustModel说明</h3>

<p>大部分提供的属性都在<a href="https://github.com/upbit/PixivAPI_iOS/blob/master/PixivFetcher/IllustModel.h">IllustModel.h</a>里，对应字段也标注出来了。</p>

<p>需要说明的是 IllustModel.toDataArray 函数，可以将IllustModel反转化为原始的 NSArray 数组，便于存储到数据库中。解析时需要用到 [PixivFetcher parseDataArrayToModel:] 函数，将 NSArray 重新转化为 IllustModel：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">+</span> <span class="p">(</span><span class="n">IllustModel</span> <span class="o">*</span><span class="p">)</span><span class="nf">parseDataArrayToModel:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span><span class="p">;</span>
</code></pre></div>
<h2>PixivDaily 的截图</h2>

<p>目前完成日榜首页拉取，点击查看图片并记录最近访问：</p>

<p><img src="https://raw.github.com/upbit/PixivAPI_iOS/master/examples/screenshots/PixivDaily_01.png" alt="PixivDaily Screenshot1"></p>

<p><img src="https://raw.github.com/upbit/PixivAPI_iOS/master/examples/screenshots/PixivDaily_02.png" alt="PixivDaily Screenshot2"></p>

<p>不过PixivDaily这个demo还有单击、双击图片操作，日榜翻页等坑要填，今天太累就先到这里吧 (远目</p>
]]></content:encoded>
      <dc:date>2014-08-31T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>使用dnsmasq+pdnsd在WNDRMACv2(OpenWrt)上，让全家科学上网</title>
      <link>http://blog.imaou.com/misc/2014/08/28/speedup_google_with_dnsmasq_and_pdnsd.html</link>
      <description><![CDATA[imouto.host的Google地址又抽风了，各种打不开。
]]></description>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2014/08/28/speedup_google_with_dnsmasq_and_pdnsd.html</guid>
      <content:encoded><![CDATA[<p><a href="https://plus.google.com/100484131192950935968/about">imouto.host</a>的Google地址又抽风了，各种打不开。</p>

<p>虽然这个更新很及时，但一来没有可以用curl脚本获取的地址(作者提供的是Google Drive和Dropbox)，二来台式机和笔记本都要增量更新这个host(因为里面还有防adobe激活的条目)，于是打算一劳永逸的在路由器里解决问题。</p>

<p>其实早就给家里WNDRMACv2刷了OpenWrt，但自从发现跑go-agent经常莫名退出后(当然现在go-agent也不好用了)，它唯一的用途就是拿来做samba服务器了→_→</p>

<p><br/></p>

<p>今天逛Github无意中看到<a href="https://github.com/clowwindy">clowwindy大大</a>的ChinaDNS-C，以前就看过ChinaDNS的python代码，里面很巧妙的用黑名单丢弃无效的DNS应答，于是在路由器里搭建个干净的DNS想法又冒了出来。</p>

<p>然而折腾到中午才意识到，ChinaDNS-C是配合dnsmasq用的，而且需要定时更新黑名单IP列表。于是改用dnsmasq+pdnsd方案，让pdnsd强制用tcp方式访问远端dns，来得到干净的DNS返回。</p>

<p>在墙内科学上网并非简单的事，这里记录下整个过程免得以后再走弯路...</p>

<p><br/></p>

<h3>1. 安装dnsmasq和pdnsd</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text"># opkg update
# opkg install dnsmasq pdnsd
</code></pre></div>
<p>配置方面文章 <a href="https://wido.me/sunteya/use-openwrt-resolve-gfw-dns-spoofing">openwrt 上通过 pdnsd 和 dnsmasq 解决 dns 污染</a> 解释的比较清楚，这里就只列出我的参数配置：</p>

<p>首先为dnsmasq.conf增加conf-dir，并生成个gfw.conf：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">mkdir /etc/dnsmasq.d/
touch /etc/dnsmasq.d/gfw.conf
<span class="nb">echo</span> <span class="s2">&quot;conf-dir=/etc/dnsmasq.d&quot;</span> &gt;&gt; /etc/dnsmasq.conf
</code></pre></div>
<h3>2. 配置pdnsd(/etc/pdnsd.conf)：</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">global <span class="o">{</span>
    <span class="nv">server_ip</span> <span class="o">=</span> 192.168.1.1<span class="p">;</span>
    <span class="nv">server_port</span> <span class="o">=</span> 5353<span class="p">;</span>             <span class="c"># 因为dnsmasq用了53，这里要换一个</span>
    <span class="nv">query_method</span><span class="o">=</span>tcp_only<span class="p">;</span>
<span class="o">}</span>
server <span class="o">{</span>
    <span class="nv">label</span><span class="o">=</span> <span class="s2">&quot;Main&quot;</span><span class="p">;</span>
    <span class="nv">ip</span> <span class="o">=</span> 8.8.8.8<span class="p">;</span>                   <span class="c"># 使用Google的DNS，其实OpenDNS的也可以</span>
    <span class="nv">root_server</span> <span class="o">=</span> on<span class="p">;</span>
    <span class="nv">uptest</span> <span class="o">=</span> none<span class="p">;</span>
<span class="o">}</span>
</code></pre></div>
<p>接着配置/etc/dnsmasq.d/gfw.conf将Google转发到路由器(192.168.1.1)的pdnsd(5353)端口上：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">server</span><span class="o">=</span>/.google.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google.com.hk/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.gmail.com/192.168.1.1#5353
</code></pre></div>
<p>重启dnsmasq和pdnsd：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/etc/init.d/dnsmasq restart
/etc/init.d/pdnsd restart
</code></pre></div>
<h3>3. 解决Google丢包无法访问的问题</h3>

<p>试着dig下gmail：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># dig @192.168.1.1 www.gmail.com

;; ANSWER SECTION:
www.gmail.com.      26832   IN  CNAME   mail.google.com.
mail.google.com.    105726  IN  CNAME   googlemail.l.google.com.
googlemail.l.google.com. 628    IN  A   173.194.33.85
googlemail.l.google.com. 628    IN  A   173.194.33.86
</code></pre></div>
<p>173.194.33.85/173.194.33.86 返回是对了，但是怎么ping不通？拿<a href="http://ping.chinaz.com">工具</a>测试了下，发现虽然这个是Google的IP，但国内很多地方都无法访问。</p>

<p>换了著名的404域名facebook.com，用tcp模式直接对pdnsd dig了下，果然返回了正确地址(假的一般是37.61.54.158)。这个返回IP直接用https是可以访问的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># dig @192.168.1.1 -p5353 www.facebook.com

;; ANSWER SECTION:
www.facebook.com.   1436    IN  CNAME   star.c10r.facebook.com.
star.c10r.facebook.com. 900 IN  A   31.13.79.96
</code></pre></div>
<p>看来最近GFW对Google服务器有特殊照顾，有些地址ping各种丢包，有些则直接100% lost。</p>

<p>想了下imouto.host的解决办法————找到最稳定的Google服务器，imouto.host容易失效无非是那个IP被重新封掉而已，只要找到足够多的有效IP(而不是DNS返回的国外可用IP)，就能保证Google的访问变得流畅。</p>

<p>先查询Google的IP地址段：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># dig @8.8.8.8 _netblocks.google.com txt

; &lt;&lt;&gt;&gt; DiG 9.9.1-P3 &lt;&lt;&gt;&gt; @8.8.8.8 _netblocks.google.com txt
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 30349
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;_netblocks.google.com.     IN  TXT

;; ANSWER SECTION:
_netblocks.google.com.  3599    IN  TXT &quot;v=spf1 ip4:216.239.32.0/19 ip4:64.233.160.0/19 ip4:66.249.80.0/20 ip4:72.14.192.0/18 ip4:209.85.128.0/17 ip4:66.102.0.0/20 ip4:74.125.0.0/16 ip4:64.18.0.0/20 ip4:207.126.144.0/20 ip4:173.194.0.0/16 ~all&quot;

;; Query time: 196 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Thu Aug 28 17:13:19 2014
;; MSG SIZE  rcvd: 265
</code></pre></div>
<p>&quot;v=spf1 ip4:216.239.32.0/19 ip4:64.233.160.0/19 ip4:66.249.80.0/20 ip4:72.14.192.0/18 ip4:209.85.128.0/17 ip4:66.102.0.0/20 ip4:74.125.0.0/16 ip4:64.18.0.0/20 ip4:207.126.144.0/20 ip4:173.194.0.0/16 ~all&quot;</p>

<p>这个就是Google的IP分段，参考imouto.host里google.com/google.com.hk的IP，前后连续ping了几个服务器，然后用https访问确认下是不是Google的搜索服务器。</p>

<p>得到IP后直接在/etc/hosts里增加本地host，重启dnsmasq：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># Google</span>
64.233.168.103  www.google.com
64.233.168.104  www.google.com
64.233.168.105  www.google.com
64.233.168.106  www.google.com
210.242.125.84  www.google.com.hk
210.242.125.88  www.google.com.hk
</code></pre></div>
<p>重启后，Google就被固定在上面几个速度较快的服务器上了。至此成功科学上网。</p>

<p><br/></p>

<h3>另外给一个dnsmasq的完整gfw.conf</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">server</span><span class="o">=</span>/.android.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.appspot.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.blogspot.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.box.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.chrome.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.dropbox.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.dropboxusercontent.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.facebook.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.facebook.net/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.fbcdn.net/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.flickr.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.g.cn/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.g.co/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.ggpht.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.gmail.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.goo.gl/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google-analytics.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google.cn/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google.co.jp/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google.com.hk/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google.com.sg/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.google.com.tw/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googleadservices.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googleapis.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googlecode.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googledrive.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googlehosted.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googlelabs.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googlemail.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googlesource.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googlesyndication.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.googleusercontent.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.gstatic.cn/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.gstatic.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.live.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.mediawiki.org/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.panoramio.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.staticflickr.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.t.co/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.tfbnw.net/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.thefacebook.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.tinypic.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.tweetdeck.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.twimg.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.twitpic.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.twitter.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.wikimedia.org/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.wikinews.org/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.wikipedia.org/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.wordpress.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.wordpress.org/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.wp.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.yimg.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.youtube.com/192.168.1.1#5353
<span class="nv">server</span><span class="o">=</span>/.ytimg.com/192.168.1.1#5353
</code></pre></div>
<p>ps: 好吧，我认了... 原来不光Google.com，绝大多数Google的服务器访问都不太稳定。估计GFW是定期对DNS解析返回的Goolge IP进行封锁，这也就是为什么有些不常用的地址相反又可以访问。看来要想想其他办法了</p>
]]></content:encoded>
      <dc:date>2014-08-28T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>CS193p作业5完成基本功能，备忘下UITableView的Section的用法</title>
      <link>http://blog.imaou.com/study/2014/08/26/CS193p_Assignment5.html</link>
      <description><![CDATA[作业5和第11讲演示的Shutterbug很类似，做起来较为简单。主要遇到下面两个难点：
]]></description>
      <pubDate>Tue, 26 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2014/08/26/CS193p_Assignment5.html</guid>
      <content:encoded><![CDATA[<p>作业5和第11讲演示的Shutterbug很类似，做起来较为简单。主要遇到下面两个难点：</p>

<ol>
<li>UITableView增加索引: <a href="https://www.flickr.com/services/api/flickr.places.getTopPlacesList.html">flickr.places.getTopPlacesList</a>返回的分组问题</li>
<li>RecentPhotos的存储: 要求是存储到NSUserDefaults，不过学着在AppDelegate里定义了全局变量，用来保存访问过的数据</li>
</ol>

<p>先放图，再依次记录解决办法。</p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/master/screenshot/screenshot5a.png" alt="Assignment 5 iPhone"></p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/master/screenshot/screenshot5d.png" alt="Assignment 5 iPad"></p>

<hr>

<h2>UITableView增加索引</h2>

<p>关于对UITableView数据增加字母顺序的索引，网上搜了不少教程但处理的都不是很好。有的是生成一个A-Z的固定NSDictionary(无法对应特殊字符)，有的则讲的云里雾里一运行就报错... 最后找到个<a href="http://www.icodeblog.com/2010/12/10/implementing-uitableview-sections-from-an-nsarray-of-nsdictionary-objects/">Implementing UITableView Sections from an NSArray of NSDictionary Objects</a>，说的比较清晰。</p>

<p>这里对allKeys排序优化了下，增加首字母索引方法如下：</p>

<h3>1. 当 <a href="https://github.com/upbit/CS193p_Homework/blob/e5652a0d5ef5458055ba67d5e567513de97a23ce/TopPlaces/TopPlaces/FlickrPlacesTVC.m#L60">setPlaces()</a> 时，生成排序过的 NSDictionary *sectionPlaces</h3>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">FlickrPlacesTVC</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">sortedSectionTitles</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">sectionPlaces</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div><div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeSectionDictionaryWithPlacesArray:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">places</span>
<span class="p">{</span>
    <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">sectionPlaces</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">place</span> <span class="k">in</span> <span class="n">places</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">NSString</span> <span class="o">*</span><span class="n">sectionTitle</span> <span class="o">=</span> <span class="p">[[</span><span class="n">place</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="n">FLICKR_PLACE_NAME</span><span class="p">]</span> <span class="nl">substringToIndex</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>

        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">sectionArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">sectionPlaces</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">sectionTitle</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sectionArray</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">sectionPlaces</span> <span class="nl">setValue</span><span class="p">:[[</span><span class="bp">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">sectionTitle</span><span class="p">];</span>
            <span class="n">sectionArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">sectionPlaces</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">sectionTitle</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">sectionArray</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">place</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// Sort each section array</span>
    <span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">key</span> <span class="k">in</span> <span class="n">sectionPlaces</span><span class="p">.</span><span class="n">allKeys</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">sectionPlaces</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">key</span><span class="p">]</span> <span class="nl">sortedArrayUsingComparator</span><span class="p">:</span><span class="o">^</span><span class="n">NSComparisonResult</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">)</span> <span class="p">{</span>
            <span class="bp">NSString</span> <span class="o">*</span><span class="n">title1</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj1</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="n">FLICKR_PLACE_NAME</span><span class="p">];</span>
            <span class="bp">NSString</span> <span class="o">*</span><span class="n">title2</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj2</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="n">FLICKR_PLACE_NAME</span><span class="p">];</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">title1</span> <span class="nl">compare</span><span class="p">:</span><span class="n">title2</span><span class="p">];</span>
        <span class="p">}]</span> <span class="n">mutableCopy</span><span class="p">];</span>
        <span class="p">[</span><span class="n">sectionPlaces</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">sortedArray</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">sectionPlaces</span> <span class="o">=</span> <span class="n">sectionPlaces</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPlaces:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">places</span>
<span class="p">{</span>
    <span class="n">_places</span> <span class="o">=</span> <span class="n">places</span><span class="p">;</span>
    <span class="p">[</span><span class="nb">self</span> <span class="nl">makeSectionDictionaryWithPlacesArray</span><span class="p">:</span><span class="n">places</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>关于makeSectionDictionaryWithPlacesArray()，这里先将每个place的首字母取出，检查NSDictionary中是否已有这个Key，没有则 [sectionPlaces setValue:[[NSMutableArray alloc] init] forKey:sectionTitle]。之后将place插入这个NSMutableArray的尾部。最后对每个key下的NSMutableArray排序，存储到self.sectionPlaces里。</p>

<h3>2. 处理获取到的 Section Titles</h3>

<p>其实简单的直接调用 self.sectionPlaces.allKeys 就能得到 sectionIndexTitlesForTableView() 用的NSArray了，不过这样做这些Titles就没有按字母大小排序。参考<a href="http://www.icodeblog.com/2010/12/10/implementing-uitableview-sections-from-an-nsarray-of-nsdictionary-objects/">教程里的方法</a>，[self.sectionPlaces.allKeys sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] 就是想要的结果。只不过每次这样排序性能上不知如何，想想还是存到NSArray里的好。</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">sortedSectionTitles</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_sortedSectionTitles</span><span class="p">)</span> <span class="n">_sortedSectionTitles</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="k">return</span> <span class="n">_sortedSectionTitles</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setSectionPlaces:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">sectionPlaces</span>
<span class="p">{</span>
    <span class="n">_sectionPlaces</span> <span class="o">=</span> <span class="n">sectionPlaces</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">sortedSectionTitles</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">sectionPlaces</span><span class="p">.</span><span class="n">allKeys</span> <span class="nl">sortedArrayUsingSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">localizedCaseInsensitiveCompare</span><span class="p">:)];</span>
<span class="p">}</span>
</code></pre></div>
<p>当每次self.sectionPlaces更新后，将排序过的结果存储到self.sortedSectionTitles里。但因为初始化时sectionPlaces可能还没有内容，需要lazy init sortedSectionTitles为空的NSArray</p>

<h3>3. 实现UITableView需要的几个函数</h3>

<p>因为已经准备好了self.sortedSectionTitles，下面几个函数就好返回了：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">numberOfSectionsInTableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
<span class="p">{</span>
    <span class="c1">// Return the number of sections.</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">sortedSectionTitles</span> <span class="n">count</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">titleForHeaderInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">sortedSectionTitles</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">section</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">sectionIndexTitlesForTableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">sortedSectionTitles</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
<span class="p">{</span>
    <span class="c1">// Return the number of rows in the section.</span>
    <span class="k">return</span> <span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">sectionPlaces</span> <span class="nl">valueForKey</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">sortedSectionTitles</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">section</span><span class="p">]]</span> <span class="n">count</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">CellIdentifier</span> <span class="o">=</span> <span class="s">@&quot;Flickr Place Cell&quot;</span><span class="p">;</span>
    <span class="bp">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier</span><span class="p">:</span><span class="n">CellIdentifier</span> <span class="nl">forIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>

    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">place</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">sectionPlaces</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">sortedSectionTitles</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">section</span><span class="p">]]</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">locality</span> <span class="o">=</span> <span class="p">[[</span><span class="n">place</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="n">FLICKR_PLACE_NAME</span><span class="p">]</span> <span class="nl">componentsSeparatedByString</span><span class="p">:</span><span class="s">@&quot;, &quot;</span><span class="p">];</span>
    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">locality</span> <span class="n">firstObject</span><span class="p">];</span>
    <span class="n">cell</span><span class="p">.</span><span class="n">detailTextLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">locality</span> <span class="nl">componentsJoinedByString</span><span class="p">:</span><span class="s">@&quot;, &quot;</span><span class="p">];</span>

    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>tableView: numberOfRowsInSection这个的处理比较巧妙，另外注意从indexPath里获取的内容，都需要改成这样：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">place</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">sectionPlaces</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">sortedSectionTitles</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">section</span><span class="p">]]</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</code></pre></div>
<p><strong>完整代码见 <a href="https://github.com/upbit/CS193p_Homework/blob/e5652a0d5ef5458055ba67d5e567513de97a23ce/TopPlaces/TopPlaces/FlickrPlacesTVC.m">TopPlaces/FlickrPlacesTVC.m</a></strong></p>

<hr>

<h2>RecentPhotos的存储</h2>

<p>作业要求是存储到NSUserDefaults里，没看到结果用全局变量实现了... 先说思路吧，后面再来改。</p>

<p>因为需要存储访问过的照片，最先想到的是在 FlickrPhotosTVC.m 的 prepareImageViewController() 里，增加记录函数。但 RecentsViewController 却是 FlickrPhotosTVC 的子类，而且还有其他UITableViewController是继承于FlickrPhotosTVC的，在这里维护一个NSArray显然不是好办法。于是研究了下AppDelegate的全局变量访问方法。</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">TopPlacesAppDelegate</span> : <span class="bp">UIResponder</span> <span class="o">&lt;</span><span class="bp">UIApplicationDelegate</span><span class="o">&gt;</span>

<span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">recentPhotos</span><span class="p">;</span>

<span class="k">@end</span>
</code></pre></div>
<p>在TopPlacesAppDelegate.h里定义recentPhotos，这种全局变量访问方法比较简单。</p>

<p>读：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#import &quot;TopPlacesAppDelegate.h&quot;</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">fetchPhotos</span>
<span class="p">{</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">photos</span> <span class="o">=</span> <span class="p">((</span><span class="n">TopPlacesAppDelegate</span> <span class="o">*</span><span class="p">)[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">delegate</span><span class="p">]).</span><span class="n">recentPhotos</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>写：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MAX_RECENT_PHOTO_NUM</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addPhotoToRecentPhotosArray:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">photo</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">tag</span> <span class="o">==</span> <span class="n">TVC_TAG_IGNORE_VIEW_HISTORY</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>

    <span class="n">TopPlacesAppDelegate</span> <span class="o">*</span><span class="n">appDelegate</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">delegate</span><span class="p">];</span>
    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">recentPhotos</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithArray</span><span class="p">:</span><span class="n">appDelegate</span><span class="p">.</span><span class="n">recentPhotos</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">recentPhotos</span> <span class="nl">containsObject</span><span class="p">:</span><span class="n">photo</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Add recent: &#39;%@&#39;&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">photo</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="n">FLICKR_PHOTO_TITLE</span><span class="p">]);</span>

        <span class="p">[</span><span class="n">recentPhotos</span> <span class="nl">insertObject</span><span class="p">:</span><span class="n">photo</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
        <span class="n">appDelegate</span><span class="p">.</span><span class="n">recentPhotos</span> <span class="o">=</span> <span class="p">[</span><span class="n">recentPhotos</span> <span class="nl">subarrayWithRange</span><span class="p">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">MIN</span><span class="p">([</span><span class="n">recentPhotos</span> <span class="n">count</span><span class="p">],</span> <span class="n">MAX_RECENT_PHOTO_NUM</span><span class="p">))];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>因为 RecentsViewController 里点击图片，也会调用 addPhotoToRecentPhotosArray()，只好用比较搓的办法 self.tableView.tag = TVC_TAG_IGNORE_VIEW_HISTORY，然后判断自己tableView.tag是否为TVC_TAG_IGNORE_VIEW_HISTORY来跳过。</p>

<h2><a href="https://github.com/upbit/CS193p_Homework/tree/bff7c92109567e811a331b954282d4f907001941/TopPlaces/TopPlaces">Update SourceCode</a></h2>

<p>修复Recents保存到NSUserDefaults的问题。UIImageView的自动缩小倒是很容易，暂时没做双击放大。</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="c1">// Zoom to show as much image as possible</span>
<span class="c1">// http://stackoverflow.com/questions/14471298/zooming-uiimageview-inside-uiscrollview-with-autolayout</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initZoom</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">minZoom</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
                        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">minZoom</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">minimumZoomScale</span> <span class="o">=</span> <span class="n">minZoom</span><span class="p">;</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">zoomScale</span> <span class="o">=</span> <span class="n">minZoom</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setImage:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span>
<span class="p">{</span>
    <span class="p">...</span>

    <span class="p">[</span><span class="nb">self</span> <span class="n">initZoom</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didRotateFromInterfaceOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">fromInterfaceOrientation</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">initZoom</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>至此算是把作业5搞定了，另外吐槽下GFW，在国内访问Flickr真心不容易。而且因为cn.edit.yahoo.com无法访问，还要挂VPN注册Flickr帐号...</p>
]]></content:encoded>
      <dc:date>2014-08-26T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>继续完善CS193p作业3的Extra Credit，发现多排序的Ranking处理起来还真不容易</title>
      <link>http://blog.imaou.com/study/2014/08/19/CS193p_Assignment3_extra2.html</link>
      <description><![CDATA[今天接着做作业3的Extra Credit部分，要求是实现一个Ranking页和Setting页。
]]></description>
      <pubDate>Tue, 19 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2014/08/19/CS193p_Assignment3_extra2.html</guid>
      <content:encoded><![CDATA[<p>今天接着做作业3的Extra Credit部分，要求是实现一个Ranking页和Setting页。</p>

<p>Ranking可以存在NSUserDefaults里，但因为插入结果时需要排序（按最高分/最短时间/最新游戏），则必须实现一个GameResult对象。最先想到的问题是三个排行榜的存储方式，存成一个NSArray肯定是不行的，等游戏记录一多别说排序了，存在NSUserDefaults里的数据都会不断膨胀。</p>

<p>所以在调用storageGameResultToRanking()时，分别对三个排行榜插入本轮的数据，并截断为Top10写入NSUserDefaults里。一运行发现根本就跑不起来，查了下原因发现NSUserDefaults不能存储自定义类。最终在<a href="http://stackoverflow.com/questions/3000220/best-way-to-save-to-nsuserdefaults-for-custom-class">stackoverflow</a>上找到个较好的处理办法，利用NSKeyedArchiver将自定义对象序列化为NSData存储。排行榜更新部分的代码如下：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">+</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">sortRankingByKeyAndOrder:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">ranking</span> <span class="nf">rankingName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">rankingName</span>
<span class="p">{</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">keySorted</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
    <span class="kt">BOOL</span> <span class="n">ascending</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">rankingName</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">RANK_LAST_PLAYED</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">keySorted</span> <span class="o">=</span> <span class="s">@&quot;date&quot;</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">rankingName</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">RANK_GAME_SCORE</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">keySorted</span> <span class="o">=</span> <span class="s">@&quot;score&quot;</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">rankingName</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">RANK_GAME_DURATION</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">keySorted</span> <span class="o">=</span> <span class="s">@&quot;duration&quot;</span><span class="p">;</span>
        <span class="n">ascending</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="bp">NSSortDescriptor</span> <span class="o">*</span><span class="n">sortDescriptor</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSSortDescriptor</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithKey</span><span class="p">:</span><span class="n">keySorted</span> <span class="nl">ascending</span><span class="p">:</span><span class="n">ascending</span><span class="p">];</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSArray</span> <span class="nl">arrayWithObject</span><span class="p">:</span><span class="n">sortDescriptor</span><span class="p">];</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">ranking</span> <span class="nl">sortedArrayUsingDescriptors</span><span class="p">:</span><span class="n">sortDescriptors</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">storageOneGameResult:</span><span class="p">(</span><span class="n">GameResult</span> <span class="o">*</span><span class="p">)</span><span class="nv">gameResult</span> <span class="nf">rankingName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">rankingName</span>
<span class="p">{</span>
    <span class="c1">// get GameRanking from NSUserDefaults</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">keyRanking</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%@_%@&quot;</span><span class="p">,</span> <span class="n">gameResult</span><span class="p">.</span><span class="n">gameType</span><span class="p">,</span> <span class="n">rankingName</span><span class="p">];</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">rawRanking</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">keyRanking</span><span class="p">];</span>

    <span class="c1">// decode Ranking</span>
    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">ranking</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rawRanking</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="n">rawObject</span> <span class="k">in</span> <span class="n">rawRanking</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">GameResult</span> <span class="o">*</span><span class="n">record</span> <span class="o">=</span> <span class="p">(</span><span class="n">GameResult</span> <span class="o">*</span><span class="p">)[</span><span class="bp">NSKeyedUnarchiver</span> <span class="nl">unarchiveObjectWithData</span><span class="p">:</span><span class="n">rawObject</span><span class="p">];</span>
            <span class="p">[</span><span class="n">ranking</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">record</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">ranking</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">gameResult</span><span class="p">];</span>

    <span class="c1">// sort by key</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">GameRanking</span> <span class="nl">sortRankingByKeyAndOrder</span><span class="p">:</span><span class="n">ranking</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">rankingName</span><span class="p">];</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">resultArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">sortedArray</span> <span class="nl">subarrayWithRange</span><span class="p">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">MIN</span><span class="p">([</span><span class="n">sortedArray</span> <span class="n">count</span><span class="p">],</span> <span class="n">RANKING_TOP_SIZE</span><span class="p">))];</span>

    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">encodeArray</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">GameResult</span> <span class="o">*</span><span class="n">record</span> <span class="k">in</span> <span class="n">resultArray</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">NSData</span> <span class="o">*</span><span class="n">encodeObject</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSKeyedArchiver</span> <span class="nl">archivedDataWithRootObject</span><span class="p">:</span><span class="n">record</span><span class="p">];</span>
        <span class="p">[</span><span class="n">encodeArray</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">encodeObject</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">encodeArray</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">keyRanking</span><span class="p">];</span>
<span class="p">}</span>

<span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">storageGameResultToRanking:</span><span class="p">(</span><span class="n">GameResult</span> <span class="o">*</span><span class="p">)</span><span class="nv">gameResult</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">GameRanking</span> <span class="nl">storageOneGameResult</span><span class="p">:</span><span class="n">gameResult</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">RANK_LAST_PLAYED</span><span class="p">];</span>
    <span class="p">[</span><span class="n">GameRanking</span> <span class="nl">storageOneGameResult</span><span class="p">:</span><span class="n">gameResult</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">RANK_GAME_SCORE</span><span class="p">];</span>
    <span class="p">[</span><span class="n">GameRanking</span> <span class="nl">storageOneGameResult</span><span class="p">:</span><span class="n">gameResult</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">RANK_GAME_DURATION</span><span class="p">];</span>
    <span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">synchronize</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>另外，sortRankingByKeyAndOrder()需要导出用于排行榜中最高分和最短时间的加亮显示。不得不说NSAttributedString用的非常不顺手，折腾排行榜加亮又花了快2个小时，不过学到[NSRange rangeOfString:]的用法，以后对付上色的事情应该会轻松不少：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c">    <span class="bp">NSString</span> <span class="o">*</span><span class="n">rankingString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GameRanking</span> <span class="nl">getGlobalRankingByName</span><span class="p">:</span><span class="n">gameType</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">rankingName</span><span class="p">]</span> <span class="nl">componentsJoinedByString</span><span class="p">:</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">];</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">rankingTextView</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">rankingString</span><span class="p">;</span>

    <span class="c1">// try highlight shortest game / highest score in array</span>
    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">rawRankingArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">GameRanking</span> <span class="nl">getGlobalRawRankingByName</span><span class="p">:</span><span class="n">gameType</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">rankingName</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">rawRankingArray</span> <span class="n">count</span><span class="p">])</span> <span class="p">{</span>
        <span class="bp">NSMutableAttributedString</span> <span class="o">*</span><span class="n">textViewAttributedText</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAttributedString</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">rankingTextView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">];</span>

        <span class="bp">NSString</span> <span class="o">*</span><span class="n">shortestGameLine</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">GameRanking</span> <span class="nl">sortRankingByKeyAndOrder</span><span class="p">:</span><span class="n">rawRankingArray</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">RANK_GAME_DURATION</span><span class="p">]</span> <span class="n">firstObject</span><span class="p">]</span> <span class="n">description</span><span class="p">];</span>
        <span class="p">[</span><span class="n">textViewAttributedText</span> <span class="nl">addAttributes</span><span class="p">:</span><span class="l">@{</span> <span class="nl">NSStrokeWidthAttributeName</span> <span class="p">:</span> <span class="p">@</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span>
                                                 <span class="nl">NSStrokeColorAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">orangeColor</span><span class="p">]</span> <span class="l">}</span>
                                        <span class="nl">range</span><span class="p">:[</span><span class="n">rankingString</span> <span class="nl">rangeOfString</span><span class="p">:</span><span class="n">shortestGameLine</span><span class="p">]];</span>

        <span class="bp">NSString</span> <span class="o">*</span><span class="n">highestScoreLine</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">GameRanking</span> <span class="nl">sortRankingByKeyAndOrder</span><span class="p">:</span><span class="n">rawRankingArray</span> <span class="nl">rankingName</span><span class="p">:</span><span class="n">RANK_GAME_SCORE</span><span class="p">]</span> <span class="n">firstObject</span><span class="p">]</span> <span class="n">description</span><span class="p">];</span>
        <span class="p">[</span><span class="n">textViewAttributedText</span> <span class="nl">addAttributes</span><span class="p">:</span><span class="l">@{</span> <span class="nl">NSForegroundColorAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="l">}</span>
                                        <span class="nl">range</span><span class="p">:[</span><span class="n">rankingString</span> <span class="nl">rangeOfString</span><span class="p">:</span><span class="n">highestScoreLine</span><span class="p">]];</span>

        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">rankingTextView</span> <span class="nl">setAttributedText</span><span class="p">:</span><span class="n">textViewAttributedText</span><span class="p">];</span>
    <span class="p">}</span>
</code></pre></div>
<p>先把rankingTextView的内容取到NSMutableAttributedString *textViewAttributedText，之后排序得到最高分和最短时间的两个记录的NSString，用rangeOfString搜索NSRange并标记之。最后加亮完，整个Ranking页是这个样子：</p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/master/screenshot/screenshot3c.png" alt="Assignment 3 screenshut"></p>

<p>至此，终于把Assignment3给全部搞定了:)</p>
]]></content:encoded>
      <dc:date>2014-08-19T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>终于填完了CS193p作业3的坑，不过话说还有Extra Credit没写...</title>
      <link>http://blog.imaou.com/study/2014/08/18/CS193p_Assignment3_extra.html</link>
      <description><![CDATA[网上找了个作业3的例子，看完代码才对UIViewController的继承有所体会
]]></description>
      <pubDate>Mon, 18 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2014/08/18/CS193p_Assignment3_extra.html</guid>
      <content:encoded><![CDATA[<p>网上找了个<a href="http://cs193p.m2m.at/tag/matchismo+2013-14/">作业3的例子</a>，看完代码才对UIViewController的继承有所体会</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBOutletCollection</span><span class="p">(</span><span class="bp">UIButton</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">cardButtons</span><span class="p">;</span>
</code></pre></div>
<p>IBOutletCollection在父类GameViewController绑定后，在StoryBoard里切换View的Controller为子类(比如SetGameViewController)，此时View中按钮就不再绑定到父类的这个IBOutletCollection中了。在子类头部声明变量后，查看绑定正常。</p>

<hr>

<p>另一个是对Set这个游戏理解不够，这个游戏的UI应该是这样的：</p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/master/screenshot/screenshot3a.png" alt="Assignment 3 screenshut"></p>

<p>也就说不是翻转卡片，需要在子类中重写卡片绘制函数：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">NSAttributedString</span> <span class="o">*</span><span class="p">)</span><span class="nf">attributedTitleForCard:</span><span class="p">(</span><span class="n">Card</span> <span class="o">*</span><span class="p">)</span><span class="nv">card</span>
<span class="p">{</span>
    <span class="bp">NSString</span> <span class="o">*</span><span class="n">symbol</span> <span class="o">=</span> <span class="s">@&quot;?&quot;</span><span class="p">;</span>
    <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">card</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">SetPlayingCard</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="n">SetPlayingCard</span> <span class="o">*</span><span class="n">setCard</span> <span class="o">=</span> <span class="p">(</span><span class="n">SetPlayingCard</span> <span class="o">*</span><span class="p">)</span><span class="n">card</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">symbol</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;oval&quot;</span><span class="p">])</span> <span class="n">symbol</span> <span class="o">=</span> <span class="s">@&quot;●&quot;</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">symbol</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;squiggle&quot;</span><span class="p">])</span> <span class="n">symbol</span> <span class="o">=</span> <span class="s">@&quot;▲&quot;</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">symbol</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;diamond&quot;</span><span class="p">])</span> <span class="n">symbol</span> <span class="o">=</span> <span class="s">@&quot;■&quot;</span><span class="p">;</span>

        <span class="n">symbol</span> <span class="o">=</span> <span class="p">[</span><span class="n">symbol</span> <span class="nl">stringByPaddingToLength</span><span class="p">:</span><span class="n">setCard</span><span class="p">.</span><span class="n">number</span> <span class="nl">withString</span><span class="p">:</span><span class="n">symbol</span> <span class="nl">startingAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">color</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;red&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">attributes</span> <span class="nl">setObject</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">NSForegroundColorAttributeName</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">color</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;green&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">attributes</span> <span class="nl">setObject</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">greenColor</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">NSForegroundColorAttributeName</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">color</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;purple&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">attributes</span> <span class="nl">setObject</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">purpleColor</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">NSForegroundColorAttributeName</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">shading</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;open&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">attributes</span> <span class="nl">setObject</span><span class="p">:</span><span class="mi">@8</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">NSStrokeWidthAttributeName</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">setCard</span><span class="p">.</span><span class="n">shading</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;striped&quot;</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">attributes</span> <span class="nl">addEntriesFromDictionary</span><span class="p">:</span><span class="l">@{</span> <span class="nl">NSStrokeWidthAttributeName</span> <span class="p">:</span> <span class="p">@</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span>
                                                    <span class="nl">NSStrokeColorAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blackColor</span><span class="p">],</span>
                                                    <span class="nl">NSForegroundColorAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="n">attributes</span><span class="p">[</span><span class="n">NSForegroundColorAttributeName</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent</span><span class="p">:</span><span class="mf">0.6</span><span class="p">]</span><span class="l">}</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// solid</span>
            <span class="c1">// pass</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">[[</span><span class="bp">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="n">symbol</span> <span class="nl">attributes</span><span class="p">:</span><span class="n">attributes</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>不像CardGame里需要判断是否选中，这里需要总是返回卡片的图案。另外学到个stringByPaddingToLength，用在这里确实比for循环简洁。</p>

<p>最后是History功能，觉得他里面那样实现过于曲折，于是稍稍改动按钮的响应动作，每次匹配后把updateUI()后的attributedText附加到History中：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">cardTouchButton:</span><span class="p">(</span><span class="bp">UIButton</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">chosenButtonIndex</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">cardButtons</span> <span class="nl">indexOfObject</span><span class="p">:</span><span class="n">sender</span><span class="p">];</span>
    <span class="kt">BOOL</span> <span class="n">matched</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">game</span> <span class="nl">chooseCardAtIndex</span><span class="p">:</span><span class="n">chosenButtonIndex</span> <span class="nl">matchCount</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">chosenCardCount</span><span class="p">];</span>
    <span class="p">[</span><span class="nb">self</span> <span class="n">updateUI</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">matched</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">matchHistory</span> <span class="nl">appendAttributedString</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">infoLabel</span><span class="p">.</span><span class="n">attributedText</span><span class="p">];</span>
        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">matchHistory</span> <span class="nl">appendAttributedString</span><span class="p">:[[</span><span class="bp">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">]];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>重点是让chooseCardAtIndex()增加个BOOL的返回值，以便判断是否发生过matchCard()。如果match过，则等待updateUI()更新了Label后，把Label的attributedText拿过来。整个过程都是父类内部的操作，子类只用关注于按自己需求更新Label就好。</p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/master/screenshot/screenshot3b.png" alt="Assignment 3 history page"></p>

<p><a href="https://github.com/upbit/CS193p_Homework/tree/a96f260a7b3b24b3f0484655d58094284f023f38/Matchismo/Matchismo">GitHub源码地址</a></p>

<p>至于Extra Credit说的高分存储和排行榜功能，就留到以后完善把...</p>
]]></content:encoded>
      <dc:date>2014-08-18T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>终于把博客首页显示慢的问题解决了，PageSpeed Insights立了大功！</title>
      <link>http://blog.imaou.com/misc/2014/08/17/pagespeed_insights.html</link>
      <description><![CDATA[按PageSpeed Insights的建议优化了博客的性能，果然神器啊。
]]></description>
      <pubDate>Sun, 17 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2014/08/17/pagespeed_insights.html</guid>
      <content:encoded><![CDATA[<p>按<a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a>的建议优化了博客的性能，果然神器啊。</p>

<p>最终优化完PageSpeed Insights移动端评分上了90，预载子页面css后也不会导致POST子页面卡顿。扣分的是静态资源缓存时间问题，不过这个是GitHub的设置，暂时不知道怎么处理</p>

<p><img src="http://blog.imaou.com/images/pagespeed_insights.png" alt="PageSpeed Insights"></p>

<p>以前GitHub在晚上load几个css简直是要人命了，在微信里点开会白屏好久，现在终于感觉不出来这是GitHub的服务器了:P</p>
]]></content:encoded>
      <dc:date>2014-08-17T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>创业路还有点长</title>
      <link>http://blog.imaou.com/entrepreneurship/2014/08/16/about_entrepreneurship.html</link>
      <description><![CDATA[意外结识一个手握有畅游500万注资的手游公司的CEO。因为他算是过来人，打算向他取点经验。他本人不像我这种半路出家的和尚，算是科班出身--已经在游戏行业有10年的经验。简单聊了下目前的现状，他给出了现在的我们评价是: &quot;要钱没钱，要人没人&quot;-_-
]]></description>
      <pubDate>Sat, 16 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/entrepreneurship/2014/08/16/about_entrepreneurship.html</guid>
      <content:encoded><![CDATA[<p>意外结识一个手握有畅游500万注资的手游公司的CEO。因为他算是过来人，打算向他取点经验。他本人不像我这种半路出家的和尚，算是科班出身--已经在游戏行业有10年的经验。简单聊了下目前的现状，他给出了现在的我们评价是: &quot;要钱没钱，要人没人&quot;-_-</p>

<p>仔细想想确实中肯。虽然个人能够胜任cocos2d-x这种小规模的demo开发，但是看到他们的Unity3D的Demo，直接就震惊了。完成度这么高的东西，不仅仅美术、特效、交互，光代码就不是单干可以做到的。</p>

<p>另外记录下他给的几点建议，以便时时反思：</p>

<ol>
<li>应该优先考虑怎么存活；</li>
<li>团队人员不足的情况，不应该考虑重度游戏；</li>
<li>从小游戏下手，先积累经验</li>
</ol>

<p>中午吃完早茶，在他介绍之下又去见了手游研发网的CEO刘喜。第一映像给人感觉是他竟然如此年轻！一问才知道居然还是同年，然而别人已经谈着几百万的生意了，还打算筹建游戏基金 (汗，差别真大</p>

<p>上到他家二楼的办公室，大致闲聊了几句就进入正题。迅速说明了下想要了解&quot;如何在手游行业寻求发展&quot;后，然后向他说明了下现在团队的现况。</p>

<p>也许阅人无数，他一针见血的就指出了人员和股份等方面的问题。貌似他个人倾向于40%/30%/(其他人)这种股权分配比例，并说明从股权划分上反映了团队成员间的自信和合作模式，对于我们这种半分的分配方式，是绝对拉不到投资的 (￣ε(#￣)</p>

<p>并且说明以我现在的状态，肯定会花钱买经验，载几个跟头甚至大跟头，才能慢慢起步。总结下来和上面的有些类似，不过是从投资人角度说明的：</p>

<ol>
<li>要么有团队找钱，要么有钱找团队</li>
<li>现阶段可以考虑请创业顾问，给点顾问费(每周、每月定时审视)来避免走弯路</li>
<li>最好先请个有经验的游戏业内人士(产品总监之类有过完整游戏经验的)，然后由他组建团队，策划游戏到实施，从中学习项目经验</li>
</ol>

<p>最后关于风投，一般喜欢不会顾及生存问题的成熟团队，因为这样回本的概率较高。关于所说不择手段寻求生存的例子，从他给的一个投资几百万的demo也能略窥一二。。。在Android里预装一个微创新的小游戏，然后在游戏中埋下短信扣费的大坑(游戏的扣费提示居然比按钮的边框还要小，蓝色拿远完全不会注意到...)。连他自己都说，如果家里有熊孩子不注意点下去，6元就灰飞烟灭了→_→</p>

<p>这种纯粹为了坑钱的游戏已经背离我的初衷了，绝对不会考虑。想想时隔几年，在山寨Android里居然又发展出这种走短信代理的圈钱游戏，还能拿到风投，真是国内游戏业的悲哀。。</p>

<p>总结来看：光有个七拼八凑的demo是远远不够的，而且我转做独立app开发者的想法也被打了一闷棍... <strong>创业这段夜路还很长呐</strong></p>
]]></content:encoded>
      <dc:date>2014-08-16T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>痛苦不堪的实现了CS193p作业3的基本要求，但是各种坑</title>
      <link>http://blog.imaou.com/study/2014/08/15/CS193p_Assignment3.html</link>
      <description><![CDATA[陆陆续续花了2天，才功能上完成了作业3的要求。。。
]]></description>
      <pubDate>Fri, 15 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2014/08/15/CS193p_Assignment3.html</guid>
      <content:encoded><![CDATA[<p>陆陆续续花了2天，才功能上完成了作业3的要求。。。</p>

<p>题目要求是完成一个叫Set的游戏，根据<a href="http://en.wikipedia.org/wiki/Set_(game)">wiki</a>得知只有满足以下全部4个规则，才能组成Set：</p>

<ol>
<li>They all have the same number, or they have three different numbers.</li>
<li>They all have the same symbol, or they have three different symbols.</li>
<li>They all have the same shading, or they have three different shadings.</li>
<li>They all have the same color, or they have three different colors.</li>
</ol>

<p>从描述中可以知道，Set的Card有 number, symbol, shading, color 四组属性，每个属性共有3种类型，一共81张牌。</p>

<p>所以match()改成了这个样子：</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">matchSetCardsWithKey:</span><span class="p">(</span><span class="n">SetPlayingCard</span> <span class="o">*</span><span class="p">)</span><span class="nv">card1</span> <span class="nf">card2:</span><span class="p">(</span><span class="n">SetPlayingCard</span> <span class="o">*</span><span class="p">)</span><span class="nv">card2</span> <span class="nf">card3:</span><span class="p">(</span><span class="n">SetPlayingCard</span> <span class="o">*</span><span class="p">)</span><span class="nv">card3</span> <span class="nf">key:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span> <span class="nf">isString:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">isString</span>
<span class="p">{</span>
    <span class="kt">BOOL</span> <span class="n">match</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>

    <span class="kt">id</span> <span class="n">value1</span> <span class="o">=</span> <span class="p">[</span><span class="n">card1</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
    <span class="kt">id</span> <span class="n">value2</span> <span class="o">=</span> <span class="p">[</span><span class="n">card2</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
    <span class="kt">id</span> <span class="n">value3</span> <span class="o">=</span> <span class="p">[</span><span class="n">card3</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isString</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">value1</span> <span class="o">==</span> <span class="n">value2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">value2</span> <span class="o">==</span> <span class="n">value3</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">match</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;3 card has same &#39;%@&#39;&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">value1</span> <span class="o">!=</span> <span class="n">value2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">value2</span> <span class="o">!=</span> <span class="n">value3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">value3</span> <span class="o">!=</span> <span class="n">value1</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">match</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;3 card has different &#39;%@&#39;&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(([</span><span class="n">value1</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">value2</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">value2</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">value3</span><span class="p">]))</span> <span class="p">{</span>
            <span class="n">match</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;3 card has same &#39;%@&#39;&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="o">!</span><span class="p">[</span><span class="n">value1</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">value2</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">value2</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">value3</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">value3</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">value1</span><span class="p">]))</span> <span class="p">{</span>
            <span class="n">match</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;3 card has different &#39;%@&#39;&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">match</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// override</span>
<span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">match:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">otherCards</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">otherCards</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>     <span class="c1">// 3x model</span>
        <span class="kt">id</span> <span class="n">card1</span> <span class="o">=</span> <span class="p">[</span><span class="n">otherCards</span> <span class="n">firstObject</span><span class="p">];</span>
        <span class="kt">id</span> <span class="n">card2</span> <span class="o">=</span> <span class="p">[</span><span class="n">otherCards</span> <span class="n">lastObject</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(([</span><span class="n">card1</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">SetPlayingCard</span> <span class="k">class</span><span class="p">]])</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">card2</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="n">SetPlayingCard</span> <span class="k">class</span><span class="p">]]))</span> <span class="p">{</span>
            <span class="n">SetPlayingCard</span> <span class="o">*</span><span class="n">otherCard1</span> <span class="o">=</span> <span class="p">(</span><span class="n">SetPlayingCard</span> <span class="o">*</span><span class="p">)</span><span class="n">card1</span><span class="p">;</span>
            <span class="n">SetPlayingCard</span> <span class="o">*</span><span class="n">otherCard2</span> <span class="o">=</span> <span class="p">(</span><span class="n">SetPlayingCard</span> <span class="o">*</span><span class="p">)</span><span class="n">card2</span><span class="p">;</span>

            <span class="c1">// They all have the same number, or they have three different numbers</span>
            <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="nl">matchSetCardsWithKey</span><span class="p">:</span><span class="nb">self</span> <span class="nl">card2</span><span class="p">:</span><span class="n">otherCard1</span> <span class="nl">card3</span><span class="p">:</span><span class="n">otherCard2</span> <span class="nl">key</span><span class="p">:</span><span class="s">@&quot;rank&quot;</span> <span class="nl">isString</span><span class="p">:</span><span class="nb">NO</span><span class="p">])</span> <span class="p">{</span>
                <span class="c1">// They all have the same symbol, or they have three different symbols</span>
                <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="nl">matchSetCardsWithKey</span><span class="p">:</span><span class="nb">self</span> <span class="nl">card2</span><span class="p">:</span><span class="n">otherCard1</span> <span class="nl">card3</span><span class="p">:</span><span class="n">otherCard2</span> <span class="nl">key</span><span class="p">:</span><span class="s">@&quot;symbol&quot;</span> <span class="nl">isString</span><span class="p">:</span><span class="nb">YES</span><span class="p">])</span> <span class="p">{</span>
                    <span class="c1">// They all have the same shading, or they have three different shadings</span>
                    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="nl">matchSetCardsWithKey</span><span class="p">:</span><span class="nb">self</span> <span class="nl">card2</span><span class="p">:</span><span class="n">otherCard1</span> <span class="nl">card3</span><span class="p">:</span><span class="n">otherCard2</span> <span class="nl">key</span><span class="p">:</span><span class="s">@&quot;shading&quot;</span> <span class="nl">isString</span><span class="p">:</span><span class="nb">YES</span><span class="p">])</span> <span class="p">{</span>
                        <span class="c1">// They all have the same color, or they have three different colors</span>
                        <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="nl">matchSetCardsWithKey</span><span class="p">:</span><span class="nb">self</span> <span class="nl">card2</span><span class="p">:</span><span class="n">otherCard1</span> <span class="nl">card3</span><span class="p">:</span><span class="n">otherCard2</span> <span class="nl">key</span><span class="p">:</span><span class="s">@&quot;color&quot;</span> <span class="nl">isString</span><span class="p">:</span><span class="nb">NO</span><span class="p">])</span> <span class="p">{</span>
                            <span class="n">score</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">score</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>主要是实现matchSetCardsWithKey()这个函数，比较某条规则是否匹配。完成的作业截图如下：</p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/975beb12f587d5e9a93ead443fe61f633150fc43/screenshot/screenshot3a.png" alt="Assignment 3 screenshut"></p>

<p>History功能比较简单，因为已经显示了每次匹配的结果，不断将NSAttributedString附加到一个matchHistory变量即可：</p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/975beb12f587d5e9a93ead443fe61f633150fc43/screenshot/screenshot3b.png" alt="Assignment 3 history page"></p>

<p><a href="https://github.com/upbit/CS193p_Homework/tree/975beb12f587d5e9a93ead443fe61f633150fc43/Matchismo/Matchismo">代码见GitHub</a></p>

<hr>

<p>做完后看Hint，才悲剧的发现这样实现存在2个严重的问题。一个是第7点，模型应该是UI无关的，而我把NSAttributedStrings引入到了card.contents的内容显示上</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"> 7. Your Model is UI independent, so it cannot have NSAttributedStrings with UI 
    attributes anywhere in its interface or implementation. Any attribute defined in UIKit 
    is a UI attribute (obvious ones are those whose values are, for example, a UIColor or a 
    UIFont). All the attributes discussed in lecture were UI attributes. While it would 
    theoretically be legal to have an NSAttributedString without UI attributes in your 
    Model, it is recommended you not do that for this assignment. Use 
    NSAttributedString only in your Controller camp, not your Model camp
</code></pre></div>
<p>但去掉后又不知改怎么渲染NSAttributedStrings，难道要导出NSDictionary在外面插回去？</p>

<p>另一个是我的CardGameViewController/SetGameViewController并非继承于同一个自定义类，因为设置父类GameViewController时，无法将StoryBoard里不同数量的按钮在子类中绑定，又能在父类中获取到cardButtons的IBOutletCollection。也许需要动态创建按钮吧，这里着实想不通。</p>

<p>看来只能找机会去看看别人的实现方法了。。。</p>
]]></content:encoded>
      <dc:date>2014-08-15T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>新游戏的想法，目前还在构思中</title>
      <link>http://blog.imaou.com/game/2014/08/12/a_new_game_idea.html</link>
      <description><![CDATA[翻图库无意中发现去年舰娘活动的图片，海雾的船怎么看怎么漂亮：
]]></description>
      <pubDate>Tue, 12 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/game/2014/08/12/a_new_game_idea.html</guid>
      <content:encoded><![CDATA[<p>翻图库无意中发现去年舰娘活动的图片，海雾的船怎么看怎么漂亮：</p>

<p><a href="http://wikiwiki.jp/kc-summary/?gst">立绘Wiki地址</a>
<img src="http://blog.imaou.com/images/fog_iona_body.png" alt="For フルーツバスケット"></p>

<p>以前看《蒼き鋼のアルペジオ》时，每每被イオナ里各种雷达图和船体结构图给炫到，觉得哪天也像主角一样操纵者舰船纵横海域该多好</p>

<p><img src="http://blog.imaou.com/images/blue_steel_ss1.png" alt="For フルーツバスケット"></p>

<p><img src="http://blog.imaou.com/images/blue_steel_ss2.png" alt="For フルーツバスケット"></p>

<p><img src="http://blog.imaou.com/images/blue_steel_ss3.png" alt="For フルーツバスケット"></p>

<p>自从学了点cocos2d-x的皮毛，做一个这样的游戏的想法就像打不完的地鼠一样，不断从脑海深处冒出...</p>

<p>游戏重点模拟的是舰船内的操作和敌方动向预测(通过雷达)，并利用环境(洋流、海底地形)、超武器(侵蚀鱼雷、防护力场、超重炮...)与敌人战斗。</p>

<p>也就说玩家扮演的是在舰船内的指挥官或操作员，通过操作推进器、鱼雷发射管、防护罩等设备来完成迎击。鉴于每次操作的界面有限，目前想法是设计几个角色供玩家选择：</p>

<ol>
<li>舰长-<em>控制界面</em>: 通过雷达图下达指令(如发射侦察声纳短时增加雷达的探索范围，或者改变航向、速度和潜航深度)，另外还可以一键下达鱼雷装填等攻击指令；</li>
<li>船员-<em>武器管理界面</em>: 如鱼雷的装填选择(每个鱼雷发射管都有冷却时间，所以装填和发射需要精确计算)；超重炮的展开与填充(超重炮充能需要等待时间，并且会需要调度防护力场的能量来填充。也就说要100%功率发射就会停止动力系统和防护罩)</li>
<li>船员-<em>船体界面</em>: 控制船身各位置的防护力场填充比例(例如可以将所有能量集中在船首，来防御正面的攻击)。防护力场填充需要时间，受到连续攻击时，要么能量不足无法补充防御力场，要么防御力场超过承受极限，短时间无法生效。</li>
<li>船员-<em>动力界面</em>: 调整各发动机和出水口的动力。</li>
<li>船员-<em>雷达界面</em>: 大范围的雷达图，有些无法设别的雷达信号，只有这里才能发现。</li>
</ol>

<p>如果玩家选择舰长，其他船员的位置自动由电脑接管。此时下达指令按电脑船员的等级，有不同加成或者失误率。如果玩家选择船员，则能大幅增强某一方面的能力(玩家熟练度加成)，不过又缺少了战术上的博弈(比如人，可以像动画里不要命的，上来就一发100%威力的超重炮，然后在海面做出个回旋扫击敌群)。</p>

<p>所以暂时考虑做成多人联机类游戏，部分无法凑齐的船员由电脑代替。单人如果操作够快，当然也可以切换多个界面，全部由自己完成。</p>

<p>舱内界面暂时就这么多，不过海域模拟部分倒是个大难题，还有待完善。。。</p>
]]></content:encoded>
      <dc:date>2014-08-12T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>CS193p作业2完成，另外自己打造了个带同花顺匹配的版本，代码见文末</title>
      <link>http://blog.imaou.com/study/2014/08/11/CS193p_Assignment2.html</link>
      <description><![CDATA[第二个作业难度确实陡增，整整花了一下午才搞定3张牌的匹配问题：
]]></description>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2014/08/11/CS193p_Assignment2.html</guid>
      <content:encoded><![CDATA[<p>第二个作业难度确实陡增，整整花了一下午才搞定3张牌的匹配问题：</p>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/master/screenshot/screenshot2.png" alt="Assignment 2 Screenshot"></p>

<p>大部分实现在<a href="https://github.com/upbit/CS193p_Homework/blob/fb53c021c455cf53d85341ce61f9fb20ae3c3b7f/Matchismo/Matchismo/Model/CardMatchingGame.m">CardMatchingGame.m</a>里，直接<a href="https://github.com/upbit/CS193p_Homework/tree/fb53c021c455cf53d85341ce61f9fb20ae3c3b7f">clone这个分支</a>查看吧</p>

<hr>

<h3>关于<a href="https://github.com/upbit/CS193p_Homework/tree/joker">Joker分支</a></h3>

<p>玩了会觉得游戏略显单调，于是加了顺子和王的匹配。调整后的规则如下：</p>

<ol>
<li>随机分布 8,9,10,J,Q,K,A 以及2张Joker，一共30张牌</li>
<li>三张为顺子（如 A,K,Q 或 8,9,10）且同花色，得64分；不同花色得24分；</li>
<li>三张中rank相同，得32分；</li>
<li>三张的花色相同，得8分；</li>
<li>Joker可以代替任意一张牌，且按最大分值组合。</li>
</ol>

<p><img src="https://raw.github.com/upbit/CS193p_Homework/joker/screenshot/joker.png" alt="Screenshot"></p>

<p>主要的<a href="https://github.com/upbit/CS193p_Homework/blob/joker/Matchismo/Matchismo/Model/PlayingCard.m">match函数</a>实现。貌似还可以简化，不过由他去了→_→</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">match:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">otherCards</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">([</span><span class="n">otherCards</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>          <span class="c1">// 2x model</span>
        <span class="n">PlayingCard</span> <span class="o">*</span><span class="n">otherCard</span> <span class="o">=</span> <span class="p">[</span><span class="n">otherCards</span> <span class="n">firstObject</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">((</span><span class="nb">self</span><span class="p">.</span><span class="n">rank</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">otherCard</span><span class="p">.</span><span class="n">rank</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">rank</span> <span class="o">==</span> <span class="n">otherCard</span><span class="p">.</span><span class="n">rank</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">suit</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">otherCard</span><span class="p">.</span><span class="n">suit</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// joker match any cards</span>
            <span class="n">score</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">otherCards</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>     <span class="c1">// 3x model</span>
        <span class="c1">// sort cards by rank</span>
        <span class="bp">NSSortDescriptor</span> <span class="o">*</span><span class="n">sortDescriptor</span><span class="p">;</span>
        <span class="n">sortDescriptor</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSSortDescriptor</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithKey</span><span class="p">:</span><span class="s">@&quot;rank&quot;</span> <span class="nl">ascending</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSArray</span> <span class="nl">arrayWithObject</span><span class="p">:</span><span class="n">sortDescriptor</span><span class="p">];</span>
        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">sortedCards</span> <span class="o">=</span> <span class="p">[</span><span class="l">@[</span><span class="nb">self</span><span class="p">,</span> <span class="p">[</span><span class="n">otherCards</span> <span class="n">firstObject</span><span class="p">],</span> <span class="p">[</span><span class="n">otherCards</span> <span class="n">lastObject</span><span class="p">]</span><span class="l">]</span> <span class="nl">sortedArrayUsingDescriptors</span><span class="p">:</span><span class="n">sortDescriptors</span><span class="p">];</span>


        <span class="kt">BOOL</span> <span class="n">isStraight</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>

        <span class="c1">// 1. 检查排序后数组中joker的数量0-2</span>
        <span class="bp">NSUInteger</span> <span class="n">jokerCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">PlayingCard</span> <span class="o">*</span><span class="n">card</span> <span class="k">in</span> <span class="n">sortedCards</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">card</span><span class="p">.</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">jokerCount</span><span class="o">++</span><span class="p">;</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">PlayingCard</span> <span class="o">*</span><span class="n">lowCard</span> <span class="o">=</span> <span class="n">sortedCards</span><span class="p">[</span><span class="n">jokerCount</span><span class="p">];</span>
        <span class="n">PlayingCard</span> <span class="o">*</span><span class="n">midCard</span> <span class="o">=</span> <span class="n">sortedCards</span><span class="p">[(</span><span class="n">jokerCount</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">];</span>
        <span class="n">PlayingCard</span> <span class="o">*</span><span class="n">highCard</span> <span class="o">=</span> <span class="n">sortedCards</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
        <span class="bp">NSUInteger</span> <span class="n">rankDiff</span> <span class="o">=</span> <span class="n">highCard</span><span class="p">.</span><span class="n">rank</span> <span class="o">-</span> <span class="n">lowCard</span><span class="p">.</span><span class="n">rank</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">jokerCount</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 2. 如果joker为0，检查high-low的差值，不是2则肯定不为顺子</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">rankDiff</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 为2时，检查牌的两两差值是否为1</span>
                <span class="k">if</span> <span class="p">(((</span><span class="n">midCard</span><span class="p">.</span><span class="n">rank</span><span class="o">-</span><span class="n">lowCard</span><span class="p">.</span><span class="n">rank</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="n">highCard</span><span class="p">.</span><span class="n">rank</span><span class="o">-</span><span class="n">midCard</span><span class="p">.</span><span class="n">rank</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">))</span>
                    <span class="n">isStraight</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">jokerCount</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 3. 如果Joker为1，检查high-low差值是否为1或2，不是则不为顺子</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">rankDiff</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">rankDiff</span> <span class="o">==</span> <span class="mi">2</span><span class="p">))</span>
                <span class="n">isStraight</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">jokerCount</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 4. 如果Joker为2，此时一定组成顺子</span>
            <span class="n">isStraight</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">isStraight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(([</span><span class="n">lowCard</span><span class="p">.</span><span class="n">suit</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">midCard</span><span class="p">.</span><span class="n">suit</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">lowCard</span><span class="p">.</span><span class="n">suit</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">highCard</span><span class="p">.</span><span class="n">suit</span><span class="p">]))</span> <span class="p">{</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">16</span><span class="p">;</span>    <span class="c1">// straight flush</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="mi">6</span><span class="p">;</span>     <span class="c1">// straight</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">lowCard</span><span class="p">.</span><span class="n">rank</span> <span class="o">==</span> <span class="n">midCard</span><span class="p">.</span><span class="n">rank</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">lowCard</span><span class="p">.</span><span class="n">rank</span> <span class="o">==</span> <span class="n">highCard</span><span class="p">.</span><span class="n">rank</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">score</span> <span class="o">+=</span> <span class="mi">8</span><span class="p">;</span>         <span class="c1">// same rank</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(([</span><span class="n">lowCard</span><span class="p">.</span><span class="n">suit</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">midCard</span><span class="p">.</span><span class="n">suit</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">lowCard</span><span class="p">.</span><span class="n">suit</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">highCard</span><span class="p">.</span><span class="n">suit</span><span class="p">]))</span> <span class="p">{</span>
            <span class="n">score</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>         <span class="c1">// same suit</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">score</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>下载</strong>：Github的<a href="https://github.com/upbit/CS193p_Homework/archive/joker.zip">工程源码</a></p>

<p>ps: 如果在PlayingCardDeck.m里将牌扩展到全部54张，难度就会大幅增加。</p>
]]></content:encoded>
      <dc:date>2014-08-11T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>公开课"Developing iOS 7 Apps"的第一个作业完成</title>
      <link>http://blog.imaou.com/study/2014/08/07/CS193p_iPhone_appliction_developing.html</link>
      <description><![CDATA[以前iOS6的课程没学完，网易这iOS7的课程都上线了 (远目
]]></description>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/study/2014/08/07/CS193p_iPhone_appliction_developing.html</guid>
      <content:encoded><![CDATA[<p>以前iOS6的课程没学完，网易这<a href="http://v.163.com/special/opencourse/ios7.html">iOS7的课程</a>都上线了 (远目</p>

<p>鉴于Xcode5用的不熟，又从头开始啃这iOS开发的<a href="http://cs193p.stanford.edu/">CS193p公开课</a>了。看完视频觉得这次的例子非常有意思，抽象了Card/PlayingCard，Deck/PlayingDeck四个类，用一个Button实现翻牌抽卡效果</p>

<p>作业1很简单，将抽象的4个类加入到工程中，实现随机抽取52张牌的效果。下午折腾了下算是完成，补充了个将 NSUInteger rank 转牌面字符串的函数，其他基本都是照搬。</p>

<p>(依稀记得上次iOS6课程是个带X/Y存储的逆波兰式计算器，实在是太难上手了...)</p>

<p>总的来说前两章浅显易懂，推荐想学习iOS开发或了解Xcode5功能的同学。</p>

<p>附上<a href="https://itunes.apple.com/us/course/developing-ios-7-apps-for/id733644550">iTunesU地址</a>，比网易的源清晰很多</p>

<p><img src="http://a4.mzstatic.com/us/r30/CobaltPublic4/v4/21/50/bb/2150bb4a-211a-f13b-cf0a-72dbb661be80/d2_160.png" alt="iTunes"></p>
]]></content:encoded>
      <dc:date>2014-08-07T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>创业点滴</title>
      <link>http://blog.imaou.com/entrepreneurship/2014/08/06/about_entrepreneurship.html</link>
      <description><![CDATA[昨晚问一个深圳老板的创业经验，听后感触颇深。
]]></description>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/entrepreneurship/2014/08/06/about_entrepreneurship.html</guid>
      <content:encoded><![CDATA[<p>昨晚问一个深圳老板的创业经验，听后感触颇深。</p>

<p>可以总结为以下四点：</p>

<ol>
<li><p>&quot;搏&quot; (赌博的&quot;博&quot;)</p></li>
<li><p>&quot;诚信&quot;</p></li>
<li><p>&quot;靠自己&quot;</p></li>
<li><p>&quot;契而不舍&quot;</p></li>
</ol>

<p>想想自己2月有余就萌生退意，真是惭愧。创业不易，且行且珍惜！</p>
]]></content:encoded>
      <dc:date>2014-08-06T00:00:00+08:00</dc:date>
    </item>
    <item>
      <title>新博客开张纪念</title>
      <link>http://blog.imaou.com/misc/2014/08/01/new_blog.html</link>
      <description><![CDATA[庆祝新博客开张，附送张冈崎律子《For フルーツバスケット》的手稿：
]]></description>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0800</pubDate>
      <guid>http://blog.imaou.com/misc/2014/08/01/new_blog.html</guid>
      <content:encoded><![CDATA[<p>庆祝新博客开张，附送张冈崎律子《For フルーツバスケット》的手稿：</p>

<p><img src="http://blog.imaou.com/images/for_fruits_basket.jpg" alt="For フルーツバスケット"></p>
]]></content:encoded>
      <dc:date>2014-08-01T00:00:00+08:00</dc:date>
    </item>
    <dc:date>2015-03-07T00:00:00+08:00</dc:date>
  </channel>
</rss>